cscope 15 /workspaces/libnet/.vscode/cscope -q 0000002748 0000438667
	@/workspaces/libnet/include/gnuc.h

4 #i‚de‡
__P


5 #i‡
__STDC__


6 
	#__P
(
¥Ÿos
Ë
	)
protos

8 
	#__P
(
¥Ÿos
Ë()

	)

13 #ifde‡
__GNUC__


14 
	#ölöe
 
__ölöe


	)

16 
	#ölöe


	)

27 #ifde‡
__GNUC__


28 #i‚de‡
__dód


29 
	#__dód
 vﬁ©ûe

	)

31 #i‡
__GNUC__
 < 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 < 5)

32 #i‚de‡
__©åibuã__


33 
	#__©åibuã__
(
¨gs
)

	)

37 #i‚de‡
__dód


38 
	#__dód


	)

40 #i‚de‡
__©åibuã__


41 
	#__©åibuã__
(
¨gs
)

	)

	@/workspaces/libnet/include/ifaddrlist.h

30 
	siÁddæi°


32 #i‡(
HAVE_SOLARIS
 || 
HAVE_HPUX11
)

33 
uöt
 
	maddr
;

35 
uöt32_t
 
	maddr
;

37 *
	mdevi˚
;

40 
	slib√t_iÁddr_li°


42 
uöt32_t
 
	maddr
;

43 *
	mdevi˚
;

47 
iÁddæi°
(

48 
iÁddæi°
 **,

49 
öt8_t
 *

54 
£t_up_öãrÁ˚
(

55 
sockaddr_ö
 **,

56 
uöt8_t
 **

	@/workspaces/libnet/include/libnet/libnet-asn1.h

56 #i‚de‡
__LIBNET_ASN1_H


57 
	#__LIBNET_ASN1_H


	)

59 #i‚de‡
EIGHTBIT_SUBIDS


60 
uöt32_t
 
	toid
;

61 
	#MAX_SUBID
 0xFFFFFFFF

	)

63 
uöt8_t
 
	toid
;

64 
	#MAX_SUBID
 0xFF

	)

67 
	#MAX_OID_LEN
 64

	)

69 
	#ASN_BOOLEAN
 (0x01)

	)

70 
	#ASN_INTEGER
 (0x02)

	)

71 
	#ASN_BIT_STR
 (0x03)

	)

72 
	#ASN_OCTET_STR
 (0x04)

	)

73 
	#ASN_NULL
 (0x05)

	)

74 
	#ASN_OBJECT_ID
 (0x06)

	)

75 
	#ASN_SEQUENCE
 (0x10)

	)

76 
	#ASN_SET
 (0x11)

	)

78 
	#ASN_UNIVERSAL
 (0x00)

	)

79 
	#ASN_APPLICATION
 (0x40)

	)

80 
	#ASN_CONTEXT
 (0x80)

	)

81 
	#ASN_PRIVATE
 (0xC0)

	)

83 
	#ASN_PRIMITIVE
 (0x00)

	)

84 
	#ASN_CONSTRUCTOR
 (0x20)

	)

86 
	#ASN_LONG_LEN
 (0x80)

	)

87 
	#ASN_EXTENSION_ID
 (0x1F)

	)

88 
	#ASN_BIT8
 (0x80)

	)

90 
	#IS_CONSTRUCTOR
(
byã
Ë((byãË& 
ASN_CONSTRUCTOR
)

	)

91 
	#IS_EXTENSION_ID
(
byã
Ë(((byãË& 
ASN_EXTENSION_ID
ËASN_EXTENSION_ID)

	)

115 
uöt8_t
 *

116 
lib√t_buûd_a¢1_öt
(

117 
uöt8_t
 *,

119 
uöt8_t
,

120 
öt32_t
 *,

132 
uöt8_t
 *

133 
lib√t_buûd_a¢1_uöt
(

134 
uöt8_t
 *,

136 
uöt8_t
,

137 
uöt32_t
 *,

149 
uöt8_t
 *

150 
lib√t_buûd_a¢1_°rög
(

151 
uöt8_t
 *,

153 
uöt8_t
,

154 
uöt8_t
 *,

168 
uöt8_t
 *

169 
lib√t_buûd_a¢1_hódî
(

170 
uöt8_t
 *,

172 
uöt8_t
,

177 
uöt8_t
 *

178 
lib√t_buûd_a¢1_Àngth
(

179 
uöt8_t
 *,

195 
uöt8_t
 *

196 
lib√t_buûd_a¢1_£quí˚
(

197 
uöt8_t
 *,

199 
uöt8_t
,

211 
uöt8_t
 *

212 
lib√t_buûd_a¢1_objid
(

213 
uöt8_t
 *,

215 
uöt8_t
,

216 
oid
 *,

228 
uöt8_t
 *

229 
lib√t_buûd_a¢1_nuŒ
(

230 
uöt8_t
 *,

232 
uöt8_t


243 
uöt8_t
 *

244 
lib√t_buûd_a¢1_bô°rög
(

245 
uöt8_t
 *,

247 
uöt8_t
,

248 
uöt8_t
 *,

	@/workspaces/libnet/include/libnet/libnet-functions.h

31 #i‚de‡
__LIBNET_FUNCTIONS_H


32 
	#__LIBNET_FUNCTIONS_H


	)

62 
LIBNET_API


63 
lib√t_t
 *

64 
lib√t_öô
(
öje˘i⁄_ty≥
, c⁄° *
devi˚
, *
îr_buf
);

71 
LIBNET_API


73 
lib√t_de°roy
(
lib√t_t
 *
l
);

81 
LIBNET_API


83 
lib√t_˛ór_∑ckë
(
lib√t_t
 *
l
);

91 
LIBNET_API


93 
lib√t_°©s
(
lib√t_t
 *
l
, lib√t_°©†*
ls
);

100 
LIBNET_API


102 
lib√t_gëfd
(
lib√t_t
 *
l
);

110 
LIBNET_API


112 
lib√t_gëdevi˚
(
lib√t_t
 *
l
);

122 
LIBNET_API


123 
uöt8_t
 *

124 
lib√t_gëpbuf
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

134 
LIBNET_API


135 
uöt32_t


136 
lib√t_gëpbuf_size
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

145 
LIBNET_API


147 
lib√t_gëîr‹
(
lib√t_t
 *
l
);

155 
LIBNET_API


156 
uöt32_t


157 
lib√t_gë∑ckë_size
(
lib√t_t
 *
l
);

165 
LIBNET_API


167 
lib√t_£ed_¥™d
(
lib√t_t
 *
l
);

183 
LIBNET_API


184 
uöt32_t


185 
lib√t_gë_¥™d
(
mod
);

209 
LIBNET_API


211 
lib√t_toggÀ_checksum
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
, 
mode
);

225 
LIBNET_API


227 
lib√t_addr2«me4
(
uöt32_t
 
ö
, 
uöt8_t
 
u£_«me
);

243 
LIBNET_API


244 
uöt32_t


245 
lib√t_«me2addr4
(
lib√t_t
 *
l
, c⁄° *
ho°_«me
, 
uöt8_t
 
u£_«me
);

247 c⁄° 
lib√t_ö6_addr
 
ö6addr_îr‹
;

255 
LIBNET_API


257 
lib√t_ö6_is_îr‹
(
lib√t_ö6_addr
 
addr
);

272 
LIBNET_API


273 
lib√t_ö6_addr


274 
lib√t_«me2addr6
(
lib√t_t
 *
l
, c⁄° *
ho°_«me
, 
uöt8_t
 
u£_«me
);

279 
LIBNET_API


281 
lib√t_addr2«me6_r
(
lib√t_ö6_addr
 
addr
, 
uöt8_t
 
u£_«me
,

282 *
ho°_«me
, 
ho°_«me_Àn
);

300 
LIBNET_API


302 
lib√t_∂i°_chaö_√w
(
lib√t_t
 *
l
, 
lib√t_∂i°_t
 **
∂i°
, *
tokí_li°
);

317 
LIBNET_API


319 
lib√t_∂i°_chaö_√xt_∑ú
(
lib√t_∂i°_t
 *
∂i°
, 
uöt16_t
 *
bp‹t
,

320 
uöt16_t
 *
ï‹t
);

329 
LIBNET_API


331 
lib√t_∂i°_chaö_dump
(
lib√t_∂i°_t
 *
∂i°
);

340 
LIBNET_API


342 
lib√t_∂i°_chaö_dump_°rög
(
lib√t_∂i°_t
 *
∂i°
);

350 
LIBNET_API


352 
lib√t_∂i°_chaö_‰ì
(
lib√t_∂i°_t
 *
∂i°
);

442 
LIBNET_API


443 
lib√t_±ag_t


444 
lib√t_buûd_802_1q
(c⁄° 
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, 
uöt16_t
 
çi
,

445 
uöt8_t
 
¥i‹ôy
, uöt8_à
cfi
, 
uöt16_t
 
vœn_id
, uöt16_à
Àn_¥Ÿo
,

446 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

460 
LIBNET_API


461 
lib√t_±ag_t


462 
lib√t_buûd_802_1x
(
uöt8_t
 
óp_vî
, uöt8_à
óp_ty≥
, 
uöt16_t
 
Àngth
,

463 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

477 
LIBNET_API


478 
lib√t_±ag_t


479 
lib√t_buûd_802_2
(
uöt8_t
 
dßp
, uöt8_à
sßp
, uöt8_à
c⁄åﬁ
,

480 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

496 
LIBNET_API


497 
lib√t_±ag_t


498 
lib√t_buûd_802_2¢≠
(
uöt8_t
 
dßp
, uöt8_à
sßp
, uöt8_à
c⁄åﬁ
,

499 
uöt8_t
 *
oui
, 
uöt16_t
 
ty≥
, c⁄° uöt8_t* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

500 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

518 
LIBNET_API


519 
lib√t_±ag_t


520 
lib√t_buûd_802_3
(c⁄° 
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, 
uöt16_t
 
Àn
,

521 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

539 
LIBNET_API


540 
lib√t_±ag_t


541 
lib√t_buûd_ëhî√t
(c⁄° 
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, 
uöt16_t
 
ty≥
,

542 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

556 
LIBNET_API


557 
lib√t_±ag_t


558 
lib√t_autobuûd_ëhî√t
(c⁄° 
uöt8_t
 *
d°
, 
uöt16_t
 
ty≥
, 
lib√t_t
 *
l
);

577 
LIBNET_API


578 
lib√t_±ag_t


579 
lib√t_buûd_fddi
(
uöt8_t
 
fc
, c⁄° uöt8_à*
d°
, c⁄° uöt8_à*
§c
, uöt8_à
dßp
,

580 
uöt8_t
 
sßp
, uöt8_à
cf
, c⁄° uöt8_à*
oui
, 
uöt16_t
 
ty≥
, c⁄° uöt8_t* 
∑ylﬂd
,

581 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

596 
LIBNET_API


597 
lib√t_±ag_t


598 
lib√t_autobuûd_fddi
(
uöt8_t
 
fc
, c⁄° uöt8_à*
d°
, uöt8_à
dßp
, uöt8_à
sßp
,

599 
uöt8_t
 
cf
, c⁄° uöt8_à*
oui
, 
uöt16_t
 
ty≥
, 
lib√t_t
 *
l
);

621 
LIBNET_API


622 
lib√t_±ag_t


623 
lib√t_buûd_¨p
(
uöt16_t
 
hrd
, uöt16_à
¥o
, 
uöt8_t
 
h 
, uöt8_à
∂n
,

624 
uöt16_t
 
›
, c⁄° 
uöt8_t
 *
sha
, c⁄° uöt8_à*
•a
, c⁄° uöt8_à*
tha
, c⁄° uöt8_à*
ça
,

625 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

640 
LIBNET_API


641 
lib√t_±ag_t


642 
lib√t_autobuûd_¨p
(
uöt16_t
 
›
, c⁄° 
uöt8_t
 *
sha
, c⁄° uöt8_à*
•a
, c⁄° uöt8_à*
tha
,

643 c⁄° 
uöt8_t
 *
ça
, 
lib√t_t
 *
l
);

663 
LIBNET_API


664 
lib√t_±ag_t


665 
lib√t_buûd_t˝
(
uöt16_t
 
•
, uöt16_à
dp
, 
uöt32_t
 
£q
, uöt32_à
ack
,

666 
uöt8_t
 
c⁄åﬁ
, 
uöt16_t
 
wö
, uöt16_à
sum
, uöt16_à
urg
, uöt16_à
Àn
,

667 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

685 
LIBNET_API


686 
lib√t_±ag_t


687 
lib√t_buûd_t˝_›ti⁄s
(c⁄° 
uöt8_t
 *
›ti⁄s
, 
uöt32_t
 
›ti⁄s_s
, 
lib√t_t
 *
l
,

688 
lib√t_±ag_t
 
±ag
);

703 
LIBNET_API


704 
lib√t_±ag_t


705 
lib√t_buûd_udp
(
uöt16_t
 
•
, uöt16_à
dp
, uöt16_à
Àn
, uöt16_à
sum
,

706 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

728 
LIBNET_API


729 
lib√t_±ag_t


730 
lib√t_buûd_cdp
(
uöt8_t
 
vîsi⁄
, uöt8_à
âl
, 
uöt16_t
 
sum
, uöt16_à
ty≥
,

731 
uöt16_t
 
vÆue_s
, c⁄° 
uöt8_t
 *
vÆue
, c⁄° uöt8_t* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

732 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

744 
LIBNET_API


745 
lib√t_±ag_t
 
lib√t_buûd_Œdp_chassis
(c⁄° 
uöt8_t
 
subty≥
,

746 c⁄° 
uöt8_t
 *
vÆue
, c⁄° uöt8_à
vÆue_s
,

747 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

759 
LIBNET_API


760 
lib√t_±ag_t
 
lib√t_buûd_Œdp_p‹t
(c⁄° 
uöt8_t
 
subty≥
,

761 c⁄° 
uöt8_t
 *
vÆue
, c⁄° uöt8_à
vÆue_s
,

762 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

772 
LIBNET_API


773 
lib√t_±ag_t
 
lib√t_buûd_Œdp_âl
(c⁄° 
uöt16_t
 
âl
,

774 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

785 
LIBNET_API


786 
lib√t_±ag_t
 
lib√t_buûd_Œdp_íd
(
lib√t_t
 *
l
,Üib√t_±ag_à
±ag
);

797 
LIBNET_API


798 
lib√t_±ag_t
 
lib√t_buûd_Œdp_‹g_•ec
(c⁄° 
uöt8_t
 *
vÆue
,

799 c⁄° 
uöt16_t
 
vÆue_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

807 
LIBNET_API


808 
lib√t_±ag_t
 
lib√t_buûd_Œdp
(
lib√t_t
 *
l
,Üib√t_±ag_à
±ag
);

825 
LIBNET_API


826 
lib√t_±ag_t


827 
lib√t_buûd_icmpv4_echo
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

828 
uöt16_t
 
id
, uöt16_à
£q
, c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

829 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

847 
LIBNET_API


848 
lib√t_±ag_t


849 
lib√t_buûd_icmpv4_mask
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

850 
uöt16_t
 
id
, uöt16_à
£q
, 
uöt32_t
 
mask
, c⁄° 
uöt8_t
* 
∑ylﬂd
,

851 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

867 
LIBNET_API


868 
lib√t_±ag_t


869 
lib√t_buûd_icmpv4_uƒóch
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

870 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

887 
LIBNET_API


888 
lib√t_±ag_t


889 
lib√t_buûd_icmpv4_ªdúe˘
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

890 
uöt32_t
 
g©eway
, c⁄° 
uöt8_t
* 
∑ylﬂd
, uöt32_à
∑ylﬂd_s
, 
lib√t_t
 *
l
,

891 
lib√t_±ag_t
 
±ag
);

908 
LIBNET_API


909 
lib√t_±ag_t


910 
lib√t_buûd_icmpv4_timìx˚ed
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

911 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

931 
LIBNET_API


932 
lib√t_±ag_t


933 
lib√t_buûd_icmpv4_time°amp
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

934 
uöt16_t
 
id
, uöt16_à
£q
, 
uöt32_t
 
Ÿime
, uöt32_à
πime
, uöt32_à
âime
,

935 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

952 
LIBNET_API


953 
lib√t_±ag_t
 
lib√t_buûd_icmpv6_echo
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t


954 
sum
, 
uöt16_t
 
id
, uöt16_à
£q
, 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

955 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

971 
LIBNET_API


972 
lib√t_±ag_t


973 
lib√t_buûd_icmpv6_uƒóch
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

974 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

991 
LIBNET_API


992 
lib√t_±ag_t
 
lib√t_buûd_icmpv6_ndp_nsﬁ
(
uöt8_t
 
ty≥
, uöt8_à
code
,

993 
uöt16_t
 
sum
, 
lib√t_ö6_addr
 
èrgë
, 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t


994 
∑ylﬂd_s
, 
lib√t_t
* 
l
, 
lib√t_±ag_t
 
±ag
);

1012 
LIBNET_API


1013 
lib√t_±ag_t
 
lib√t_buûd_icmpv6_ndp_«dv
(
uöt8_t
 
ty≥
, uöt8_à
code
,

1014 
uöt16_t
 
sum
, 
uöt32_t
 
Êags
, 
lib√t_ö6_addr
 
èrgë
, 
uöt8_t


1015 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
* 
l
, 
lib√t_±ag_t
 
±ag
);

1027 
LIBNET_API


1028 
lib√t_±ag_t
 
lib√t_buûd_icmpv6_ndp_›t
(
uöt8_t
 
ty≥
, uöt8_t* 
›ti⁄
,

1029 
uöt32_t
 
›ti⁄_s
, 
lib√t_t
* 
l
, 
lib√t_±ag_t
 
±ag
);

1046 
LIBNET_API


1047 
lib√t_±ag_t


1048 
lib√t_buûd_igmp
(
uöt8_t
 
ty≥
, uöt8_à
ª£rved
, 
uöt16_t
 
sum
, 
uöt32_t
 
ù
,

1049 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1071 
LIBNET_API


1072 
lib√t_±ag_t


1073 
lib√t_buûd_ùv4
(
uöt16_t
 
ù_Àn
, 
uöt8_t
 
tos
, uöt16_à
id
, uöt16_à
‰ag
,

1074 
uöt8_t
 
âl
, uöt8_à
¥Ÿ
, 
uöt16_t
 
sum
, 
uöt32_t
 
§c
, uöt32_à
d°
,

1075 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1096 
LIBNET_API


1097 
lib√t_±ag_t


1098 
lib√t_buûd_ùv4_›ti⁄s
(c⁄° 
uöt8_t
 *
›ti⁄s
, 
uöt32_t
 
›ti⁄s_s
, 
lib√t_t
 *
l
,

1099 
lib√t_±ag_t
 
±ag
);

1115 
LIBNET_API


1116 
lib√t_±ag_t


1117 
lib√t_autobuûd_ùv4
(
uöt16_t
 
Àn
, 
uöt8_t
 
¥Ÿ
, 
uöt32_t
 
d°
, 
lib√t_t
 *
l
);

1135 
LIBNET_API


1136 
lib√t_±ag_t


1137 
lib√t_buûd_ùv6
(
uöt8_t
 
tc
, 
uöt32_t
 
Ê
, 
uöt16_t
 
Àn
, uöt8_à
nh
,

1138 
uöt8_t
 
hl
, 
lib√t_ö6_addr
 
§c
, lib√t_ö6_add∏
d°
,

1139 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1154 
LIBNET_API


1155 
lib√t_±ag_t


1156 
lib√t_buûd_ùv6_‰ag
(
uöt8_t
 
nh
, uöt8_à
ª£rved
, 
uöt16_t
 
‰ag
,

1157 
uöt32_t
 
id
, c⁄° 
uöt8_t
* 
∑ylﬂd
, uöt32_à
∑ylﬂd_s
, 
lib√t_t
 *
l
,

1158 
lib√t_±ag_t
 
±ag
);

1178 
LIBNET_API


1179 
lib√t_±ag_t


1180 
lib√t_buûd_ùv6_routög
(
uöt8_t
 
nh
, uöt8_à
Àn
, uöt8_à
πy≥
,

1181 
uöt8_t
 
£gmíts
, c⁄° uöt8_t* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
,

1182 
lib√t_±ag_t
 
±ag
);

1198 
LIBNET_API


1199 
lib√t_±ag_t


1200 
lib√t_buûd_ùv6_de°›ts
(
uöt8_t
 
nh
, uöt8_à
Àn
, c⁄° uöt8_t* 
∑ylﬂd
,

1201 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1218 
LIBNET_API


1219 
lib√t_±ag_t


1220 
lib√t_buûd_ùv6_hbh›ts
(
uöt8_t
 
nh
, uöt8_à
Àn
, c⁄° uöt8_t* 
∑ylﬂd
,

1221 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1240 
LIBNET_API


1241 
lib√t_±ag_t


1242 
lib√t_autobuûd_ùv6
(
uöt16_t
 
Àn
, 
uöt8_t
 
nh
, 
lib√t_ö6_addr
 
d°
,

1243 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1263 
LIBNET_API


1264 
lib√t_±ag_t


1265 
lib√t_buûd_i¶
(
uöt8_t
 *
dho°
, uöt8_à
ty≥
, uöt8_à
u£r
,

1266 
uöt8_t
 *
sho°
, 
uöt16_t
 
Àn
, c⁄° uöt8_à*
¢≠
, uöt16_à
vid
,

1267 
uöt16_t
 
p‹tödex
, uöt16_à
ª£rved
, c⁄° 
uöt8_t
* 
∑ylﬂd
,

1268 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1282 
LIBNET_API


1283 
lib√t_±ag_t


1284 
lib√t_buûd_ù£c_e•_hdr
(
uöt32_t
 
•i
, uöt32_à
£q
, uöt32_à
iv
,

1285 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1299 
LIBNET_API


1300 
lib√t_±ag_t


1301 
lib√t_buûd_ù£c_e•_·r
(
uöt8_t
 
Àn
, uöt8_à
nh
, 
öt8_t
 *
auth
,

1302 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1319 
LIBNET_API


1320 
lib√t_±ag_t


1321 
lib√t_buûd_ù£c_ah
(
uöt8_t
 
nh
, uöt8_à
Àn
, 
uöt16_t
 
ªs
,

1322 
uöt32_t
 
•i
, uöt32_à
£q
, uöt32_à
auth
, c⁄° 
uöt8_t
* 
∑ylﬂd
,

1323 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1342 
LIBNET_API


1343 
lib√t_±ag_t


1344 
lib√t_buûd_dnsv4
(
uöt16_t
 
h_Àn
, uöt16_à
id
, uöt16_à
Êags
,

1345 
uöt16_t
 
num_q
, uöt16_à
num_™ws_º
, uöt16_à
num_auth_º
,

1346 
uöt16_t
 
num_addi_º
, c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
,

1347 
lib√t_±ag_t
 
±ag
);

1367 
LIBNET_API


1368 
lib√t_±ag_t


1369 
lib√t_buûd_rù
(
uöt8_t
 
cmd
, uöt8_à
vîsi⁄
, 
uöt16_t
 
rd
, uöt16_à
af
,

1370 
uöt16_t
 
π
, 
uöt32_t
 
addr
, uöt32_à
mask
, uöt32_à
√xt_h›
,

1371 
uöt32_t
 
mëric
, c⁄° 
uöt8_t
* 
∑ylﬂd
, uöt32_à
∑ylﬂd_s
, 
lib√t_t
 *
l
,

1372 
lib√t_±ag_t
 
±ag
);

1397 
LIBNET_API


1398 
lib√t_±ag_t


1399 
lib√t_buûd_Ωc_ˇŒ
(
uöt32_t
 
rm
, uöt32_à
xid
, uöt32_à
¥og_num
,

1400 
uöt32_t
 
¥og_vîs
, uöt32_à
¥o˚duª
, uöt32_à
cÊav‹
, uöt32_à
˛ígth
,

1401 
uöt8_t
 *
cd©a
, 
uöt32_t
 
vÊav‹
, uöt32_à
vÀngth
, c⁄° uöt8_à*
vd©a
,

1402 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1427 
LIBNET_API


1428 
lib√t_±ag_t


1429 
lib√t_buûd_°p_c⁄f
(
uöt16_t
 
id
, 
uöt8_t
 
vîsi⁄
, uöt8_à
bpdu_ty≥
,

1430 
uöt8_t
 
Êags
, c⁄° uöt8_à*
roŸ_id
, 
uöt32_t
 
roŸ_pc
, c⁄° uöt8_à*
bridge_id
,

1431 
uöt16_t
 
p‹t_id
, uöt16_à
mesßge_age
, uöt16_à
max_age
,

1432 
uöt16_t
 
hñlo_time
, uöt16_à
f_dñay
, c⁄° 
uöt8_t
* 
∑ylﬂd
,

1433 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1449 
LIBNET_API


1450 
lib√t_±ag_t


1451 
lib√t_buûd_°p_t˙
(
uöt16_t
 
id
, 
uöt8_t
 
vîsi⁄
, uöt8_à
bpdu_ty≥
,

1452 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1472 
LIBNET_API


1473 
lib√t_±ag_t


1474 
lib√t_buûd_tokí_rög
(
uöt8_t
 
ac
, uöt8_à
fc
, c⁄° uöt8_à*
d°
, c⁄° uöt8_à*
§c
,

1475 
uöt8_t
 
dßp
, uöt8_à
sßp
, uöt8_à
cf
, c⁄° uöt8_à*
oui
, 
uöt16_t
 
ty≥
,

1476 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1492 
LIBNET_API


1493 
lib√t_±ag_t


1494 
lib√t_autobuûd_tokí_rög
(
uöt8_t
 
ac
, uöt8_à
fc
, c⁄° uöt8_à*
d°
,

1495 
uöt8_t
 
dßp
, uöt8_à
sßp
, uöt8_à
cf
, c⁄° uöt8_à*
oui
, 
uöt16_t
 
ty≥
,

1496 
lib√t_t
 *
l
);

1518 
LIBNET_API


1519 
lib√t_±ag_t


1520 
lib√t_buûd_vºp
(
uöt8_t
 
vîsi⁄
, uöt8_à
ty≥
, uöt8_à
vrouãr_id
,

1521 
uöt8_t
 
¥i‹ôy
, uöt8_à
ù_cou¡
, uöt8_à
auth_ty≥
, uöt8_à
advît_öt
,

1522 
uöt16_t
 
sum
, c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
,

1523 
lib√t_±ag_t
 
±ag
);

1538 
LIBNET_API


1539 
lib√t_±ag_t


1540 
lib√t_buûd_m∂s
(
uöt32_t
 
œbñ
, 
uöt8_t
 
ex≥rimíèl
, uöt8_à
bos
,

1541 
uöt8_t
 
âl
, c⁄° uöt8_t* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
,

1542 
lib√t_±ag_t
 
±ag
);

1572 
LIBNET_API


1573 
lib√t_±ag_t


1574 
lib√t_buûd_¡p
(
uöt8_t
 
À≠_ödiˇt‹
, uöt8_à
vîsi⁄
, uöt8_à
mode
,

1575 
uöt8_t
 
°øtum
, uöt8_à
pﬁl
, uöt8_à
¥ecisi⁄
, 
uöt16_t
 
dñay_öt
,

1576 
uöt16_t
 
dñay_‰ac
, uöt16_à
di•îsi⁄_öt
, uöt16_à
di•îsi⁄_‰ac
,

1577 
uöt32_t
 
ª„ªn˚_id
, uöt32_à
ªf_ts_öt
, uöt32_à
ªf_ts_‰ac
,

1578 
uöt32_t
 
‹ig_ts_öt
, uöt32_à
‹ig_ts_‰ac
, uöt32_à
ªc_ts_öt
,

1579 
uöt32_t
 
ªc_ts_‰ac
, uöt32_à
xmt_ts_öt
, uöt32_à
xmt_ts_‰ac
,

1580 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1596 
LIBNET_API


1597 
lib√t_±ag_t


1598 
lib√t_buûd_o•fv2
(
uöt16_t
 
Àn
, 
uöt8_t
 
ty≥
, 
uöt32_t
 
πr_id
,

1599 
uöt32_t
 
¨ó_id
, 
uöt16_t
 
sum
, uöt16_à
auty≥
, c⁄° 
uöt8_t
* 
∑ylﬂd
,

1600 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1617 
LIBNET_API


1618 
lib√t_±ag_t


1619 
lib√t_buûd_o•fv2_hñlo
(
uöt32_t
 
√tmask
, 
uöt16_t
 
öãrvÆ
, 
uöt8_t
 
›ts
,

1620 
uöt8_t
 
¥i‹ôy
, 
uöt32_t
 
dód_öt
, uöt32_à
des_πr
, uöt32_à
bkup_πr
,

1621 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1639 
lib√t_±ag_t


1640 
lib√t_buûd_o•fv2_hñlo_√ighb‹
(
uöt32_t
 
√tmask
, 
uöt16_t
 
öãrvÆ
, 
uöt8_t
 
›ts
,

1641 
uöt8_t
 
¥i‹ôy
, 
uöt32_t
 
dód_öt
, uöt32_à
des_πr
, uöt32_à
bkup_πr
, uöt32_à
√ighb‹
,

1642 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1656 
LIBNET_API


1657 
lib√t_±ag_t


1658 
lib√t_buûd_o•fv2_dbd
(
uöt16_t
 
dgøm_Àn
, 
uöt8_t
 
›ts
, uöt8_à
ty≥
,

1659 
uöt32_t
 
£qnum
, c⁄° 
uöt8_t
* 
∑ylﬂd
, uöt32_à
∑ylﬂd_s
, 
lib√t_t
 *
l
,

1660 
lib√t_±ag_t
 
±ag
);

1673 
LIBNET_API


1674 
lib√t_±ag_t


1675 
lib√t_buûd_o•fv2_l§
(
uöt32_t
 
ty≥
, uöt32_à
lsid
, uöt32_à
advπr
,

1676 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1687 
LIBNET_API


1688 
lib√t_±ag_t


1689 
lib√t_buûd_o•fv2_lsu
(
uöt32_t
 
num
, c⁄° 
uöt8_t
* 
∑ylﬂd
, uöt32_à
∑ylﬂd_s
,

1690 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1708 
LIBNET_API


1709 
lib√t_±ag_t


1710 
lib√t_buûd_o•fv2_lß
(
uöt16_t
 
age
, 
uöt8_t
 
›ts
, uöt8_à
ty≥
,

1711 
uöt32_t
 
lsid
, uöt32_à
advπr
, uöt32_à
£qnum
, 
uöt16_t
 
sum
, uöt16_à
Àn
,

1712 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1729 
LIBNET_API


1730 
lib√t_±ag_t


1731 
lib√t_buûd_o•fv2_lß_πr
(
uöt16_t
 
Êags
, uöt16_à
num
, 
uöt32_t
 
id
,

1732 
uöt32_t
 
d©a
, 
uöt8_t
 
ty≥
, uöt8_à
tos
, 
uöt16_t
 
mëric
, c⁄° uöt8_t* 
∑ylﬂd
,

1733 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1745 
LIBNET_API


1746 
lib√t_±ag_t


1747 
lib√t_buûd_o•fv2_lß_√t
(
uöt32_t
 
nmask
, uöt32_à
πrid
, c⁄° 
uöt8_t
* 
∑ylﬂd
,

1748 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1761 
LIBNET_API


1762 
lib√t_±ag_t


1763 
lib√t_buûd_o•fv2_lß_sum
(
uöt32_t
 
nmask
, uöt32_à
mëric
, uöt32_à
tos
,

1764 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1778 
LIBNET_API


1779 
lib√t_±ag_t


1780 
lib√t_buûd_o•fv2_lß_as
(
uöt32_t
 
nmask
, uöt32_à
mëric
, uöt32_à
fwdaddr
,

1781 
uöt32_t
 
èg
, c⁄° 
uöt8_t
* 
∑ylﬂd
, uöt32_à
∑ylﬂd_s
, 
lib√t_t
 *
l
,

1782 
lib√t_±ag_t
 
±ag
);

1796 
LIBNET_API


1797 
lib√t_±ag_t


1798 
lib√t_buûd_d©a
(c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
,

1799 
lib√t_±ag_t
 
±ag
);

1823 
LIBNET_API


1824 
lib√t_±ag_t


1825 
lib√t_buûd_dh˝v4
(
uöt8_t
 
›code
, uöt8_à
hty≥
, uöt8_à
hÀn
,

1826 
uöt8_t
 
h›cou¡
, 
uöt32_t
 
xid
, 
uöt16_t
 
£cs
, uöt16_à
Êags
,

1827 
uöt32_t
 
cù
, uöt32_à
yù
, uöt32_à
sù
, uöt32_à
gù
, c⁄° 
uöt8_t
 *
chaddr
,

1828 c⁄° *
¢ame
, c⁄° *
fûe
, c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

1829 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1853 
LIBNET_API


1854 
lib√t_±ag_t


1855 
lib√t_buûd_boŸpv4
(
uöt8_t
 
›code
, uöt8_à
hty≥
, uöt8_à
hÀn
,

1856 
uöt8_t
 
h›cou¡
, 
uöt32_t
 
xid
, 
uöt16_t
 
£cs
, uöt16_à
Êags
,

1857 
uöt32_t
 
cù
, uöt32_à
yù
, uöt32_à
sù
, uöt32_à
gù
, c⁄° 
uöt8_t
 *
chaddr
,

1858 c⁄° *
¢ame
, c⁄° *
fûe
, c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

1859 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1866 
LIBNET_API


1867 
uöt32_t


1868 
lib√t_gëgª_Àngth
(
uöt16_t
 
fv
);

1893 
LIBNET_API


1894 
lib√t_±ag_t


1895 
lib√t_buûd_gª
(
uöt16_t
 
fv
, uöt16_à
ty≥
, uöt16_à
sum
,

1896 
uöt16_t
 
off£t
, 
uöt32_t
 
key
, uöt32_à
£q
, uöt16_à
Àn
,

1897 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1921 
LIBNET_API


1922 
lib√t_±ag_t


1923 
lib√t_buûd_egª
(
uöt16_t
 
fv
, uöt16_à
ty≥
, uöt16_à
sum
,

1924 
uöt16_t
 
off£t
, 
uöt32_t
 
key
, uöt32_à
£q
, uöt16_à
Àn
,

1925 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1939 
LIBNET_API


1940 
lib√t_±ag_t


1941 
lib√t_buûd_gª_§e
(
uöt16_t
 
af
, 
uöt8_t
 
off£t
, uöt8_à
Àngth
,

1942 
uöt8_t
 *
routög
, c⁄° uöt8_t* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
,

1943 
lib√t_±ag_t
 
±ag
);

1951 
LIBNET_API


1952 
lib√t_±ag_t


1953 
lib√t_buûd_gª_œ°_§e
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

1977 
LIBNET_API


1978 
lib√t_±ag_t


1979 
lib√t_buûd_bgp4_hódî
(
uöt8_t
 
m¨kî
[
LIBNET_BGP4_MARKER_SIZE
],

1980 
uöt16_t
 
Àn
, 
uöt8_t
 
ty≥
, c⁄° uöt8_t* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

1981 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

2000 
LIBNET_API


2001 
lib√t_±ag_t


2002 
lib√t_buûd_bgp4_›í
(
uöt8_t
 
vîsi⁄
, 
uöt16_t
 
§c_as
, uöt16_à
hﬁd_time
,

2003 
uöt32_t
 
bgp_id
, 
uöt8_t
 
›t_Àn
, c⁄° uöt8_t* 
∑ylﬂd
, uöt32_à
∑ylﬂd_s
,

2004 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

2022 
LIBNET_API


2023 
lib√t_±ag_t


2024 
lib√t_buûd_bgp4_upd©e
(
uöt16_t
 
un„asibÀ_π_Àn
, c⁄° 
uöt8_t
 *
wôhdøwn_π
,

2025 
uöt16_t
 
tŸÆ_∑th_©å_Àn
, c⁄° 
uöt8_t
 *
∑th_©åibuãs
, uöt16_à
öfo_Àn
,

2026 
uöt8_t
 *
ªachabûôy_öfo
, c⁄° uöt8_t* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

2027 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

2042 
LIBNET_API


2043 
lib√t_±ag_t


2044 
lib√t_buûd_bgp4_nŸifiˇti⁄
(
uöt8_t
 
îr_code
, uöt8_à
îr_subcode
,

2045 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

2069 
LIBNET_API


2070 
lib√t_±ag_t


2071 
lib√t_buûd_£bek
(
uöt32_t
 
magic
, 
uöt16_t
 
vîsi⁄
, uöt16_à
ty≥
,

2072 
uöt32_t
 
cou¡î
, uöt32_à
time_£c
, uöt32_à
time_u£c
, uöt32_à
pid
,

2073 
uöt32_t
 
uid
, uöt32_à
fd
, 
uöt8_t
 
cmd
[
SEBEK_CMD_LENGTH
], uöt32_à
Àngth
,

2074 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

2096 
LIBNET_API


2097 
lib√t_±ag_t


2098 
lib√t_buûd_h§p
(
uöt8_t
 
vîsi⁄
, uöt8_à
›code
, uöt8_à
°©e
,

2099 
uöt8_t
 
hñlo_time
, uöt8_à
hﬁd_time
, uöt8_à
¥i‹ôy
, uöt8_à
group
,

2100 
uöt8_t
 
ª£rved
, uöt8_à
authd©a
[
HSRP_AUTHDATA_LENGTH
], 
uöt32_t
 
vútuÆ_ù
,

2101 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

2118 
LIBNET_API


2119 
lib√t_±ag_t


2120 
lib√t_buûd_lök
(c⁄° 
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, c⁄° uöt8_à*
oui
, 
uöt16_t
 
ty≥
,

2121 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

2134 
LIBNET_API


2135 
lib√t_±ag_t


2136 
lib√t_autobuûd_lök
(c⁄° 
uöt8_t
 *
d°
, c⁄° uöt8_à*
oui
, 
uöt16_t
 
ty≥
,

2137 
lib√t_t
 *
l
);

2152 
LIBNET_API


2154 
lib√t_wrôe
(
lib√t_t
 *
l
);

2165 
LIBNET_API


2166 
uöt32_t


2167 
lib√t_gë_ùaddr4
(
lib√t_t
 *
l
);

2178 
LIBNET_API


2179 
lib√t_ö6_addr


2180 
lib√t_gë_ùaddr6
(
lib√t_t
 *
l
);

2190 
LIBNET_API


2191 
lib√t_ëhî_addr
 *

2192 
lib√t_gë_hwaddr
(
lib√t_t
 *
l
);

2203 
LIBNET_API


2204 
uöt8_t
 *

2205 
lib√t_hex_©⁄
(c⁄° *
s
, *
Àn
);

2211 
LIBNET_API


2213 
lib√t_vîsi⁄
();

2231 
LIBNET_API


2233 
lib√t_adv_cuŒ_∑ckë
(
lib√t_t
 *
l
, 
uöt8_t
 **
∑ckë
, 
uöt32_t
 *
∑ckë_s
);

2248 
LIBNET_API


2250 
lib√t_adv_cuŒ_hódî
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
, 
uöt8_t
 **
hódî
,

2251 
uöt32_t
 *
hódî_s
);

2267 
LIBNET_API


2269 
lib√t_adv_wrôe_lök
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
∑ckë_s
);

2285 
LIBNET_API


2287 
lib√t_adv_wrôe_øw_ùv4
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
∑ckë_s
);

2295 
LIBNET_API


2297 
lib√t_adv_‰ì_∑ckë
(
lib√t_t
 *
l
, 
uöt8_t
 *
∑ckë
);

2314 
lib√t_cq_add
(
lib√t_t
 *
l
, *
œbñ
);

2331 
LIBNET_API


2332 
lib√t_t
 *

2333 
lib√t_cq_ªmove
(
lib√t_t
 *
l
);

2347 
LIBNET_API


2348 
lib√t_t
 *

2349 
lib√t_cq_ªmove_by_œbñ
(*
œbñ
);

2357 
LIBNET_API


2359 
lib√t_cq_gëœbñ
(
lib√t_t
 *
l
);

2368 
LIBNET_API


2369 
lib√t_t
 *

2370 
lib√t_cq_föd_by_œbñ
(*
œbñ
);

2377 
LIBNET_API


2379 
lib√t_cq_de°roy
();

2400 
LIBNET_API


2401 
lib√t_t
 *

2402 
lib√t_cq_hód
();

2410 
LIBNET_API


2412 
lib√t_cq_œ°
();

2419 
LIBNET_API


2420 
lib√t_t
 *

2421 
lib√t_cq_√xt
();

2428 
LIBNET_API


2429 
uöt32_t


2430 
lib√t_cq_size
();

2435 
LIBNET_API


2436 
uöt32_t


2437 
lib√t_cq_íd_lo›
();

2444 
LIBNET_API


2446 
lib√t_düg_dump_c⁄ãxt
(
lib√t_t
 *
l
);

2453 
LIBNET_API


2455 
lib√t_düg_dump_pblock
(
lib√t_t
 *
l
);

2464 
LIBNET_API


2466 
lib√t_düg_dump_pblock_ty≥
(
uöt8_t
 
ty≥
);

2482 
lib√t_düg_dump_hex
(c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
Àn
, 
sw≠
, 
FILE
 *
°ªam
);

2487 
LIBNET_API


2489 
lib√t_wrôe_øw_ùv4
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
size
);

2494 
LIBNET_API


2496 
lib√t_wrôe_øw_ùv6
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
size
);

2501 
LIBNET_API


2503 
lib√t_wrôe_lök
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
size
);

2509 
lib√t_›í_øw4
(
lib√t_t
 *
l
);

2514 
LIBNET_API


2516 
lib√t_˛o£_øw4
(
lib√t_t
 *
l
);

2522 
lib√t_›í_øw6
(
lib√t_t
 *
l
);

2528 
lib√t_˛o£_øw6
(
lib√t_t
 *
l
);

2534 
lib√t_£À˘_devi˚
(
lib√t_t
 *
l
);

2540 
lib√t_›í_lök
(
lib√t_t
 *
l
);

2546 
lib√t_˛o£_lök
(
lib√t_t
 *
l
);

2555 
lib√t_do_checksum
(
lib√t_t
 *
l
, 
uöt8_t
 *
ùhdr
, 
¥Ÿocﬁ
, 
h_Àn
);

2574 
LIBNET_API


2576 
lib√t_öë_checksum
(
lib√t_t
 *
l
, 
uöt8_t
 *
ùhdr
, 
¥Ÿocﬁ
, 
h_Àn
, c⁄° uöt8_à*
beg
, c⁄° uöt8_à* 
íd
);

2581 
LIBNET_API


2582 
uöt32_t


2583 
lib√t_compuã_¸c
(
uöt8_t
 *
buf
, 
uöt32_t
 
Àn
);

2588 
LIBNET_API


2589 
uöt16_t


2590 
lib√t_ù_check
(
uöt16_t
 *
addr
, 
Àn
);

2595 
LIBNET_API


2597 
lib√t_ö_cksum
(
uöt16_t
 *
addr
, 
Àn
);

2606 
LIBNET_API


2607 
lib√t_pblock_t
 *

2608 
lib√t_pblock_¥obe
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
, 
uöt32_t
 
b_Àn
,

2609 
uöt8_t
 
ty≥
);

2616 
LIBNET_API


2617 
lib√t_pblock_t
 *

2618 
lib√t_pblock_√w
(
lib√t_t
 *
l
, 
uöt32_t
 
b_Àn
);

2624 
LIBNET_API


2626 
lib√t_pblock_sw≠
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag1
,Üib√t_±ag_à
±ag2
);

2632 
LIBNET_API


2634 
lib√t_pblock_ö£π_bef‹e
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag1
,

2635 
lib√t_±ag_t
 
±ag2
);

2641 
LIBNET_API


2643 
lib√t_pblock_dñëe
(
lib√t_t
 *
l
, 
lib√t_pblock_t
 *
p
);

2651 
LIBNET_API


2652 
lib√t_±ag_t


2653 
lib√t_pblock_upd©e
(
lib√t_t
 *
l
, 
lib√t_pblock_t
 *
p
, 
uöt32_t
 
h
, 
uöt8_t
 
ty≥
);

2660 
LIBNET_API


2661 
lib√t_pblock_t
 *

2662 
lib√t_pblock_föd
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
);

2668 
LIBNET_API


2670 
lib√t_pblock_≠≥nd
(
lib√t_t
 *
l
, 
lib√t_pblock_t
 *
p
, c⁄° *
buf
, 
uöt32_t
 
Àn
);

2676 
LIBNET_API


2678 
lib√t_pblock_£tÊags
(
lib√t_pblock_t
 *
p
, 
uöt8_t
 
Êags
);

2685 
LIBNET_API


2687 
lib√t_pblock_p2p
(
uöt8_t
 
ty≥
);

2694 
LIBNET_API


2696 
lib√t_pblock_cﬂÀs˚
(
lib√t_t
 *
l
, 
uöt8_t
 **
∑ckë
, 
uöt32_t
 *
size
);

2698 #i‡!(
__WIN32__
)

2705 
lib√t_check_iÁ˚
(
lib√t_t
 *
l
);

2708 #i‡
deföed
(
__WIN32__
)

2712 
BYTE
 *

2713 
lib√t_wö32_gë_ªmŸe_mac
(
lib√t_t
 *
l
, 
DWORD
 
IP
);

2719 
lib√t_˛o£_lök_öãrÁ˚
(
lib√t_t
 *
l
);

2724 
BYTE
 *

2725 
lib√t_wö32_ªad_¨p_èbÀ
(
DWORD
 
IP
);

	@/workspaces/libnet/include/libnet/libnet-headers.h

31 #i‚de‡
__LIBNET_HEADERS_H


32 
	#__LIBNET_HEADERS_H


	)

41 
	#LIBNET_802_1Q_H
 0x12

	)

42 
	#LIBNET_802_1X_H
 0x04

	)

43 
	#LIBNET_802_2_H
 0x03

	)

44 
	#LIBNET_802_2SNAP_H
 0x08

	)

45 
	#LIBNET_802_3_H
 0x0ê

	)

46 
	#LIBNET_ARP_H
 0x08

	)

47 
	#LIBNET_ARP_ETH_IP_H
 0x1¯

	)

48 
	#LIBNET_BGP4_HEADER_H
 0x13

	)

49 
	#LIBNET_BGP4_OPEN_H
 0x0®

	)

50 
	#LIBNET_BGP4_UPDATE_H
 0x04

	)

51 
	#LIBNET_BGP4_NOTIFICATION_H
 0x02

	)

52 
	#LIBNET_CDP_H
 0x08

	)

53 
	#LIBNET_LLDP_H
 0x02

	)

54 
	#LIBNET_DHCPV4_H
 0xf0

	)

55 
	#LIBNET_UDP_DNSV4_H
 0x0¯

	)

56 
	#LIBNET_TCP_DNSV4_H
 0x0ê

	)

57 
	#LIBNET_ETH_H
 0x0ê

	)

58 
	#LIBNET_FDDI_H
 0x15

	)

59 
	#LIBNET_ICMPV4_H
 0x04

	)

60 
	#LIBNET_ICMPV4_ECHO_H
 0x08

	)

61 
	#LIBNET_ICMPV4_MASK_H
 0x0¯

	)

62 
	#LIBNET_ICMPV4_UNREACH_H
 0x08

	)

63 
	#LIBNET_ICMPV4_TIMXCEED_H
 0x08

	)

64 
	#LIBNET_ICMPV4_REDIRECT_H
 0x08

	)

65 
	#LIBNET_ICMPV4_TS_H
 0x14

	)

66 
	#LIBNET_ICMPV6_COMMON_H
 0x04

	)

67 
	#LIBNET_ICMPV6_H
 0x08

	)

68 
	#LIBNET_ICMPV6_UNREACH_H
 0x08

	)

69 
	#LIBNET_ICMPV6_ECHO_H
 0x08

	)

70 
	#LIBNET_ICMPV6_NDP_NSOL_H
 24

	)

71 
	#LIBNET_ICMPV6_NDP_NADV_H
 24

	)

72 
	#LIBNET_ICMPV6_NDP_OPT_H
 0x02

	)

73 
	#LIBNET_IGMP_H
 0x08

	)

74 
	#LIBNET_IPV4_H
 0x14

	)

75 
	#LIBNET_IPV6_H
 0x28

	)

76 
	#LIBNET_IPV6_FRAG_H
 0x08

	)

77 
	#LIBNET_IPV6_ROUTING_H
 0x04

	)

78 
	#LIBNET_IPV6_DESTOPTS_H
 0x02

	)

79 
	#LIBNET_IPV6_HBHOPTS_H
 0x02

	)

80 
	#LIBNET_IPSEC_ESP_HDR_H
 0x0¯

	)

81 
	#LIBNET_IPSEC_ESP_FTR_H
 0x02

	)

82 
	#LIBNET_IPSEC_AH_H
 0x10

	)

83 
	#LIBNET_ISL_H
 0x1®

	)

84 
	#LIBNET_GRE_H
 0x04

	)

85 
	#LIBNET_GRE_SRE_H
 0x04

	)

86 
	#LIBNET_MPLS_H
 0x04

	)

87 
	#LIBNET_OSPF_H
 0x10

	)

88 
	#LIBNET_OSPF_HELLO_H
 0x18

	)

89 
	#LIBNET_OSPF_DBD_H
 0x08

	)

90 
	#LIBNET_OSPF_LSR_H
 0x0¯

	)

91 
	#LIBNET_OSPF_LSU_H
 0x04

	)

92 
	#LIBNET_OSPF_LSA_H
 0x14

	)

93 
	#LIBNET_OSPF_AUTH_H
 0x08

	)

94 
	#LIBNET_OSPF_CKSUM
 0x10

	)

95 
	#LIBNET_OSPF_LS_RTR_H
 0x10

	)

96 
	#LIBNET_OSPF_LS_NET_H
 0x08

	)

97 
	#LIBNET_OSPF_LS_SUM_H
 0x0¯

	)

98 
	#LIBNET_OSPF_LS_AS_EXT_H
 0x10

	)

99 
	#LIBNET_NTP_H
 0x30

	)

100 
	#LIBNET_RIP_H
 0x18

	)

101 
	#LIBNET_RPC_CALL_H
 0x28

	)

104 
	#LIBNET_RPC_CALL_TCP_H
 0x2¯

	)

107 
	#LIBNET_SEBEK_H
 0x30

	)

108 
	#LIBNET_STP_CONF_H
 0x23

	)

109 
	#LIBNET_STP_TCN_H
 0x04

	)

110 
	#LIBNET_TOKEN_RING_H
 0x16

	)

111 
	#LIBNET_TCP_H
 0x14

	)

112 
	#LIBNET_UDP_H
 0x08

	)

113 
	#LIBNET_VRRP_H
 0x08

	)

114 
	#LIBNET_HSRP_H
 0x14

	)

120 
	slib√t_802_1q_hdr


122 
uöt8_t
 
	mvœn_dho°
[
ETHER_ADDR_LEN
];

123 
uöt8_t
 
	mvœn_sho°
[
ETHER_ADDR_LEN
];

124 
uöt16_t
 
	mvœn_çi
;

125 
uöt16_t
 
	mvœn_¥i‹ôy_c_vid
;

126 
	#LIBNET_802_1Q_PRIMASK
 0x0007

	)

127 
	#LIBNET_802_1Q_CFIMASK
 0x0001

	)

128 
	#LIBNET_802_1Q_VIDMASK
 0x0ff‡

	)

129 
uöt16_t
 
	mvœn_Àn
;

136 
	slib√t_802_1x_hdr


138 
uöt8_t
 
	mdŸ1x_vîsi⁄
;

139 
uöt8_t
 
	mdŸ1x_ty≥
;

140 
	#LIBNET_802_1X_PACKET
 0x00

	)

141 
	#LIBNET_802_1X_START
 0x01

	)

142 
	#LIBNET_802_1X_LOGOFF
 0x02

	)

143 
	#LIBNET_802_1X_KEY
 0x03

	)

144 
	#LIBNET_802_1X_ENCASFAL
 0x04

	)

145 
uöt16_t
 
	mdŸ1x_Àngth
;

153 
	slib√t_802_2_hdr


155 
uöt8_t
 
	mŒc_dßp
;

156 
uöt8_t
 
	mŒc_sßp
;

157 
	#LIBNET_SAP_STP
 0x42

	)

158 
	#LIBNET_SAP_SNAP
 0xØ

	)

159 
uöt8_t
 
	mŒc_c⁄åﬁ
;

168 
	slib√t_802_2¢≠_hdr


170 
uöt8_t
 
	m¢≠_dßp
;

171 
uöt8_t
 
	m¢≠_sßp
;

172 
uöt8_t
 
	m¢≠_c⁄åﬁ
;

173 
uöt8_t
 
	m¢≠_oui
[3];

174 
uöt16_t
 
	m¢≠_ty≥
;

183 
	slib√t_802_3_hdr


185 
uöt8_t
 
	m_802_3_dho°
[
ETHER_ADDR_LEN
];

186 
uöt8_t
 
	m_802_3_sho°
[
ETHER_ADDR_LEN
];

187 
uöt16_t
 
	m_802_3_Àn
;

196 
	slib√t_¨p_hdr


198 
uöt16_t
 
	m¨_hrd
;

199 
	#ARPHRD_NETROM
 0

	)

200 
	#ARPHRD_ETHER
 1

	)

201 
	#ARPHRD_EETHER
 2

	)

202 
	#ARPHRD_AX25
 3

	)

203 
	#ARPHRD_PRONET
 4

	)

204 
	#ARPHRD_CHAOS
 5

	)

205 
	#ARPHRD_IEEE802
 6

	)

206 
	#ARPHRD_ARCNET
 7

	)

207 
	#ARPHRD_APPLETLK
 8

	)

208 
	#ARPHRD_LANSTAR
 9

	)

209 
	#ARPHRD_DLCI
 15

	)

210 
	#ARPHRD_ATM
 19

	)

211 
	#ARPHRD_METRICOM
 23

	)

212 
	#ARPHRD_IPSEC
 31

	)

213 
uöt16_t
 
	m¨_¥o
;

214 
uöt8_t
 
	m¨_h 
;

215 
uöt8_t
 
	m¨_∂n
;

216 
uöt16_t
 
	m¨_›
;

217 
	#ARPOP_REQUEST
 1

	)

218 
	#ARPOP_REPLY
 2

	)

219 
	#ARPOP_REVREQUEST
 3

	)

220 
	#ARPOP_REVREPLY
 4

	)

221 
	#ARPOP_INVREQUEST
 8

	)

222 
	#ARPOP_INVREPLY
 9

	)

231 
	slib√t_bgp4_hódî_hdr


233 
	#LIBNET_BGP4_MARKER_SIZE
 16

	)

234 
uöt8_t
 
	mm¨kî
[
LIBNET_BGP4_MARKER_SIZE
];

235 
uöt16_t
 
	mÀn
;

236 
uöt8_t
 
	mty≥
;

237 
	#LIBNET_BGP4_OPEN
 1

	)

238 
	#LIBNET_BGP4_UPDATE
 2

	)

239 
	#LIBNET_BGP4_NOTIFICATION
 3

	)

240 
	#LIBNET_BGP4_KEEPALIVE
 4

	)

248 
	slib√t_bgp4_›í_hdr


250 
uöt8_t
 
	mvîsi⁄
;

251 
uöt16_t
 
	m§c_as
;

252 
uöt16_t
 
	mhﬁd_time
;

253 
uöt32_t
 
	mbgp_id
;

254 
uöt8_t
 
	m›t_Àn
;

265 
	slib√t_bgp4_nŸifiˇti⁄_hdr


267 
	#LIBNET_BGP4_MESSAGE_HEADER_ERROR
 1

	)

268 
	#LIBNET_BGP4_OPEN_MESSAGE_ERROR
 2

	)

269 
	#LIBNET_BGP4_UPDATE_MESSAGE_ERROR
 3

	)

270 
	#LIBNET_BGP4_HOLD_TIMER_EXPIRED
 4

	)

271 
	#LIBNET_BGP4_FINITE_STATE__ERROR
 5

	)

272 
	#LIBNET_BGP4_CEASE
 6

	)

273 
uöt8_t
 
	mîr_code
;

276 
	#LIBNET_BGP4_CONNECTION_NOT_SYNCHRONIZED
 1

	)

277 
	#LIBNET_BGP4_BAD_MESSAGE_LENGTH
 2

	)

278 
	#LIBNET_BGP4_BAD_MESSAGE_TYPE
 3

	)

280 
	#LIBNET_BGP4_UNSUPPORTED_VERSION_NUMBER
 1

	)

281 
	#LIBNET_BGP4_BAD_PEER_AS
 2

	)

282 
	#LIBNET_BGP4_BAD_BGP_IDENTIFIER
 3

	)

283 
	#LIBNET_BGP4_UNSUPPORTED_OPTIONAL_PARAMETER
 4

	)

284 
	#LIBNET_BGP4_AUTHENTICATION_FAILURE
 5

	)

285 
	#LIBNET_BGP4_UNACCEPTABLE_HOLD_TIME
 6

	)

287 
	#LIBNET_BGP4_MALFORMED_ATTRIBUTE_LIST


	)

288 
	#LIBNET_BGP4_UNRECOGNIZED_WELL_KNOWN_ATTRIBUTE


	)

289 
	#LIBNET_BGP4_MISSING_WELL_KNOWN_ATTRIBUTE


	)

290 
	#LIBNET_BGP4_ATTRIBUTE_FLAGS_ERROR


	)

291 
	#LIBNET_BGP4_ATTRIBUTE_LENGTH_ERROR


	)

292 
	#LIBNET_BGP4_INVALID_ORIGIN_ATTRIBUTE


	)

293 
	#LIBNET_BGP4_AS_ROUTING_LOOP


	)

294 
	#LIBNET_BGP4_INVALID_NEXT_HOP_ATTRIBUTE


	)

295 
	#LIBNET_BGP4_OPTIONAL_ATTRIBUTE_ERROR


	)

296 
	#LIBNET_BGP4_INVALID_NETWORK_FIELD


	)

297 
	#LIBNET_BGP4_MALFORMED_AS_PATH


	)

298 
uöt8_t
 
	mîr_subcode
;

306 
	slib√t_Œdp_hdr


308 
	#LIBNET_LLDP_ETH_TYPE
 (0x88ccË

	)

310 
	#LIBNET_LLDP_TLV_HDR_SIZE
 0x02

	)

311 
	#LIBNET_LLDP_SUBTYPE_SIZE
 0x01

	)

312 
uöt16_t
 
	mév_öfo
;

315 
	#LIBNET_LLDP_END_LLDPDU
 0x00

	)

317 
	#LIBNET_LLDP_CHASSIS_ID
 0x01

	)

318 
	#LIBNET_LLDP_CHASSIS_ID_SUBTYPE_RESERVED
 0x00

	)

319 
	#LIBNET_LLDP_CHASSIS_ID_SUBTYPE_COMPONENT
 0x01

	)

320 
	#LIBNET_LLDP_CHASSIS_ID_SUBTYPE_IF_ALIAS
 0x02

	)

321 
	#LIBNET_LLDP_CHASSIS_ID_SUBTYPE_PORT
 0x03

	)

322 
	#LIBNET_LLDP_CHASSIS_ID_SUBTYPE_MAC
 0x04

	)

323 
	#LIBNET_LLDP_CHASSIS_ID_SUBTYPE_NETWORK
 0x05

	)

324 
	#LIBNET_LLDP_CHASSIS_ID_SUBTYPE_IF_NAME
 0x06

	)

325 
	#LIBNET_LLDP_CHASSIS_ID_SUBTYPE_LOCALLY
 0x07

	)

327 
	#LIBNET_LLDP_PORT_ID
 0x02

	)

328 
	#LIBNET_LLDP_PORT_ID_SUBTYPE_RESERVED
 0x00

	)

329 
	#LIBNET_LLDP_PORT_ID_SUBTYPE_IF_ALIAS
 0x01

	)

330 
	#LIBNET_LLDP_PORT_ID_SUBTYPE_MAC
 0x03

	)

331 
	#LIBNET_LLDP_PORT_ID_SUBTYPE_NETWORK
 0x04

	)

332 
	#LIBNET_LLDP_PORT_ID_SUBTYPE_IF_NAME
 0x05

	)

333 
	#LIBNET_LLDP_PORT_ID_SUBTYPE_AGENT_ID
 0x06

	)

334 
	#LIBNET_LLDP_PORT_ID_SUBTYPE_LOCALLY
 0x07

	)

337 
	#LIBNET_LLDP_TTL
 0x03

	)

341 
	#LIBNET_LLDP_ORG_SPEC
 0x7‡

	)

343 
	#LIBNET_LLDP_IEEE802_1
 0x0080c2

	)

344 
	#LIBNET_LLDP_IEEE802_1_SUB_PORT_VLAN_ID
 0x01

	)

345 
	#LIBNET_LLDP_IEEE802_1_SUB_PORT_PROTO
 0x02

	)

346 
	#LIBNET_LLDP_IEEE802_1_SUB_VLAN_NAME
 0x03

	)

347 
	#LIBNET_LLDP_IEEE802_1_SUB_PROTO_ID
 0x04

	)

348 
	#LIBNET_LLDP_IEEE802_1_SUB_VID_USAGE
 0x05

	)

349 
	#LIBNET_LLDP_IEEE802_1_SUB_MNGMNT_VID
 0x06

	)

350 
	#LIBNET_LLDP_IEEE802_1_SUB_LINK_AGGR
 0x07

	)

351 
	#LIBNET_LLDP_IEEE802_1_SUB_CONG_NOTIF
 0x08

	)

352 
	#LIBNET_LLDP_IEEE802_1_SUB_ETS_CONFIG
 0x09

	)

353 
	#LIBNET_LLDP_IEEE802_1_SUB_ETS_RECOM
 0x0®

	)

354 
	#LIBNET_LLDP_IEEE802_1_SUB_PRIORITY
 0x0b

	)

355 
	#LIBNET_LLDP_IEEE802_1_SUB_APP_PRIORITY
 0x0¯

	)

356 
	#LIBNET_LLDP_IEEE802_1_SUB_EVB
 0x0d

	)

357 
	#LIBNET_LLDP_IEEE802_1_SUB_CDCP
 0x0ê

	)

358 
	#LIBNET_LLDP_IEEE802_1_SUB_PORT_EXTNSN
 0x0‡

	)

360 
	#LIBNET_LLDP_IEEE802_3
 0x00120‡

	)

361 
	#LIBNET_LLDP_IEEE802_3_SUB_MAC_PHY
 0x01

	)

362 
	#LIBNET_LLDP_IEEE802_3_SUB_POWER
 0x02

	)

363 
	#LIBNET_LLDP_IEEE802_3_SUB_LINK_AGGR
 0x03

	)

364 
	#LIBNET_LLDP_IEEE802_3_SUB_MAX_FRAME_SIZE
 0x04

	)

366 
	#LIBNET_LLDP_TIA_TR_41
 0x0012bb

	)

367 
	#LIBNET_LLDP_TIA_TR_41_SUB_CAPAB
 0x01

	)

368 
	#LIBNET_LLDP_TIA_TR_41_SUB_NET_POLIC
 0x02

	)

369 
	#LIBNET_LLDP_TIA_TR_41_SUB_LOCAL_ID
 0x03

	)

370 
	#LIBNET_LLDP_TIA_TR_41_SUB_EXT_POWER
 0x04

	)

371 
	#LIBNET_LLDP_TIA_TR_41_SUB_INV_HRDWR_REV
 0x05

	)

372 
	#LIBNET_LLDP_TIA_TR_41_SUB_INV_FRMWR_REV
 0x06

	)

373 
	#LIBNET_LLDP_TIA_TR_41_SUB_INV_SFTWR_REV
 0x07

	)

374 
	#LIBNET_LLDP_TIA_TR_41_SUB_INV_SERIAL_NUM
 0x08

	)

375 
	#LIBNET_LLDP_TIA_TR_41_SUB_INV_MAN_NAME
 0x09

	)

376 
	#LIBNET_LLDP_TIA_TR_41_SUB_INV_MOD_NAME
 0x0®

	)

377 
	#LIBNET_LLDP_TIA_TR_41_SUB_INV_ASSET_ID
 0x0b

	)

379 
	#LIBNET_LLDP_PROFIBUS
 0x000ec‡

	)

380 
	#LIBNET_LLDP_PROFIBUS_DELAY_VALS
 0x01

	)

381 
	#LIBNET_LLDP_PROFIBUS_PORT_STATUS
 0x02

	)

382 
	#LIBNET_LLDP_PROFIBUS_ALIAS
 0x03

	)

383 
	#LIBNET_LLDP_PROFIBUS_MRP_PORT_STAT
 0x04

	)

384 
	#LIBNET_LLDP_PROFIBUS_CHASSIS_MAC
 0x05

	)

385 
	#LIBNET_LLDP_PROFIBUS_PTC_STATUS
 0x06

	)

387 
	#LIBNET_LLDP_HYTEC
 0x30b216

	)

388 
	#LIBNET_LLDP_HYTEC_TRANS
 0x01

	)

389 
	#LIBNET_LLDP_HYTEC_TRACE
 0x02

	)

396 
	#LIBNET_PROTO_CDP
 200

	)

403 
	slib√t_cdp_hdr


405 
uöt8_t
 
	mcdp_vîsi⁄
;

406 
uöt8_t
 
	mcdp_âl
;

407 
uöt16_t
 
	mcdp_sum
;

408 
uöt16_t
 
	mcdp_ty≥
;

409 
	#LIBNET_CDP_DEVID
 0x1

	)

410 
	#LIBNET_CDP_ADDRESS
 0x2

	)

411 
	#LIBNET_CDP_PORTID
 0x3

	)

412 
	#LIBNET_CDP_CAPABIL
 0x4

	)

413 
	#LIBNET_CDP_VERSION
 0x5

	)

414 
	#LIBNET_CDP_PLATFORM
 0x6

	)

415 
	#LIBNET_CDP_IPPREFIX
 0x7

	)

416 
uöt16_t
 
	mcdp_Àn
;

420 
	#LIBNET_CDP_CAP_L3R
 0x01

	)

421 
	#LIBNET_CDP_CAP_L2B
 0x02

	)

422 
	#LIBNET_CDP_CAP_L2SRB
 0x04

	)

423 
	#LIBNET_CDP_CAP_L2S
 0x08

	)

424 
	#LIBNET_CDP_CAP_SR
 0x10

	)

425 
	#LIBNET_CDP_CAP_NOI
 0x20

	)

426 
	#LIBNET_CDP_CAP_L1F
 0x40

	)

433 
	#LIBNET_CDP_VALUE_H
 0x04

	)

434 
	slib√t_cdp_vÆue_hdr


436 
uöt16_t
 
	mcdp_ty≥
;

437 
uöt16_t
 
	mcdp_Àn
;

446 
	slib√t_dh˝v4_hdr


448 
uöt8_t
 
	mdh˝_›code
;

449 
	#LIBNET_DHCP_REQUEST
 0x1

	)

450 
	#LIBNET_DHCP_REPLY
 0x2

	)

451 
uöt8_t
 
	mdh˝_hty≥
;

452 
uöt8_t
 
	mdh˝_hÀn
;

453 
uöt8_t
 
	mdh˝_h›cou¡
;

454 
uöt32_t
 
	mdh˝_xid
;

455 
uöt16_t
 
	mdh˝_£cs
;

456 
uöt16_t
 
	mdh˝_Êags
;

457 
uöt32_t
 
	mdh˝_cù
;

458 
uöt32_t
 
	mdh˝_yù
;

459 
uöt32_t
 
	mdh˝_sù
;

460 
uöt32_t
 
	mdh˝_gù
;

461 
uöt8_t
 
	mdh˝_chaddr
[16];

462 
	mdh˝_¢ame
[64];

463 
	mdh˝_fûe
[128];

464 
uöt32_t
 
	mdh˝_magic
;

465 
	#DHCP_MAGIC
 0x63825363

	)

466 
	#LIBNET_BOOTP_MIN_LEN
 0x12c

	)

467 
	#LIBNET_DHCP_PAD
 0x00

	)

468 
	#LIBNET_DHCP_SUBNETMASK
 0x01

	)

469 
	#LIBNET_DHCP_TIMEOFFSET
 0x02

	)

470 
	#LIBNET_DHCP_ROUTER
 0x03

	)

471 
	#LIBNET_DHCP_TIMESERVER
 0x04

	)

472 
	#LIBNET_DHCP_NAMESERVER
 0x05

	)

473 
	#LIBNET_DHCP_DNS
 0x06

	)

474 
	#LIBNET_DHCP_LOGSERV
 0x07

	)

475 
	#LIBNET_DHCP_COOKIESERV
 0x08

	)

476 
	#LIBNET_DHCP_LPRSERV
 0x09

	)

477 
	#LIBNET_DHCP_IMPSERV
 0x0a

	)

478 
	#LIBNET_DHCP_RESSERV
 0x0b

	)

479 
	#LIBNET_DHCP_HOSTNAME
 0x0c

	)

480 
	#LIBNET_DHCP_BOOTFILESIZE
 0x0d

	)

481 
	#LIBNET_DHCP_DUMPFILE
 0x0e

	)

482 
	#LIBNET_DHCP_DOMAINNAME
 0x0f

	)

483 
	#LIBNET_DHCP_SWAPSERV
 0x10

	)

484 
	#LIBNET_DHCP_ROOTPATH
 0x11

	)

485 
	#LIBNET_DHCP_EXTENPATH
 0x12

	)

486 
	#LIBNET_DHCP_IPFORWARD
 0x13

	)

487 
	#LIBNET_DHCP_SRCROUTE
 0x14

	)

488 
	#LIBNET_DHCP_POLICYFILTER
 0x15

	)

489 
	#LIBNET_DHCP_MAXASMSIZE
 0x16

	)

490 
	#LIBNET_DHCP_IPTTL
 0x17

	)

491 
	#LIBNET_DHCP_MTUTIMEOUT
 0x18

	)

492 
	#LIBNET_DHCP_MTUTABLE
 0x19

	)

493 
	#LIBNET_DHCP_MTUSIZE
 0x1a

	)

494 
	#LIBNET_DHCP_LOCALSUBNETS
 0x1b

	)

495 
	#LIBNET_DHCP_BROADCASTADDR
 0x1c

	)

496 
	#LIBNET_DHCP_DOMASKDISCOV
 0x1d

	)

497 
	#LIBNET_DHCP_MASKSUPPLY
 0x1e

	)

498 
	#LIBNET_DHCP_DOROUTEDISC
 0x1f

	)

499 
	#LIBNET_DHCP_ROUTERSOLICIT
 0x20

	)

500 
	#LIBNET_DHCP_STATICROUTE
 0x21

	)

501 
	#LIBNET_DHCP_TRAILERENCAP
 0x22

	)

502 
	#LIBNET_DHCP_ARPTIMEOUT
 0x23

	)

503 
	#LIBNET_DHCP_ETHERENCAP
 0x24

	)

504 
	#LIBNET_DHCP_TCPTTL
 0x25

	)

505 
	#LIBNET_DHCP_TCPKEEPALIVE
 0x26

	)

506 
	#LIBNET_DHCP_TCPALIVEGARBAGE
 0x27

	)

507 
	#LIBNET_DHCP_NISDOMAIN
 0x28

	)

508 
	#LIBNET_DHCP_NISSERVERS
 0x29

	)

509 
	#LIBNET_DHCP_NISTIMESERV
 0x2a

	)

510 
	#LIBNET_DHCP_VENDSPECIFIC
 0x2b

	)

511 
	#LIBNET_DHCP_NBNS
 0x2c

	)

512 
	#LIBNET_DHCP_NBDD
 0x2d

	)

513 
	#LIBNET_DHCP_NBTCPIP
 0x2e

	)

514 
	#LIBNET_DHCP_NBTCPSCOPE
 0x2f

	)

515 
	#LIBNET_DHCP_XFONT
 0x30

	)

516 
	#LIBNET_DHCP_XDISPLAYMGR
 0x31

	)

517 
	#LIBNET_DHCP_DISCOVERADDR
 0x32

	)

518 
	#LIBNET_DHCP_LEASETIME
 0x33

	)

519 
	#LIBNET_DHCP_OPTIONOVERLOAD
 0x34

	)

520 
	#LIBNET_DHCP_MESSAGETYPE
 0x35

	)

521 
	#LIBNET_DHCP_SERVIDENT
 0x36

	)

522 
	#LIBNET_DHCP_PARAMREQUEST
 0x37

	)

523 
	#LIBNET_DHCP_MESSAGE
 0x38

	)

524 
	#LIBNET_DHCP_MAXMSGSIZE
 0x39

	)

525 
	#LIBNET_DHCP_RENEWTIME
 0x3a

	)

526 
	#LIBNET_DHCP_REBINDTIME
 0x3b

	)

527 
	#LIBNET_DHCP_CLASSSID
 0x3c

	)

528 
	#LIBNET_DHCP_CLIENTID
 0x3d

	)

529 
	#LIBNET_DHCP_NISPLUSDOMAIN
 0x40

	)

530 
	#LIBNET_DHCP_NISPLUSSERVERS
 0x41

	)

531 
	#LIBNET_DHCP_MOBILEIPAGENT
 0x44

	)

532 
	#LIBNET_DHCP_SMTPSERVER
 0x45

	)

533 
	#LIBNET_DHCP_POP3SERVER
 0x46

	)

534 
	#LIBNET_DHCP_NNTPSERVER
 0x47

	)

535 
	#LIBNET_DHCP_WWWSERVER
 0x48

	)

536 
	#LIBNET_DHCP_FINGERSERVER
 0x49

	)

537 
	#LIBNET_DHCP_IRCSERVER
 0x4a

	)

538 
	#LIBNET_DHCP_STSERVER
 0x4b

	)

539 
	#LIBNET_DHCP_STDASERVER
 0x4c

	)

540 
	#LIBNET_DHCP_END
 0xff

	)

542 
	#LIBNET_DHCP_MSGDISCOVER
 0x01

	)

543 
	#LIBNET_DHCP_MSGOFFER
 0x02

	)

544 
	#LIBNET_DHCP_MSGREQUEST
 0x03

	)

545 
	#LIBNET_DHCP_MSGDECLINE
 0x04

	)

546 
	#LIBNET_DHCP_MSGACK
 0x05

	)

547 
	#LIBNET_DHCP_MSGNACK
 0x06

	)

548 
	#LIBNET_DHCP_MSGRELEASE
 0x07

	)

549 
	#LIBNET_DHCP_MSGINFORM
 0x08

	)

554 
	#LIBNET_DNS_H
 
LIBNET_UDP_DNSV4_H


	)

560 
	slib√t_dnsv4_hdr


562 
uöt16_t
 
	mh_Àn
;

563 
uöt16_t
 
	mid
;

564 
uöt16_t
 
	mÊags
;

565 
uöt16_t
 
	mnum_q
;

566 
uöt16_t
 
	mnum_™sw_º
;

567 
uöt16_t
 
	mnum_auth_º
;

568 
uöt16_t
 
	mnum_addi_º
;

571 
	#LIBNET_DNS_H
 
LIBNET_UDP_DNSV4_H


	)

572 
	slib√t_dnsv4udp_hdr


574 
uöt16_t
 
	mid
;

575 
uöt16_t
 
	mÊags
;

576 
uöt16_t
 
	mnum_q
;

577 
uöt16_t
 
	mnum_™sw_º
;

578 
uöt16_t
 
	mnum_auth_º
;

579 
uöt16_t
 
	mnum_addi_º
;

586 
	slib√t_ëhî√t_hdr


588 
uöt8_t
 
	mëhî_dho°
[
ETHER_ADDR_LEN
];

589 
uöt8_t
 
	mëhî_sho°
[
ETHER_ADDR_LEN
];

590 
uöt16_t
 
	mëhî_ty≥
;

593 #i‚de‡
ETHERTYPE_PUP


594 
	#ETHERTYPE_PUP
 0x0200

	)

596 #i‚de‡
ETHERTYPE_IP


597 
	#ETHERTYPE_IP
 0x0800

	)

599 #i‚de‡
ETHERTYPE_IPV6


600 
	#ETHERTYPE_IPV6
 0x86dd

	)

602 #i‚de‡
ETHERTYPE_ARP


603 
	#ETHERTYPE_ARP
 0x0806

	)

605 #i‚de‡
ETHERTYPE_REVARP


606 
	#ETHERTYPE_REVARP
 0x8035

	)

608 #i‚de‡
ETHERTYPE_VLAN


609 
	#ETHERTYPE_VLAN
 0x8100

	)

611 #i‚de‡
ETHERTYPE_EAP


612 
	#ETHERTYPE_EAP
 0x888ê

	)

614 #i‚de‡
ETHERTYPE_MPLS


615 
	#ETHERTYPE_MPLS
 0x8847

	)

617 #i‚de‡
ETHERTYPE_LOOPBACK


618 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

621 
	slib√t_ëhî_addr


623 
uöt8_t
 
	mëhî_addr_o˘ë
[6];

635 
	slib√t_fddi_hdr


637 
uöt8_t
 
	mfddi_‰ame_c⁄åﬁ
;

638 
	#LIBNET_FDDI_LLC_FRAME
 0x10

	)

639 
	#LIBNET_FDDI_48BIT_ADDR
 0x40

	)

640 
	#LIBNET_FDDI_FC_REQD
 
LIBNET_FDDI_LLC_FRAME
 | 
LIBNET_FDDI_48BIT_ADDR


	)

641 
uöt8_t
 
	mfddi_dho°
[
FDDI_ADDR_LEN
];

642 
uöt8_t
 
	mfddi_sho°
[
FDDI_ADDR_LEN
];

643 
uöt8_t
 
	mfddi_Œc_dßp
;

644 
uöt8_t
 
	mfddi_Œc_sßp
;

645 
uöt8_t
 
	mfddi_Œc_c⁄åﬁ_fõld
;

646 
uöt8_t
 
	mfddi_Œc_‹g_code
[
LIBNET_ORG_CODE_SIZE
];

647 
uöt8_t
 
	mfddi_ty≥
;

648 
uöt8_t
 
	mfddi_ty≥1
;

649 
	#FDDI_TYPE_IP
 0x0800

	)

650 
	#FDDI_TYPE_ARP
 0x0806

	)

651 
	#FDDI_TYPE_REVARP
 0x8035

	)

655 
	slib√t_fddi_addr


657 
uöt8_t
 
	mfddi_addr_o˘ë
[6];

666 
	slib√t_gª_hdr


668 
uöt16_t
 
	mÊags_vî
;

669 
	#GRE_CSUM
 0x8000

	)

670 
	#GRE_ROUTING
 0x4000

	)

671 
	#GRE_KEY
 0x2000

	)

672 
	#GRE_SEQ
 0x1000

	)

673 
	#GRE_STRICT
 0x0800

	)

674 
	#GRE_REC
 0x0700

	)

675 
	#GRE_ACK
 0x0080

	)

677 
	#GRE_FLAGS_MASK
 0x00F8

	)

678 
	#GRE_VERSION_MASK
 0x0007

	)

680 
	#GRE_VERSION_0
 0x0000

	)

681 
	#GRE_VERSION_1
 0x0001

	)

683 
uöt16_t
 
	mty≥
;

684 
	#GRE_SNA
 0x0004

	)

685 
	#GRE_OSI_NETWORK_LAYER
 0x00FE

	)

686 
	#GRE_PUP
 0x0200

	)

687 
	#GRE_XNS
 0x0600

	)

688 
	#GRE_IP
 0x0800

	)

689 
	#GRE_CHAOS
 0x0804

	)

690 
	#GRE_RFC_826_ARP
 0x0806

	)

691 
	#GRE_FRAME_RELAY_ARP
 0x0808

	)

692 
	#GRE_VINES
 0x0BAD

	)

693 
	#GRE_VINES_ECHO
 0x0BAE

	)

694 
	#GRE_VINES_LOOPBACK
 0x0BAF

	)

695 
	#GRE_DECNET
 0x6003

	)

696 
	#GRE_TRANSPARENT_ETHERNET_BRIDGING
 0x6558

	)

697 
	#GRE_RAW_FRAME_RELAY
 0x6559

	)

698 
	#GRE_APOLLO_DOMAIN
 0x8019

	)

699 
	#GRE_ETHERTALK
 0x809B

	)

700 
	#GRE_NOVELL_IPX
 0x8137

	)

701 
	#GRE_RFC_1144_TCP_IP_COMPRESSION
 0x876B

	)

702 
	#GRE_IP_AUTONOMOUS_SYSTEMS
 0x876C

	)

703 
	#GRE_SECURE_DATA
 0x876D

	)

704 
	#GRE_PPP
 0x880b

	)

708 
uöt16_t
 
	msum
;

709 
uöt16_t
 
	moff£t
;

710 
uöt32_t
 
	mkey
;

711 
uöt32_t
 
	m£q
;

712 } 
	m_gª
;

715 
uöt16_t
 
	m∑ylﬂd_s
;

716 
uöt16_t
 
	mˇŒID
;

717 
uöt32_t
 
	m£q
;

718 
uöt32_t
 
	mack
;

719 } 
	m_egª
;

720 }
	m_d©a
;

722 
	#gª_sum
 
_d©a
.
_gª
.
sum


	)

723 
	#gª_off£t
 
_d©a
.
_gª
.
off£t


	)

724 
	#gª_key
 
_d©a
.
_gª
.
key


	)

725 
	#gª_£q
 
_d©a
.
_gª
.
£q


	)

727 
	#egª_∑ylﬂd_s
 
_d©a
.
_egª
.
∑ylﬂd_s


	)

728 
	#egª_ˇŒID
 
_d©a
.
_egª
.
ˇŒID


	)

729 
	#egª_£q
 
_d©a
.
_egª
.
£q


	)

730 
	#egª_ack
 
_d©a
.
_egª
.
ack


	)

734 #i‚de‡
IPPROTO_GRE


735 
	#IPPROTO_GRE
 47

	)

743 
	slib√t_gª_§e_hdr


745 
uöt16_t
 
	maf
;

746 
uöt8_t
 
	m§e_off£t
;

747 
uöt8_t
 
	m§e_Àngth
;

748 
uöt8_t
 *
	mroutög
;

757 
	slib√t_ùv4_hdr


759 #i‡(
LIBNET_LIL_ENDIAN
)

760 
uöt8_t
 
	mù_hl
:4,

761 
	mù_v
:4;

763 #i‡(
LIBNET_BIG_ENDIAN
)

764 
uöt8_t
 
	mù_v
:4,

765 
	mù_hl
:4;

767 
uöt8_t
 
	mù_tos
;

768 #i‚de‡
IPTOS_LOWDELAY


769 
	#IPTOS_LOWDELAY
 0x10

	)

771 #i‚de‡
IPTOS_THROUGHPUT


772 
	#IPTOS_THROUGHPUT
 0x08

	)

774 #i‚de‡
IPTOS_RELIABILITY


775 
	#IPTOS_RELIABILITY
 0x04

	)

777 #i‚de‡
IPTOS_LOWCOST


778 
	#IPTOS_LOWCOST
 0x02

	)

780 
uöt16_t
 
	mù_Àn
;

781 
uöt16_t
 
	mù_id
;

782 
uöt16_t
 
	mù_off
;

783 #i‚de‡
IP_RF


784 
	#IP_RF
 0x8000

	)

786 #i‚de‡
IP_DF


787 
	#IP_DF
 0x4000

	)

789 #i‚de‡
IP_MF


790 
	#IP_MF
 0x2000

	)

792 #i‚de‡
IP_OFFMASK


793 
	#IP_OFFMASK
 0x1ff‡

	)

795 
uöt8_t
 
	mù_âl
;

796 
uöt8_t
 
	mù_p
;

797 
uöt16_t
 
	mù_sum
;

798 
ö_addr
 
	mù_§c
, 
	mù_d°
;

804 #i‚de‡
IPOPT_EOL


805 
	#IPOPT_EOL
 0

	)

807 #i‚de‡
IPOPT_NOP


808 
	#IPOPT_NOP
 1

	)

810 #i‚de‡
IPOPT_RR


811 
	#IPOPT_RR
 7

	)

813 #i‚de‡
IPOPT_TS


814 
	#IPOPT_TS
 68

	)

816 #i‚de‡
IPOPT_SECURITY


817 
	#IPOPT_SECURITY
 130

	)

819 #i‚de‡
IPOPT_LSRR


820 
	#IPOPT_LSRR
 131

	)

822 #i‚de‡
IPOPT_SATID


823 
	#IPOPT_SATID
 136

	)

825 #i‚de‡
IPOPT_SSRR


826 
	#IPOPT_SSRR
 137

	)

832 
	slib√t_ö6_addr


836 
uöt8_t
 
	m__u6_addr8
[16];

837 
uöt16_t
 
	m__u6_addr16
[8];

838 
uöt32_t
 
	m__u6_addr32
[4];

839 } 
	m__u6_addr
;

841 
	#lib√t_s6_addr
 
__u6_addr
.
__u6_addr8


	)

848 
	slib√t_ùv6_hdr


850 
uöt8_t
 
	mù_Êags
[4];

851 
uöt16_t
 
	mù_Àn
;

852 
uöt8_t
 
	mù_nh
;

853 
uöt8_t
 
	mù_hl
;

854 
lib√t_ö6_addr
 
	mù_§c
, 
	mù_d°
;

862 
	#LIBNET_IPV6_NH_FRAGMENT
 44

	)

863 
	slib√t_ùv6_‰ag_hdr


865 
uöt8_t
 
	mù_nh
;

866 
uöt8_t
 
	mù_ª£rved
;

867 
uöt16_t
 
	mù_‰ag
;

868 
uöt32_t
 
	mù_id
;

876 
	#LIBNET_IPV6_NH_ROUTING
 43

	)

877 
	slib√t_ùv6_routög_hdr


879 
uöt8_t
 
	mù_nh
;

880 
uöt8_t
 
	mù_Àn
;

881 
uöt8_t
 
	mù_πy≥
;

882 
uöt8_t
 
	mù_£gmíts
;

891 
	#LIBNET_IPV6_NH_DESTOPTS
 60

	)

892 
	slib√t_ùv6_de°›ts_hdr


894 
uöt8_t
 
	mù_nh
;

895 
uöt8_t
 
	mù_Àn
;

904 
	#LIBNET_IPV6_NH_HBH
 0

	)

905 
	slib√t_ùv6_hbh›ts_hdr


907 
uöt8_t
 
	mù_nh
;

908 
uöt8_t
 
	mù_Àn
;

917 #i‚de‡
IPPROTO_ICMPV6


918 
	#IPPROTO_ICMPV6
 58

	)

920 
	slib√t_icmpv6_hdr


922 
uöt8_t
 
	micmp_ty≥
;

924 #i‚de‡
ICMP6_ECHO_REQUEST


925 
	#ICMP6_ECHO_REQUEST
 128

	)

927 #i‚de‡
ICMP6_ECHO_REPLY


928 
	#ICMP6_ECHO_REPLY
 129

	)

930 #i‚de‡
ICMP6_DST_UNREACH


931 
	#ICMP6_DST_UNREACH
 1

	)

933 #i‚de‡
ICMP6_PACKET_TOO_BIG


934 
	#ICMP6_PACKET_TOO_BIG
 2

	)

936 #i‚de‡
ICMP6_TIME_EXCEEDED


937 
	#ICMP6_TIME_EXCEEDED
 3

	)

939 #i‚de‡
ICMP6_PARAM_PROB


940 
	#ICMP6_PARAM_PROB
 4

	)

943 #i‚de‡
ND_ROUTER_SOLICIT


944 
	#ND_ROUTER_SOLICIT
 133

	)

946 #i‚de‡
ND_ROUTER_ADVERT


947 
	#ND_ROUTER_ADVERT
 134

	)

949 #i‚de‡
ND_NEIGHBOR_SOLICIT


950 
	#ND_NEIGHBOR_SOLICIT
 135

	)

952 #i‚de‡
ND_NEIGHBOR_ADVERT


953 
	#ND_NEIGHBOR_ADVERT
 136

	)

956 
uöt8_t
 
	micmp_code
;

957 #i‚de‡
ICMP6_DST_UNREACH_NOROUTE


958 
	#ICMP6_DST_UNREACH_NOROUTE
 0

	)

960 #i‚de‡
ICMP6_DST_UNREACH_ADMIN


961 
	#ICMP6_DST_UNREACH_ADMIN
 1

	)

963 #i‚de‡
ICMP6_DST_UNREACH_BEYONDSCOPE


964 
	#ICMP6_DST_UNREACH_BEYONDSCOPE
 2

	)

966 #i‚de‡
ICMP6_DST_UNREACH_ADDR


967 
	#ICMP6_DST_UNREACH_ADDR
 3

	)

969 #i‚de‡
ICMP6_DST_UNREACH_NOPORT


970 
	#ICMP6_DST_UNREACH_NOPORT
 4

	)

972 
uöt16_t
 
	micmp_sum
;

976 
uöt16_t
 
	mid
;

977 
uöt16_t
 
	m£q
;

981 
	#IPPROTO_ICMP6
 58

	)

983 
	#ICMP6_ECHO
 128

	)

984 
	#ICMP6_ECHOREPLY
 129

	)

985 
	#ICMP6_UNREACH
 1

	)

986 
	#ICMP6_PKTTOOBIG
 2

	)

987 
	#ICMP6_TIMXCEED
 3

	)

988 
	#ICMP6_PARAMPROB
 4

	)

990 
	#ICMP6_NOROUTE
 0

	)

991 
	#ICMP6_ADM_PROHIBITED
 1

	)

992 
	#ICMP6_NOT_NEIGHBOUR
 2

	)

993 
	#ICMP6_ADDR_UNREACH
 3

	)

994 
	#ICMP6_PORT_UNREACH
 4

	)

999 
	slib√t_icmpv6_uƒóch
 {

1000 
uöt32_t
 
	munu£d
;

1003 
	slib√t_icmpv6_echo
 {

1004 
uöt16_t
 
	mid
;

1005 
uöt16_t
 
	m£q
;

1008 
	slib√t_icmpv6_ndp_nsﬁ
 {

1009 
uöt32_t
 
	mª£rved
;

1010 
lib√t_ö6_addr
 
	mèrgë_addr
;

1013 
	slib√t_icmpv6_ndp_«dv
 {

1014 
uöt32_t
 
	mÊags
;

1015 #i‚de‡
ND_NA_FLAG_ROUTER


1016 
	#ND_NA_FLAG_ROUTER
 0x80000000

	)

1018 #i‚de‡
ND_NA_FLAG_SOLICITED


1019 
	#ND_NA_FLAG_SOLICITED
 0x40000000

	)

1021 #i‚de‡
ND_NA_FLAG_OVERRIDE


1022 
	#ND_NA_FLAG_OVERRIDE
 0x20000000

	)

1024 
lib√t_ö6_addr
 
	mèrgë_addr
;

1027 
	slib√t_icmpv6_ndp_›t
 {

1028 
uöt8_t
 
	mty≥
;

1029 #i‚de‡
ND_OPT_SOURCE_LINKADDR


1030 
	#ND_OPT_SOURCE_LINKADDR
 1

	)

1032 #i‚de‡
ND_OPT_TARGET_LINKADDR


1033 
	#ND_OPT_TARGET_LINKADDR
 2

	)

1035 #i‚de‡
ND_OPT_PREFIX_INFORMATION


1036 
	#ND_OPT_PREFIX_INFORMATION
 3

	)

1038 #i‚de‡
ND_OPT_REDIRECTED_HEADER


1039 
	#ND_OPT_REDIRECTED_HEADER
 4

	)

1041 #i‚de‡
ND_OPT_MTU


1042 
	#ND_OPT_MTU
 5

	)

1044 #i‚de‡
ND_OPT_RTR_ADV_INTERVAL


1045 
	#ND_OPT_RTR_ADV_INTERVAL
 7

	)

1047 #i‚de‡
ND_OPT_HOME_AGENT_INFO


1048 
	#ND_OPT_HOME_AGENT_INFO
 8

	)

1050 
uöt8_t
 
	mÀn
;

1059 
	slib√t_icmpv4_hdr


1061 
uöt8_t
 
	micmp_ty≥
;

1062 #i‚de‡ 
ICMP_ECHOREPLY


1063 
	#ICMP_ECHOREPLY
 0

	)

1065 #i‚de‡ 
ICMP_UNREACH


1066 
	#ICMP_UNREACH
 3

	)

1068 #i‚de‡ 
ICMP_SOURCEQUENCH


1069 
	#ICMP_SOURCEQUENCH
 4

	)

1071 #i‚de‡ 
ICMP_REDIRECT


1072 
	#ICMP_REDIRECT
 5

	)

1074 #i‚de‡ 
ICMP_ECHO


1075 
	#ICMP_ECHO
 8

	)

1077 #i‚de‡ 
ICMP_ROUTERADVERT


1078 
	#ICMP_ROUTERADVERT
 9

	)

1080 #i‚de‡ 
ICMP_ROUTERSOLICIT


1081 
	#ICMP_ROUTERSOLICIT
 10

	)

1083 #i‚de‡ 
ICMP_TIMXCEED


1084 
	#ICMP_TIMXCEED
 11

	)

1086 #i‚de‡ 
ICMP_PARAMPROB


1087 
	#ICMP_PARAMPROB
 12

	)

1089 #i‚de‡ 
ICMP_TSTAMP


1090 
	#ICMP_TSTAMP
 13

	)

1092 #i‚de‡ 
ICMP_TSTAMPREPLY


1093 
	#ICMP_TSTAMPREPLY
 14

	)

1095 #i‚de‡ 
ICMP_IREQ


1096 
	#ICMP_IREQ
 15

	)

1098 #i‚de‡ 
ICMP_IREQREPLY


1099 
	#ICMP_IREQREPLY
 16

	)

1101 #i‚de‡ 
ICMP_MASKREQ


1102 
	#ICMP_MASKREQ
 17

	)

1104 #i‚de‡ 
ICMP_MASKREPLY


1105 
	#ICMP_MASKREPLY
 18

	)

1107 
uöt8_t
 
	micmp_code
;

1108 #i‚de‡ 
ICMP_UNREACH_NET


1109 
	#ICMP_UNREACH_NET
 0

	)

1111 #i‚de‡ 
ICMP_UNREACH_HOST


1112 
	#ICMP_UNREACH_HOST
 1

	)

1114 #i‚de‡ 
ICMP_UNREACH_PROTOCOL


1115 
	#ICMP_UNREACH_PROTOCOL
 2

	)

1117 #i‚de‡ 
ICMP_UNREACH_PORT


1118 
	#ICMP_UNREACH_PORT
 3

	)

1120 #i‚de‡ 
ICMP_UNREACH_NEEDFRAG


1121 
	#ICMP_UNREACH_NEEDFRAG
 4

	)

1123 #i‚de‡ 
ICMP_UNREACH_SRCFAIL


1124 
	#ICMP_UNREACH_SRCFAIL
 5

	)

1126 #i‚de‡ 
ICMP_UNREACH_NET_UNKNOWN


1127 
	#ICMP_UNREACH_NET_UNKNOWN
 6

	)

1129 #i‚de‡ 
ICMP_UNREACH_HOST_UNKNOWN


1130 
	#ICMP_UNREACH_HOST_UNKNOWN
 7

	)

1132 #i‚de‡ 
ICMP_UNREACH_ISOLATED


1133 
	#ICMP_UNREACH_ISOLATED
 8

	)

1135 #i‚de‡ 
ICMP_UNREACH_NET_PROHIB


1136 
	#ICMP_UNREACH_NET_PROHIB
 9

	)

1138 #i‚de‡ 
ICMP_UNREACH_HOST_PROHIB


1139 
	#ICMP_UNREACH_HOST_PROHIB
 10

	)

1141 #i‚de‡ 
ICMP_UNREACH_TOSNET


1142 
	#ICMP_UNREACH_TOSNET
 11

	)

1144 #i‚de‡ 
ICMP_UNREACH_TOSHOST


1145 
	#ICMP_UNREACH_TOSHOST
 12

	)

1147 #i‚de‡ 
ICMP_UNREACH_FILTER_PROHIB


1148 
	#ICMP_UNREACH_FILTER_PROHIB
 13

	)

1150 #i‚de‡ 
ICMP_UNREACH_HOST_PRECEDENCE


1151 
	#ICMP_UNREACH_HOST_PRECEDENCE
 14

	)

1153 #i‚de‡ 
ICMP_UNREACH_PRECEDENCE_CUTOFF


1154 
	#ICMP_UNREACH_PRECEDENCE_CUTOFF
 15

	)

1156 #i‚de‡ 
ICMP_REDIRECT_NET


1157 
	#ICMP_REDIRECT_NET
 0

	)

1159 #i‚de‡ 
ICMP_REDIRECT_HOST


1160 
	#ICMP_REDIRECT_HOST
 1

	)

1162 #i‚de‡ 
ICMP_REDIRECT_TOSNET


1163 
	#ICMP_REDIRECT_TOSNET
 2

	)

1165 #i‚de‡ 
ICMP_REDIRECT_TOSHOST


1166 
	#ICMP_REDIRECT_TOSHOST
 3

	)

1168 #i‚de‡ 
ICMP_TIMXCEED_INTRANS


1169 
	#ICMP_TIMXCEED_INTRANS
 0

	)

1171 #i‚de‡ 
ICMP_TIMXCEED_REASS


1172 
	#ICMP_TIMXCEED_REASS
 1

	)

1174 #i‚de‡ 
ICMP_PARAMPROB_OPTABSENT


1175 
	#ICMP_PARAMPROB_OPTABSENT
 1

	)

1178 
uöt16_t
 
	micmp_sum
;

1184 
uöt16_t
 
	mid
;

1185 
uöt16_t
 
	m£q
;

1186 } 
	mecho
;

1193 #unde‡
icmp_id


1194 #unde‡
icmp_£q


1195 
	#icmp_id
 
hun
.
echo
.
id


	)

1196 
	#icmp_£q
 
hun
.
echo
.
£q


	)

1198 
uöt32_t
 
	mg©eway
;

1201 
uöt16_t
 
	m∑d
;

1202 
uöt16_t
 
	mmtu
;

1203 } 
	m‰ag
;

1204 } 
	mhun
;

1209 
uöt32_t
 
	môs_Ÿime
;

1210 
uöt32_t
 
	môs_πime
;

1211 
uöt32_t
 
	môs_âime
;

1212 } 
	mts
;

1215 
lib√t_ùv4_hdr
 
	midi_ù
;

1217 } 
	mù
;

1218 
uöt32_t
 
	mmask
;

1219 
öt8_t
 
	md©a
[1];

1221 #unde‡
icmp_mask


1222 
	#icmp_mask
 
dun
.
mask


	)

1223 #unde‡
icmp_d©a


1224 
	#icmp_d©a
 
dun
.
d©a


	)

1226 #unde‡
icmp_Ÿime


1227 
	#icmp_Ÿime
 
dun
.
ts
.
ôs_Ÿime


	)

1228 #unde‡
icmp_πime


1229 
	#icmp_πime
 
dun
.
ts
.
ôs_πime


	)

1230 #unde‡
icmp_âime


1231 
	#icmp_âime
 
dun
.
ts
.
ôs_âime


	)

1232 }
	mdun
;

1241 
	slib√t_igmp_hdr


1243 
uöt8_t
 
	migmp_ty≥
;

1244 #i‚de‡
IGMP_MEMBERSHIP_QUERY


1245 
	#IGMP_MEMBERSHIP_QUERY
 0x11

	)

1247 #i‚de‡
IGMP_V1_MEMBERSHIP_REPORT


1248 
	#IGMP_V1_MEMBERSHIP_REPORT
 0x12

	)

1250 #i‚de‡
IGMP_V2_MEMBERSHIP_REPORT


1251 
	#IGMP_V2_MEMBERSHIP_REPORT
 0x16

	)

1253 #i‚de‡
IGMP_LEAVE_GROUP


1254 
	#IGMP_LEAVE_GROUP
 0x17

	)

1256 
uöt8_t
 
	migmp_code
;

1257 
uöt16_t
 
	migmp_sum
;

1258 
ö_addr
 
	migmp_group
;

1269 #i‚de‡
IPPROTO_ESP


1270 
	#IPPROTO_ESP
 50

	)

1272 
	slib√t_e•_hdr


1274 
uöt32_t
 
	me•_•i
;

1275 
uöt32_t
 
	me•_£q
;

1276 
uöt32_t
 
	me•_iv
;

1279 
	slib√t_e•_·r


1281 
uöt8_t
 
	me•_∑d_Àn
;

1282 
uöt8_t
 
	me•_nh
;

1283 
öt8_t
 *
	me•_auth
;

1286 #i‚de‡
IPPROTO_AH


1287 
	#IPPROTO_AH
 51

	)

1289 
	slib√t_ah_hdr


1291 
uöt8_t
 
	mah_nh
;

1292 
uöt8_t
 
	mah_Àn
;

1293 
uöt16_t
 
	mah_ªs
;

1294 
uöt32_t
 
	mah_•i
;

1295 
uöt32_t
 
	mah_£q
;

1296 
uöt32_t
 
	mah_auth
;

1304 
	#LIBNET_PROTO_ISL
 201

	)

1310 
	slib√t_i¶_hdr


1312 
uöt8_t
 
	mi¶_dho°
[5];

1313 #i‡(
LIBNET_LIL_ENDIAN
)

1314 
uöt8_t
 
	mi¶_ty≥
:4,

1315 
	mi¶_u£r
:4;

1317 #i‡(
LIBNET_BIG_ENDIAN
)

1318 
uöt8_t
 
	mi¶_u£r
:4,

1319 
	mi¶_ty≥
:4;

1321 
uöt8_t
 
	mi¶_sho°
[6];

1322 
uöt16_t
 
	mi¶_Àn
;

1323 
uöt8_t
 
	mi¶_¢≠
[6];

1324 
uöt16_t
 
	mi¶_vid
;

1325 
uöt16_t
 
	mi¶_ödex
;

1326 
uöt16_t
 
	mi¶_ª£rved
;

1330 #i‚de‡
IPPROTO_OSPF


1331 
	#IPPROTO_OSPF
 89

	)

1333 
	#IPPROTO_OSPF_LSA
 890

	)

1334 
	#LIBNET_MODX
 4102

	)

1340 
	#LIBNET_OPT_EBIT
 0x02

	)

1341 
	#LIBNET_OPT_MCBIT
 0x04

	)

1342 
	#LIBNET_OPT_NPBIT
 0x08

	)

1343 
	#LIBNET_OPT_EABIT
 0x10

	)

1344 
	#LIBNET_OPT_DCBIT
 0x20

	)

1352 
	slib√t_m∂s_hdr


1354 
uöt32_t
 
	mm∂s_Às
;

1355 
	#LIBNET_MPLS_BOS_ON
 1

	)

1356 
	#LIBNET_MPLS_BOS_OFF
 0

	)

1364 
	slib√t_¡p_hdr_l_Â


1366 
uöt32_t
 
	möãgî
;

1367 
uöt32_t
 
	m‰a˘i⁄
;

1370 
	slib√t_¡p_hdr_s_Â


1372 
uöt16_t
 
	möãgî
;

1373 
uöt16_t
 
	m‰a˘i⁄
;

1377 
	slib√t_¡p_hdr


1379 
uöt8_t
 
	m¡p_li_vn_mode
;

1380 
	#LIBNET_NTP_LI_NW
 0x0

	)

1381 
	#LIBNET_NTP_LI_AS
 0x1

	)

1382 
	#LIBNET_NTP_LI_DS
 0x2

	)

1383 
	#LIBNET_NTP_LI_AC
 0x3

	)

1385 
	#LIBNET_NTP_VN_2
 0x2

	)

1386 
	#LIBNET_NTP_VN_3
 0x3

	)

1387 
	#LIBNET_NTP_VN_4
 0x4

	)

1389 
	#LIBNET_NTP_MODE_R
 0x0

	)

1390 
	#LIBNET_NTP_MODE_A
 0x1

	)

1391 
	#LIBNET_NTP_MODE_P
 0x2

	)

1392 
	#LIBNET_NTP_MODE_C
 0x3

	)

1393 
	#LIBNET_NTP_MODE_S
 0x4

	)

1394 
	#LIBNET_NTP_MODE_B
 0x5

	)

1395 
	#LIBNET_NTP_MODE_RC
 0x6

	)

1396 
	#LIBNET_NTP_MODE_RP
 0x7

	)

1397 
uöt8_t
 
	m¡p_°øtum
;

1398 
	#LIBNET_NTP_STRATUM_UNAVAIL
 0x0

	)

1399 
	#LIBNET_NTP_STRATUM_PRIMARY
 0x1

	)

1402 
uöt8_t
 
	m¡p_pﬁl
;

1403 
uöt8_t
 
	m¡p_¥ecisi⁄
;

1404 
lib√t_¡p_hdr_s_Â
 
	m¡p_dñay
;

1405 
lib√t_¡p_hdr_s_Â
 
	m¡p_di•îsi⁄
;

1406 
uöt32_t
 
	m¡p_ª„ªn˚_id
;

1407 
	#LIBNET_NTP_REF_LOCAL
 0x4c4f434¯

	)

1408 
	#LIBNET_NTP_REF_PPS
 0x50505300

	)

1409 
	#LIBNET_NTP_REF_ACTS
 0x41435453

	)

1410 
	#LIBNET_NTP_REF_USNO
 0x55534e4‡

	)

1411 
	#LIBNET_NTP_REF_PTB
 0x50544200

	)

1412 
	#LIBNET_NTP_REF_TDF
 0x54444600

	)

1413 
	#LIBNET_NTP_REF_DCF
 0x44434600

	)

1414 
	#LIBNET_NTP_REF_MSF
 0x4d534600

	)

1415 
	#LIBNET_NTP_REF_WWV
 0x57575600

	)

1416 
	#LIBNET_NTP_REF_WWVB
 0x57575642

	)

1417 
	#LIBNET_NTP_REF_WWVH
 0x57575648

	)

1418 
	#LIBNET_NTP_REF_CHU
 0x43485500

	)

1419 
	#LIBNET_NTP_REF_LORC
 0x4c4f5243

	)

1420 
	#LIBNET_NTP_REF_OMEG
 0x4f4d4547

	)

1421 
	#LIBNET_NTP_REF_GPS
 0x47505300

	)

1422 
	#LIBNET_NTP_REF_GOES
 0x474f4553

	)

1423 
lib√t_¡p_hdr_l_Â
 
	m¡p_ªf_ts
;

1424 
lib√t_¡p_hdr_l_Â
 
	m¡p_‹ig_ts
;

1425 
lib√t_¡p_hdr_l_Â
 
	m¡p_ªc_ts
;

1426 
lib√t_¡p_hdr_l_Â
 
	m¡p_xmt_ts
;

1435 
	slib√t_o•f_hdr


1437 
uöt8_t
 
	mo•f_v
;

1438 
	#OSPFVERSION
 2

	)

1439 
uöt8_t
 
	mo•f_ty≥
;

1440 
	#LIBNET_OSPF_UMD
 0

	)

1441 
	#LIBNET_OSPF_HELLO
 1

	)

1442 
	#LIBNET_OSPF_DBD
 2

	)

1443 
	#LIBNET_OSPF_LSR
 3

	)

1444 
	#LIBNET_OSPF_LSU
 4

	)

1445 
	#LIBNET_OSPF_LSA
 5

	)

1446 
uöt16_t
 
	mo•f_Àn
;

1447 
ö_addr
 
	mo•f_πr_id
;

1448 
ö_addr
 
	mo•f_¨ó_id
;

1449 
uöt16_t
 
	mo•f_sum
;

1450 
uöt16_t
 
	mo•f_auth_ty≥
;

1451 
	#LIBNET_OSPF_AUTH_NULL
 0

	)

1452 
	#LIBNET_OSPF_AUTH_SIMPLE
 1

	)

1453 
	#LIBNET_OSPF_AUTH_MD5
 2

	)

1462 
	slib√t_auth_hdr


1464 
uöt16_t
 
	mo•f_auth_nuŒ
;

1465 
uöt8_t
 
	mo•f_auth_keyid
;

1466 
uöt8_t
 
	mo•f_auth_Àn
;

1467 
uöt32_t
 
	mo•f_auth_£q
;

1476 
	slib√t_o•f_hñlo_hdr


1478 
ö_addr
 
	mhñlo_nmask
;

1479 
uöt16_t
 
	mhñlo_öåvl
;

1480 
uöt8_t
 
	mhñlo_›ts
;

1481 
uöt8_t
 
	mhñlo_πr_¥i
;

1482 
uöt32_t
 
	mhñlo_dód_ötvl
;

1483 
ö_addr
 
	mhñlo_des_πr
;

1484 
ö_addr
 
	mhñlo_bkup_πr
;

1485 
ö_addr
 
	mhñlo_nbr
;

1492 
	slib√t_dbd_hdr


1494 
uöt16_t
 
	mdbd_mtu_Àn
;

1495 
uöt8_t
 
	mdbd_›ts
;

1496 
uöt8_t
 
	mdbd_ty≥
;

1497 
	#LIBNET_DBD_IBI
 0x01

	)

1498 
	#LIBNET_DBD_MBIT
 0x02

	)

1499 
	#LIBNET_DBD_MSBIT
 0x04

	)

1500 
uöt32_t
 
	mdbd_£q
;

1507 
	#LIBNET_LS_TYPE_RTR
 1

	)

1508 
	#LIBNET_LS_TYPE_NET
 2

	)

1509 
	#LIBNET_LS_TYPE_IP
 3

	)

1510 
	#LIBNET_LS_TYPE_ASBR
 4

	)

1511 
	#LIBNET_LS_TYPE_ASEXT
 5

	)

1517 
	slib√t_l§_hdr


1519 
uöt32_t
 
	ml§_ty≥
;

1520 
uöt32_t
 
	ml§_lsid
;

1521 
ö_addr
 
	ml§_adπr
;

1528 
	slib√t_lsu_hdr


1530 
uöt32_t
 
	mlsu_num
;

1537 
	slib√t_lß_hdr


1539 
uöt16_t
 
	mlß_age
;

1540 
uöt8_t
 
	mlß_›ts
;

1541 
uöt8_t
 
	mlß_ty≥
;

1542 
uöt32_t
 
	mlß_id
;

1543 
ö_addr
 
	mlß_adv
;

1544 
uöt32_t
 
	mlß_£q
;

1545 
uöt16_t
 
	mlß_sum
;

1546 
uöt16_t
 
	mlß_Àn
;

1556 
	slib√t_πr_lß_hdr


1558 
uöt16_t
 
	mπr_Êags
;

1559 
	#LIBNET_RTR_FLAGS_W
 0x0100

	)

1560 
	#LIBNET_RTR_FLAGS_E
 0x0200

	)

1561 
	#LIBNET_RTR_FLAGS_B
 0x0400

	)

1562 
uöt16_t
 
	mπr_num
;

1563 
uöt32_t
 
	mπr_lök_id
;

1564 
	#LIBNET_LINK_ID_NBR_ID
 1

	)

1565 
	#LIBNET_LINK_ID_IP_DES
 2

	)

1566 
	#LIBNET_LINK_ID_SUB
 3

	)

1567 
uöt32_t
 
	mπr_lök_d©a
;

1568 
uöt8_t
 
	mπr_ty≥
;

1569 
	#LIBNET_RTR_TYPE_PTP
 1

	)

1570 
	#LIBNET_RTR_TYPE_TRANS
 2

	)

1571 
	#LIBNET_RTR_TYPE_STUB
 3

	)

1572 
	#RTR_TYPE_VRTL
 4

	)

1573 
uöt8_t
 
	mπr_tos_num
;

1574 
uöt16_t
 
	mπr_mëric
;

1581 
	slib√t_√t_lß_hdr


1583 
ö_addr
 
	m√t_nmask
;

1584 
uöt32_t
 
	m√t_πr_id
;

1591 
	slib√t_sum_lß_hdr


1593 
ö_addr
 
	msum_nmask
;

1594 
uöt32_t
 
	msum_mëric
;

1595 
uöt32_t
 
	msum_tos_mëric
;

1603 
	slib√t_as_lß_hdr


1605 
ö_addr
 
	mas_nmask
;

1606 
uöt32_t
 
	mas_mëric
;

1607 
	#LIBNET_AS_E_BIT_ON
 0x80000000

	)

1608 
ö_addr
 
	mas_fwd_addr
;

1609 
uöt32_t
 
	mas_πe_èg
;

1618 
	slib√t_rù_hdr


1620 
uöt8_t
 
	mrù_cmd
;

1621 
	#RIPCMD_REQUEST
 1

	)

1622 
	#RIPCMD_RESPONSE
 2

	)

1623 
	#RIPCMD_TRACEON
 3

	)

1624 
	#RIPCMD_TRACEOFF
 4

	)

1625 
	#RIPCMD_POLL
 5

	)

1626 
	#RIPCMD_POLLENTRY
 6

	)

1627 
	#RIPCMD_MAX
 7

	)

1628 
uöt8_t
 
	mrù_vî
;

1629 
	#RIPVER_0
 0

	)

1630 
	#RIPVER_1
 1

	)

1631 
	#RIPVER_2
 2

	)

1632 
uöt16_t
 
	mrù_rd
;

1633 
uöt16_t
 
	mrù_af
;

1634 
uöt16_t
 
	mrù_π
;

1635 
uöt32_t
 
	mrù_addr
;

1636 
uöt32_t
 
	mrù_mask
;

1637 
uöt32_t
 
	mrù_√xt_h›
;

1638 
uöt32_t
 
	mrù_mëric
;

1645 
	#LIBNET_RPC_CALL
 0

	)

1646 
	#LIBNET_RPC_REPLY
 1

	)

1647 
	#LIBNET_RPC_VERS
 2

	)

1648 
	#LIBNET_RPC_LAST_FRAG
 0x80000000

	)

1653 
	#LIBNET_PMAP_PROGRAM
 100000

	)

1654 
	#LIBNET_PMAP_PROC_NULL
 0

	)

1655 
	#LIBNET_PMAP_PROC_SET
 1

	)

1656 
	#LIBNET_PMAP_PROC_UNSET
 2

	)

1657 
	#LIBNET_PMAP_PROC_GETADDR
 3

	)

1658 
	#LIBNET_PMAP_PROC_DUMP
 4

	)

1659 
	#LIBNET_PMAP_PROC_CALLIT
 5

	)

1660 
	#LIBNET_PMAP_PROC_BCAST
 5

	)

1661 
	#LIBNET_PMAP_PROC_GETTIME
 6

	)

1662 
	#LIBNET_PMAP_PROC_UADDR2TADDR
 7

	)

1663 
	#LIBNET_PMAP_PROC_TADDR2UADDR
 8

	)

1664 
	#LIBNET_PMAP_PROC_GETVERSADDR
 9

	)

1665 
	#LIBNET_PMAP_PROC_INDIRECT
 10

	)

1666 
	#LIBNET_PMAP_PROC_GETADDRLIST
 11

	)

1667 
	#LIBNET_PMAP_PROC_GETSTAT
 12

	)

1671 
	slib√t_Ωc_›aque_auth


1673 
uöt32_t
 
	mΩc_auth_Êav‹
;

1674 
uöt32_t
 
	mΩc_auth_Àngth
;

1676 
uöt8_t
 *
	mΩc_auth_d©a
;

1680 
	slib√t_Ωc_ˇŒ


1682 
uöt32_t
 
	mΩc_Ωcvîs
;

1683 
uöt32_t
 
	mΩc_¥ognum
;

1684 
uöt32_t
 
	mΩc_vîs
;

1685 
uöt32_t
 
	mΩc_¥o˚duª
;

1686 
lib√t_Ωc_›aque_auth
 
	mΩc_¸edítüls
;

1687 
lib√t_Ωc_›aque_auth
 
	mΩc_vîifõr
;

1690 
	slib√t_Ωc_ˇŒ_hdr


1692 
uöt32_t
 
	mΩc_xid
;

1693 
uöt32_t
 
	mΩc_ty≥
;

1694 
lib√t_Ωc_ˇŒ
 
	mΩc_ˇŒ
;

1697 
	slib√t_Ωc_ˇŒ_t˝_hdr


1699 
uöt32_t
 
	mΩc_ªc‹d_m¨kög
;

1700 
lib√t_Ωc_ˇŒ_hdr
 
	mΩc_comm⁄
;

1708 
	slib√t_°p_c⁄f_hdr


1710 
uöt16_t
 
	m°p_id
;

1711 
uöt8_t
 
	m°p_vîsi⁄
;

1712 
uöt8_t
 
	m°p_bpdu_ty≥
;

1713 
uöt8_t
 
	m°p_Êags
;

1714 
uöt8_t
 
	m°p_roŸid
[8];

1715 
uöt32_t
 
	m°p_roŸpc
;

1716 
uöt8_t
 
	m°p_bridgeid
[8];

1717 
uöt16_t
 
	m°p_p‹tid
;

1718 
uöt16_t
 
	m°p_mage
;

1719 
uöt16_t
 
	m°p_maxage
;

1720 
uöt16_t
 
	m°p_hñlŸ
;

1721 
uöt16_t
 
	m°p_fdñay
;

1730 
	slib√t_°p_t˙_hdr


1732 
uöt16_t
 
	m°p_id
;

1733 
uöt8_t
 
	m°p_vîsi⁄
;

1734 
uöt8_t
 
	m°p_bpdu_ty≥
;

1743 
	slib√t_t˝_hdr


1745 
uöt16_t
 
	mth_•‹t
;

1746 
uöt16_t
 
	mth_dp‹t
;

1747 
uöt32_t
 
	mth_£q
;

1748 
uöt32_t
 
	mth_ack
;

1749 #i‡(
LIBNET_LIL_ENDIAN
)

1750 
uöt8_t
 
	mth_x2
:4,

1751 
	mth_off
:4;

1753 #i‡(
LIBNET_BIG_ENDIAN
)

1754 
uöt8_t
 
	mth_off
:4,

1755 
	mth_x2
:4;

1757 
uöt8_t
 
	mth_Êags
;

1758 #i‚de‡
TH_FIN


1759 
	#TH_FIN
 0x01

	)

1761 #i‚de‡
TH_SYN


1762 
	#TH_SYN
 0x02

	)

1764 #i‚de‡
TH_RST


1765 
	#TH_RST
 0x04

	)

1767 #i‚de‡
TH_PUSH


1768 
	#TH_PUSH
 0x08

	)

1770 #i‚de‡
TH_ACK


1771 
	#TH_ACK
 0x10

	)

1773 #i‚de‡
TH_URG


1774 
	#TH_URG
 0x20

	)

1776 #i‚de‡
TH_ECE


1777 
	#TH_ECE
 0x40

	)

1779 #i‚de‡
TH_CWR


1780 
	#TH_CWR
 0x80

	)

1782 
uöt16_t
 
	mth_wö
;

1783 
uöt16_t
 
	mth_sum
;

1784 
uöt16_t
 
	mth_uΩ
;

1790 
	slib√t_tokí_rög_hdr


1792 
uöt8_t
 
	mtokí_rög_ac˚ss_c⁄åﬁ
;

1793 
	#LIBNET_TOKEN_RING_FRAME
 0x10

	)

1794 
uöt8_t
 
	mtokí_rög_‰ame_c⁄åﬁ
;

1795 
	#LIBNET_TOKEN_RING_LLC_FRAME
 0x40

	)

1796 
uöt8_t
 
	mtokí_rög_dho°
[
TOKEN_RING_ADDR_LEN
];

1797 
uöt8_t
 
	mtokí_rög_sho°
[
TOKEN_RING_ADDR_LEN
];

1798 
uöt8_t
 
	mtokí_rög_Œc_dßp
;

1799 
uöt8_t
 
	mtokí_rög_Œc_sßp
;

1800 
uöt8_t
 
	mtokí_rög_Œc_c⁄åﬁ_fõld
;

1801 
uöt8_t
 
	mtokí_rög_Œc_‹g_code
[
LIBNET_ORG_CODE_SIZE
];

1802 
uöt16_t
 
	mtokí_rög_ty≥
;

1803 
	#TOKEN_RING_TYPE_IP
 0x0800

	)

1804 
	#TOKEN_RING_TYPE_ARP
 0x0806

	)

1805 
	#TOKEN_RING_TYPE_REVARP
 0x8035

	)

1808 
	slib√t_tokí_rög_addr


1810 
uöt8_t
 
	mtokí_rög_addr_o˘ë
[6];

1818 
	slib√t_udp_hdr


1820 
uöt16_t
 
	muh_•‹t
;

1821 
uöt16_t
 
	muh_dp‹t
;

1822 
uöt16_t
 
	muh_uÀn
;

1823 
uöt16_t
 
	muh_sum
;

1830 
	slib√t_£bek_hdr


1832 
uöt32_t
 
	mmagic
;

1833 
uöt16_t
 
	mvîsi⁄
;

1834 
	#SEBEK_PROTO_VERSION
 1

	)

1835 
uöt16_t
 
	mty≥
;

1836 
	#SEBEK_TYPE_READ
 0

	)

1837 
	#SEBEK_TYPE_WRITE
 1

	)

1838 
uöt32_t
 
	mcou¡î
;

1839 
uöt32_t
 
	mtime_£c
;

1840 
uöt32_t
 
	mtime_u£c
;

1841 
uöt32_t
 
	mpid
;

1842 
uöt32_t
 
	muid
;

1843 
uöt32_t
 
	mfd
;

1844 
	#SEBEK_CMD_LENGTH
 12

	)

1845 
uöt8_t
 
	mcmd
[
SEBEK_CMD_LENGTH
];

1846 
uöt32_t
 
	mÀngth
;

1855 #i‚de‡
IPPROTO_VRRP


1856 
	#IPPROTO_VRRP
 112

	)

1858 
	slib√t_vºp_hdr


1860 #i‡(
LIBNET_LIL_ENDIAN
)

1861 
uöt8_t
 
	mvºp_v
:4,

1862 
	mvºp_t
:4;

1864 #i‡(
LIBNET_BIG_ENDIAN
)

1865 
uöt8_t
 
	mvºp_t
:4,

1866 
	mvºp_v
:4;

1868 
	#LIBNET_VRRP_VERSION_01
 0x1

	)

1869 
	#LIBNET_VRRP_VERSION_02
 0x2

	)

1870 
	#LIBNET_VRRP_TYPE_ADVERT
 0x1

	)

1871 
uöt8_t
 
	mvºp_vrouãr_id
;

1872 
uöt8_t
 
	mvºp_¥i‹ôy
;

1873 
uöt8_t
 
	mvºp_ù_cou¡
;

1874 
uöt8_t
 
	mvºp_auth_ty≥
;

1875 
	#LIBNET_VRRP_AUTH_NONE
 0x1

	)

1876 
	#LIBNET_VRRP_AUTH_PASSWD
 0x2

	)

1877 
	#LIBNET_VRRP_AUTH_IPAH
 0x3

	)

1878 
uöt8_t
 
	mvºp_advît_öt
;

1879 
uöt16_t
 
	mvºp_sum
;

1889 
	slib√t_h§p_hdr


1891 
	#LIBNET_HSRP_VERSION
 0x0

	)

1892 
uöt8_t
 
	mvîsi⁄
;

1893 
	#LIBNET_HSRP_TYPE_HELLO
 0x0

	)

1894 
	#LIBNET_HSRP_TYPE_COUP
 0x1

	)

1895 
	#LIBNET_HSRP_TYPE_RESIGN
 0x2

	)

1896 
uöt8_t
 
	m›code
;

1897 
	#LIBNET_HSRP_STATE_INITIAL
 0x0

	)

1898 
	#LIBNET_HSRP_STATE_LEARN
 0x1

	)

1899 
	#LIBNET_HSRP_STATE_LISTEN
 0x2

	)

1900 
	#LIBNET_HSRP_STATE_SPEAK
 0x4

	)

1901 
	#LIBNET_HSRP_STATE_STANDBY
 0x8

	)

1902 
	#LIBNET_HSRP_STATE_ACTIVE
 0x10

	)

1903 
uöt8_t
 
	m°©e
;

1904 
uöt8_t
 
	mhñlo_time
;

1905 
uöt8_t
 
	mhﬁd_time
;

1906 
uöt8_t
 
	m¥i‹ôy
;

1907 
uöt8_t
 
	mgroup
;

1908 
uöt8_t
 
	mª£rved
;

1909 
	#HSRP_AUTHDATA_LENGTH
 8

	)

1910 
uöt8_t
 
	mauthd©a
[
HSRP_AUTHDATA_LENGTH
];

1911 
uöt32_t
 
	mvútuÆ_ù
;

	@/workspaces/libnet/include/libnet/libnet-macros.h

32 #i‚de‡
__LIBNET_MACROS_H


33 
	#__LIBNET_MACROS_H


	)

44 
	#LIBNET_DONT_RESOLVE
 0

	)

50 
	#LIBNET_RESOLVE
 1

	)

55 
	#LIBNET_ON
 0

	)

60 
	#LIBNET_OFF
 1

	)

65 #i‚de‡
IN6ADDR_ERROR_INIT


66 
	#IN6ADDR_ERROR_INIT
 { { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

68 0xff, 0xf‡} } }

	)

74 
	#LIBNET_PR2
 0

	)

75 
	#LIBNET_PR8
 1

	)

76 
	#LIBNET_PR16
 2

	)

77 
	#LIBNET_PRu16
 3

	)

78 
	#LIBNET_PR32
 4

	)

79 
	#LIBNET_PRu32
 5

	)

80 
	#LIBNET_PRAND_MAX
 0xffffffff

	)

85 
	#LIBNET_MAX_PACKET
 0xffff

	)

86 #i‚de‡
IP_MAXPACKET


87 
	#IP_MAXPACKET
 0xffff

	)

92 #i‚de‡
ETHER_ADDR_LEN


93 
	#ETHER_ADDR_LEN
 0x6

	)

97 #i‚de‡
FDDI_ADDR_LEN


98 
	#FDDI_ADDR_LEN
 0x6

	)

102 #i‚de‡
TOKEN_RING_ADDR_LEN


103 
	#TOKEN_RING_ADDR_LEN
 0x6

	)

107 
	#LIBNET_ORG_CODE_SIZE
 0x3

	)

112 
	#LIBNET_ERRBUF_SIZE
 0x100

	)

117 
	#LIBNET_MAXOPTION_SIZE
 0x28

	)

120 #i‡(
LIBNET_BSD_BYTE_SWAP
)

121 
	#FIX
(
n
Ë
	`¡ohs
“)

	)

122 
	#UNFIX
(
n
Ë
	`ht⁄s
“)

	)

124 
	#FIX
(
n
Ë“)

	)

125 
	#UNFIX
(
n
Ë“)

	)

129 
	#LIBNET_DO_PAYLOAD
(
l
, 
p
) \

130 i‡(
∑ylﬂd_s
 && !
∑ylﬂd
) \

132 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, \

133 "%s():Öaylﬂd inc⁄si°ícy\n", 
__func__
); \

134 
bad
; \

136 i‡(
∑ylﬂd_s
) \

138 
n
 = 
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
∑ylﬂd
, 
∑ylﬂd_s
); \

139 i‡(
n
 =(
uöt32_t
) - 1) \

141 
bad
; \

144 

	)

146 
	#LIBNET_LLDP_TLV_SET_TYPE
(
év
, 
ty≥
Ë—lv |—y≥ << 9))

	)

147 
	#LIBNET_LLDP_TLV_SET_LEN
(
év
, 
Àn
Ë—lv |Àn)

	)

150 
	#LIBNET_CKSUM_CARRY
(
x
) \

151 (
x
 = (x >> 16Ë+ (x & 0xffff), (~(x + (x >> 16)Ë& 0xffff))

	)

154 
	#LIBNET_OSPF_AUTHCPY
(
x
, 
y
) \

155 
	`mem˝y
((
uöt8_t
 *)
x
, (uöt8_à*)
y
, (y))

	)

156 
	#LIBNET_OSPF_CKSUMBUF
(
x
, 
y
) \

157 
	`mem˝y
((
uöt8_t
 *)
x
, (uöt8_à*)
y
, (y))

	)

160 
	#LIBNET_NTP_DO_LI_VN_MODE
(
li
, 
vn
, 
md
) \

161 ((
uöt8_t
)((((
li
Ë<< 6Ë& 0xc0Ë| (((
vn
Ë<< 3Ë& 0x38Ë| ((
md
Ë& 0x7)))

	)

164 #ifde‡
IFF_LOOPBACK


165 
	#LIBNET_ISLOOPBACK
(
p
Ë(’)->
i‰_Êags
 & 
IFF_LOOPBACK
)

	)

167 
	#LIBNET_ISLOOPBACK
(
p
Ë(
	`°rcmp
(’)->
i‰_«me
, "lo"Ë=0)

	)

171 
	#LIBNET_ISADVMODE
(
x
Ë(x & 0x08)

	)

174 
	#LIBNET_LABEL_SIZE
 64

	)

175 
	#LIBNET_LABEL_DEFAULT
 "ˇrdsh¨k"

	)

176 
	#CQ_LOCK_UNLOCKED
 (
uöt32_t
)0x00000000

	)

177 
	#CQ_LOCK_READ
 (
uöt32_t
)0x00000001

	)

178 
	#CQ_LOCK_WRITE
 (
uöt32_t
)0x00000002

	)

185 
	#f‹_óch_c⁄ãxt_ö_cq
(
l
) \

186 
l
 = 
	`lib√t_cq_hód
(); 
	`lib√t_cq_œ°
();Ü = 
	`lib√t_cq_√xt
())

	)

189 
	#cq_is_wlocked
(Ë(
l_cqd
.
cq_lock
 & 
CQ_LOCK_WRITE
)

	)

192 
	#cq_is_æocked
(Ë(
l_cqd
.
cq_lock
 & 
CQ_LOCK_READ
)

	)

195 
	#cq_is_locked
(Ë(
l_cqd
.
cq_lock
 & (
CQ_LOCK_READ
 | 
CQ_LOCK_WRITE
))

	)

198 
	#check_cq_lock
(
x
Ë(
l_cqd
.
cq_lock
 & x)

	)

	@/workspaces/libnet/include/libnet/libnet-structures.h

30 #i‚de‡
__LIBNET_STRUCTURES_H


31 
	#__LIBNET_STRUCTURES_H


	)

33 #i‡((
_WIN32
Ë&& !(
__CYGWIN__
))

34 
	~"Packë32.h
"

38 
lib√t_p‹t_li°_chaö
 
	tlib√t_∂i°_t
;

39 
	slib√t_p‹t_li°_chaö


41 
uöt16_t
 
	mnode
;

42 
uöt16_t
 
	mbp‹t
;

43 
uöt16_t
 
	mï‹t
;

44 
uöt8_t
 
	mid
;

45 
lib√t_∂i°_t
 *
	m√xt
;

50 
	slib√t_°©s


52 
öt64_t
 
	m∑ckës_£¡
;

53 
öt64_t
 
	m∑ckë_îr‹s
;

54 
öt64_t
 
	mbyãs_wrôãn
;

62 
öt32_t
 
	tlib√t_±ag_t
;

63 
	#LIBNET_PTAG_INITIALIZER
 0

	)

69 
	slib√t_¥Ÿocﬁ_block


71 
uöt8_t
 *
	mbuf
;

72 
uöt32_t
 
	mb_Àn
;

73 
uöt16_t
 
	mh_Àn
;

84 
uöt32_t
 
	mc›õd
;

86 
uöt8_t
 
	mty≥
;

89 
	#LIBNET_PBLOCK_ARP_H
 0x01

	)

90 
	#LIBNET_PBLOCK_DHCPV4_H
 0x02

	)

91 
	#LIBNET_PBLOCK_DNSV4_H
 0x03

	)

92 
	#LIBNET_PBLOCK_ETH_H
 0x04

	)

93 
	#LIBNET_PBLOCK_ICMPV4_H
 0x05

	)

94 
	#LIBNET_PBLOCK_ICMPV4_ECHO_H
 0x06

	)

95 
	#LIBNET_PBLOCK_ICMPV4_MASK_H
 0x07

	)

96 
	#LIBNET_PBLOCK_ICMPV4_UNREACH_H
 0x08

	)

97 
	#LIBNET_PBLOCK_ICMPV4_TIMXCEED_H
 0x09

	)

98 
	#LIBNET_PBLOCK_ICMPV4_REDIRECT_H
 0x0®

	)

99 
	#LIBNET_PBLOCK_ICMPV4_TS_H
 0x0b

	)

100 
	#LIBNET_PBLOCK_IGMP_H
 0x0¯

	)

101 
	#LIBNET_PBLOCK_IPV4_H
 0x0d

	)

102 
	#LIBNET_PBLOCK_IPO_H
 0x0ê

	)

103 
	#LIBNET_PBLOCK_IPDATA
 0x0‡

	)

104 
	#LIBNET_PBLOCK_OSPF_H
 0x10

	)

105 
	#LIBNET_PBLOCK_OSPF_HELLO_H
 0x11

	)

106 
	#LIBNET_PBLOCK_OSPF_DBD_H
 0x12

	)

107 
	#LIBNET_PBLOCK_OSPF_LSR_H
 0x13

	)

108 
	#LIBNET_PBLOCK_OSPF_LSU_H
 0x14

	)

109 
	#LIBNET_PBLOCK_OSPF_LSA_H
 0x15

	)

110 
	#LIBNET_PBLOCK_OSPF_AUTH_H
 0x16

	)

111 
	#LIBNET_PBLOCK_OSPF_CKSUM
 0x17

	)

112 
	#LIBNET_PBLOCK_LS_RTR_H
 0x18

	)

113 
	#LIBNET_PBLOCK_LS_NET_H
 0x19

	)

114 
	#LIBNET_PBLOCK_LS_SUM_H
 0x1®

	)

115 
	#LIBNET_PBLOCK_LS_AS_EXT_H
 0x1b

	)

116 
	#LIBNET_PBLOCK_NTP_H
 0x1¯

	)

117 
	#LIBNET_PBLOCK_RIP_H
 0x1d

	)

118 
	#LIBNET_PBLOCK_TCP_H
 0x1ê

	)

119 
	#LIBNET_PBLOCK_TCPO_H
 0x1‡

	)

120 
	#LIBNET_PBLOCK_TCPDATA
 0x20

	)

121 
	#LIBNET_PBLOCK_UDP_H
 0x21

	)

122 
	#LIBNET_PBLOCK_VRRP_H
 0x22

	)

123 
	#LIBNET_PBLOCK_DATA_H
 0x23

	)

124 
	#LIBNET_PBLOCK_CDP_H
 0x24

	)

125 
	#LIBNET_PBLOCK_IPSEC_ESP_HDR_H
 0x25

	)

126 
	#LIBNET_PBLOCK_IPSEC_ESP_FTR_H
 0x26

	)

127 
	#LIBNET_PBLOCK_IPSEC_AH_H
 0x27

	)

128 
	#LIBNET_PBLOCK_802_1Q_H
 0x28

	)

129 
	#LIBNET_PBLOCK_802_2_H
 0x29

	)

130 
	#LIBNET_PBLOCK_802_2SNAP_H
 0x2®

	)

131 
	#LIBNET_PBLOCK_802_3_H
 0x2b

	)

132 
	#LIBNET_PBLOCK_STP_CONF_H
 0x2¯

	)

133 
	#LIBNET_PBLOCK_STP_TCN_H
 0x2d

	)

134 
	#LIBNET_PBLOCK_ISL_H
 0x2ê

	)

135 
	#LIBNET_PBLOCK_IPV6_H
 0x2‡

	)

136 
	#LIBNET_PBLOCK_802_1X_H
 0x30

	)

137 
	#LIBNET_PBLOCK_RPC_CALL_H
 0x31

	)

138 
	#LIBNET_PBLOCK_MPLS_H
 0x32

	)

139 
	#LIBNET_PBLOCK_FDDI_H
 0x33

	)

140 
	#LIBNET_PBLOCK_TOKEN_RING_H
 0x34

	)

141 
	#LIBNET_PBLOCK_BGP4_HEADER_H
 0x35

	)

142 
	#LIBNET_PBLOCK_BGP4_OPEN_H
 0x36

	)

143 
	#LIBNET_PBLOCK_BGP4_UPDATE_H
 0x37

	)

144 
	#LIBNET_PBLOCK_BGP4_NOTIFICATION_H
 0x38

	)

145 
	#LIBNET_PBLOCK_GRE_H
 0x39

	)

146 
	#LIBNET_PBLOCK_GRE_SRE_H
 0x3®

	)

147 
	#LIBNET_PBLOCK_IPV6_FRAG_H
 0x3b

	)

148 
	#LIBNET_PBLOCK_IPV6_ROUTING_H
 0x3¯

	)

149 
	#LIBNET_PBLOCK_IPV6_DESTOPTS_H
 0x3d

	)

150 
	#LIBNET_PBLOCK_IPV6_HBHOPTS_H
 0x3ê

	)

151 
	#LIBNET_PBLOCK_SEBEK_H
 0x3‡

	)

152 
	#LIBNET_PBLOCK_HSRP_H
 0x40

	)

153 
	#LIBNET_PBLOCK_ICMPV6_H
 0x41

	)

154 
	#LIBNET_PBLOCK_ICMPV6_ECHO_H
 0x46

	)

155 
	#LIBNET_PBLOCK_ICMPV6_UNREACH_H
 0x42

	)

156 
	#LIBNET_PBLOCK_ICMPV6_NDP_NSOL_H
 0x43

	)

157 
	#LIBNET_PBLOCK_ICMPV6_NDP_NADV_H
 0x44

	)

158 
	#LIBNET_PBLOCK_ICMPV6_NDP_OPT_H
 0x45

	)

159 
	#LIBNET_PBLOCK_LLDP_H
 0x50

	)

160 
	#LIBNET_PBLOCK_LLDP_CHASSIS_H
 0x51

	)

161 
	#LIBNET_PBLOCK_LLDP_PORT_H
 0x52

	)

162 
	#LIBNET_PBLOCK_LLDP_TTL_H
 0x53

	)

163 
	#LIBNET_PBLOCK_LLDP_END_H
 0x54

	)

164 
	#LIBNET_PBLOCK_LLDP_ORG_SPEC_H
 0x55

	)

166 
uöt8_t
 
	mÊags
;

167 
	#LIBNET_PBLOCK_DO_CHECKSUM
 0x01

	)

168 
lib√t_±ag_t
 
	m±ag
;

173 
lib√t_¥Ÿocﬁ_block
 *
	m√xt
;

174 
lib√t_¥Ÿocﬁ_block
 *
	m¥ev
;

176 
lib√t_¥Ÿocﬁ_block
 
	tlib√t_pblock_t
;

184 
	slib√t_c⁄ãxt


186 #i‡((
_WIN32
Ë&& !(
__CYGWIN__
))

187 
SOCKET
 
	mfd
;

188 
LPADAPTER
 
	mÕAd≠ãr
;

190 
	mfd
;

192 
	möje˘i⁄_ty≥
;

193 
	#LIBNET_NONE
 0xf8

	)

194 
	#LIBNET_LINK
 0x00

	)

195 
	#LIBNET_RAW4
 0x01

	)

196 
	#LIBNET_RAW6
 0x02

	)

198 
	#LIBNET_LINK_ADV
 0x08

	)

199 
	#LIBNET_RAW4_ADV
 0x09

	)

200 
	#LIBNET_RAW6_ADV
 0x0®

	)

201 
	#LIBNET_ADV_MASK
 0x08

	)

204 
lib√t_pblock_t
 *
	m¥Ÿocﬁ_blocks
;

205 
lib√t_pblock_t
 *
	mpblock_íd
;

206 
uöt32_t
 
	mn_pblocks
;

208 
	mlök_ty≥
;

215 #i‚de‡
DLT_EN10MB


216 
	#DLT_EN10MB
 1

	)

218 #i‚de‡
DLT_IEEE802


219 
	#DLT_IEEE802
 6

	)

222 
	mlök_off£t
;

223 
	mÆig√r
;

224 *
	mdevi˚
;

226 
lib√t_°©s
 
	m°©s
;

227 
lib√t_±ag_t
 
	m±ag_°©e
;

228 
	mœbñ
[
LIBNET_LABEL_SIZE
];

230 
	mîr_buf
[
LIBNET_ERRBUF_SIZE
];

231 
uöt32_t
 
	mtŸÆ_size
;

233 
lib√t_ëhî_addr
 
	mlök_addr
;

235 
lib√t_c⁄ãxt
 
	tlib√t_t
;

242 
_lib√t_c⁄ãxt_queue
 
	tlib√t_cq_t
;

243 
	s_lib√t_c⁄ãxt_queue


245 
lib√t_t
 *
	mc⁄ãxt
;

246 
lib√t_cq_t
 *
	m√xt
;

247 
lib√t_cq_t
 *
	m¥ev
;

250 
	s_lib√t_c⁄ãxt_queue_des¸ùt‹


252 
uöt32_t
 
	mnode
;

253 
uöt32_t
 
	mcq_lock
;

254 
lib√t_cq_t
 *
	mcuºít
;

256 
_lib√t_c⁄ãxt_queue_des¸ùt‹
 
	tlib√t_cqd_t
;

	@/workspaces/libnet/include/libnet/libnet-types.h

32 #i‚de‡
__LIBNET_TYPES_H


33 
	#__LIBNET_TYPES_H


	)

	@/workspaces/libnet/sample/arp-new.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
c
;

42 
uöt32_t
 
i
;

43 
lib√t_t
 *
l
;

44 
lib√t_±ag_t
 
t
;

45 *
devi˚
 = 
NULL
;

46 
uöt8_t
 *
∑ckë
;

47 
uöt32_t
 
∑ckë_s
;

48 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

50 
	`¥ötf
("libnet 1.1Öacket shaping: ARP[link --áutobuildingÉthernet]\n");

52 i‡(
¨gc
 > 1)

54 
devi˚
 = 
¨gv
[1];

57 
l
 = 
	`lib√t_öô
(

58 
LIBNET_LINK_ADV
,

59 
devi˚
,

60 
îrbuf
);

62 i‡(
l
 =
NULL
)

64 
	`Ârötf
(
°dîr
, "%s", 
îrbuf
);

65 
	`exô
(
EXIT_FAILURE
);

84 
i
 = 
	`lib√t_gë_ùaddr4
(
l
);

86 
t
 = 
	`lib√t_autobuûd_¨p
(

87 
ARPOP_REPLY
,

88 
íë_§c
,

89 (
uöt8_t
 *)&
i
,

90 
íë_d°
,

91 (
uöt8_t
 *)&
i
,

92 
l
);

93 i‡(
t
 == -1)

95 
	`Ârötf
(
°dîr
, "C™'àbuûd ARP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

96 
bad
;

99 
t
 = 
	`lib√t_autobuûd_ëhî√t
(

100 
íë_d°
,

101 
ETHERTYPE_ARP
,

102 
l
);

103 i‡(
t
 == -1)

105 
	`Ârötf
(
°dîr
, "Can't buildÉthernet header: %s\n",

106 
	`lib√t_gëîr‹
(
l
));

107 
bad
;

111 i‡(
	`lib√t_adv_cuŒ_∑ckë
(
l
, &
∑ckë
, &
∑ckë_s
) == -1)

113 
	`Ârötf
(
°dîr
, "%s", 
	`lib√t_gëîr‹
(
l
));

117 
	`Ârötf
(
°dîr
, "∑ckë size: %d\n", 
∑ckë_s
);

118 
	`lib√t_adv_‰ì_∑ckë
(
l
, 
∑ckë
);

121 
c
 = 
	`lib√t_wrôe
(
l
);

123 i‡(
c
 == -1)

125 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

126 
bad
;

130 
	`Ârötf
(
°dîr
, "Wrote %d byte ARPÖacket from context \"%s\"; "

131 "checkÅhêwúe.\n", 
c
, 
	`lib√t_cq_gëœbñ
(
l
));

133 
	`lib√t_de°roy
(
l
);

134  (
EXIT_SUCCESS
);

135 
bad
:

136 
	`lib√t_de°roy
(
l
);

137  (
EXIT_FAILURE
);

138 
	}
}

	@/workspaces/libnet/sample/arp.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
c
;

42 
uöt32_t
 
i
;

43 
lib√t_t
 *
l
;

44 
lib√t_±ag_t
 
t
;

45 *
devi˚
 = 
NULL
;

46 
uöt8_t
 *
∑ckë
;

47 
uöt32_t
 
∑ckë_s
;

48 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

50 
	`¥ötf
("libnet 1.1Öacket shaping: ARP[link --áutobuildingÉthernet]\n");

52 i‡(
¨gc
 > 1)

54 
devi˚
 = 
¨gv
[1];

57 
l
 = 
	`lib√t_öô
(

58 
LIBNET_LINK_ADV
,

59 
devi˚
,

60 
îrbuf
);

62 i‡(
l
 =
NULL
)

64 
	`Ârötf
(
°dîr
, "%s", 
îrbuf
);

65 
	`exô
(
EXIT_FAILURE
);

69 
i
 = 
	`lib√t_gë_ùaddr4
(
l
);

71 
t
 = 
	`lib√t_buûd_¨p
(

72 
ARPHRD_ETHER
,

73 
ETHERTYPE_IP
,

76 
ARPOP_REPLY
,

77 
íë_§c
,

78 (
uöt8_t
 *)&
i
,

79 
íë_d°
,

80 (
uöt8_t
 *)&
i
,

81 
NULL
,

83 
l
,

85 i‡(
t
 == -1)

87 
	`Ârötf
(
°dîr
, "C™'àbuûd ARP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

88 
bad
;

91 
t
 = 
	`lib√t_autobuûd_ëhî√t
(

92 
íë_d°
,

93 
ETHERTYPE_ARP
,

94 
l
);

95 i‡(
t
 == -1)

97 
	`Ârötf
(
°dîr
, "Can't buildÉthernet header: %s\n",

98 
	`lib√t_gëîr‹
(
l
));

99 
bad
;

103 i‡(
	`lib√t_adv_cuŒ_∑ckë
(
l
, &
∑ckë
, &
∑ckë_s
) == -1)

105 
	`Ârötf
(
°dîr
, "%s", 
	`lib√t_gëîr‹
(
l
));

109 
	`Ârötf
(
°dîr
, "∑ckë size: %d\n", 
∑ckë_s
);

110 
	`lib√t_adv_‰ì_∑ckë
(
l
, 
∑ckë
);

113 
c
 = 
	`lib√t_wrôe
(
l
);

115 i‡(
c
 == -1)

117 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

118 
bad
;

122 
	`Ârötf
(
°dîr
, "Wrote %d byte ARPÖacket from context \"%s\"; "

123 "checkÅhêwúe.\n", 
c
, 
	`lib√t_cq_gëœbñ
(
l
));

125 
	`lib√t_de°roy
(
l
);

126  (
EXIT_SUCCESS
);

127 
bad
:

128 
	`lib√t_de°roy
(
l
);

129  (
EXIT_FAILURE
);

130 
	}
}

	@/workspaces/libnet/sample/bgp4_hdr.c

48 #i‡(
HAVE_CONFIG_H
)

49 
	~"../ö˛ude/c⁄fig.h
"

51 
	~"lib√t_ã°.h
"

54 
	$maö
(
¨gc
, *
¨gv
[])

56 
c
;

57 
lib√t_t
 *
l
;

58 
u_l⁄g
 
§c_ù
, 
d°_ù
, 
Àngth
;

59 
lib√t_±ag_t
 
t
 = 0;

60 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

61 
u_ch¨
 *
∑ylﬂd
 = 
NULL
;

62 
u_l⁄g
 
∑ylﬂd_s
 = 0;

63 
u_ch¨
 
m¨kî
[
LIBNET_BGP4_MARKER_SIZE
];

64 
u_ch¨
 
ty≥
;

66 
	`¥ötf
("libnet 1.1Öacket shaping: BGP4 hdr +Öayload[raw]\n");

68 
l
 = 
	`lib√t_öô
(

69 
LIBNET_RAW4
,

70 
NULL
,

71 
îrbuf
);

73 i‡(
l
 =
NULL
)

75 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

76 
	`exô
(
EXIT_FAILURE
);

79 
§c_ù
 = 0;

80 
d°_ù
 = 0;

81 
	`mem£t
(
m¨kî
, 0x1, 
LIBNET_BGP4_MARKER_SIZE
);

82 
ty≥
 = 0;

84 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:t:m:p:")Ë!
EOF
)

86 
c
)

95 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

97 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

98 
	`exô
(
EXIT_FAILURE
);

103 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

105 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

106 
	`exô
(
EXIT_FAILURE
);

111 
	`mem˝y
(
m¨kî
, 
›èrg
, 
LIBNET_BGP4_MARKER_SIZE
);

115 
ty≥
 = 
	`©oi
(
›èrg
);

119 
∑ylﬂd
 = (
u_ch¨
 *)
›èrg
;

120 
∑ylﬂd_s
 = 
	`°æí
((*)
›èrg
);

124 
	`exô
(
EXIT_FAILURE
);

128 i‡(!
§c_ù
 || !
d°_ù
)

130 
	`ußge
(
¨gv
[0]);

131 
	`exô
(
EXIT_FAILURE
);

135 
Àngth
 = 
LIBNET_BGP4_HEADER_H
 + 
∑ylﬂd_s
;

136 
t
 = 
	`lib√t_buûd_bgp4_hódî
(

137 
m¨kî
,

138 
Àngth
,

139 
ty≥
,

140 
∑ylﬂd
,

141 
∑ylﬂd_s
,

142 
l
,

144 i‡(
t
 == -1)

146 
	`Ârötf
(
°dîr
, "C™'àbuûd BGP4 hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

147 
bad
;

150 
Àngth
+=
LIBNET_TCP_H
;

151 
t
 = 
	`lib√t_buûd_t˝
(

156 
TH_SYN
,

160 
Àngth
,

161 
NULL
,

163 
l
,

165 i‡(
t
 == -1)

167 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

168 
bad
;

171 
Àngth
+=
LIBNET_IPV4_H
;

172 
t
 = 
	`lib√t_buûd_ùv4
(

173 
Àngth
,

178 
IPPROTO_TCP
,

180 
§c_ù
,

181 
d°_ù
,

182 
NULL
,

184 
l
,

186 i‡(
t
 == -1)

188 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

189 
bad
;

195 
c
 = 
	`lib√t_wrôe
(
l
);

196 i‡(
c
 == -1)

198 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

199 
bad
;

203 
	`Ârötf
(
°dîr
, "WrŸê%d byã TCPÖackë; checkÅhêwúe.\n", 
c
);

206 
	`lib√t_de°roy
(
l
);

207  (
EXIT_SUCCESS
);

208 
bad
:

209 
	`lib√t_de°roy
(
l
);

210  (
EXIT_FAILURE
);

211 
	}
}

214 
	$ußge
(*
«me
)

216 
	`Ârötf
(
°dîr
,

219 
«me
);

220 
	}
}

	@/workspaces/libnet/sample/bgp4_notification.c

48 #i‡(
HAVE_CONFIG_H
)

49 
	~"../ö˛ude/c⁄fig.h
"

51 
	~"lib√t_ã°.h
"

54 
	$maö
(
¨gc
, *
¨gv
[])

56 
c
;

57 
lib√t_t
 *
l
;

58 
u_l⁄g
 
§c_ù
, 
d°_ù
, 
Àngth
;

59 
lib√t_±ag_t
 
t
 = 0;

60 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

61 
u_ch¨
 *
∑ylﬂd
 = 
NULL
;

62 
u_l⁄g
 
∑ylﬂd_s
 = 0;

63 
u_ch¨
 
m¨kî
[
LIBNET_BGP4_MARKER_SIZE
];

64 
u_ch¨
 
code
, 
subcode
;

66 
	`¥ötf
("libnet 1.1Öacket shaping: BGP4Çotification +Öayload[raw]\n");

71 
l
 = 
	`lib√t_öô
(

72 
LIBNET_RAW4
,

73 
NULL
,

74 
îrbuf
);

76 i‡(
l
 =
NULL
)

78 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

79 
	`exô
(
EXIT_FAILURE
);

82 
§c_ù
 = 0;

83 
d°_ù
 = 0;

84 
code
 = 
subcode
 = 0;

85 
	`mem£t
(
m¨kî
, 0x1, 
LIBNET_BGP4_MARKER_SIZE
);

87 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:t:m:p:c:e:")Ë!
EOF
)

89 
c
)

98 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

100 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

101 
	`exô
(
EXIT_FAILURE
);

106 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

108 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

109 
	`exô
(
EXIT_FAILURE
);

114 
	`mem˝y
(
m¨kî
, 
›èrg
, 
LIBNET_BGP4_MARKER_SIZE
);

118 
code
 = 
	`©oi
(
›èrg
);

122 
subcode
 = 
	`©oi
(
›èrg
);

126 
∑ylﬂd
 = (
u_ch¨
 *)
›èrg
;

127 
∑ylﬂd_s
 = 
	`°æí
((*)
›èrg
);

131 
	`exô
(
EXIT_FAILURE
);

135 i‡(!
§c_ù
 || !
d°_ù
)

137 
	`ußge
(
¨gv
[0]);

138 
	`exô
(
EXIT_FAILURE
);

141 
Àngth
 = 
LIBNET_BGP4_NOTIFICATION_H
 + 
∑ylﬂd_s
;

142 
t
 = 
	`lib√t_buûd_bgp4_nŸifiˇti⁄
(

143 
code
,

144 
subcode
,

145 
NULL
,

147 
l
,

149 i‡(
t
 == -1)

151 
	`Ârötf
(
°dîr
, "C™'àbuûd BGP4ÇŸifiˇti⁄: %s\n", 
	`lib√t_gëîr‹
(
l
));

152 
bad
;

155 
Àngth
+=
LIBNET_BGP4_HEADER_H
;

156 
t
 = 
	`lib√t_buûd_bgp4_hódî
(

157 
m¨kî
,

158 
Àngth
,

159 
LIBNET_BGP4_NOTIFICATION
,

160 
NULL
,

162 
l
,

164 i‡(
t
 == -1)

166 
	`Ârötf
(
°dîr
, "C™'àbuûd BGP4 hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

167 
bad
;

170 
Àngth
+=
LIBNET_TCP_H
;

171 
t
 = 
	`lib√t_buûd_t˝
(

176 
TH_SYN
,

180 
Àngth
,

181 
NULL
,

183 
l
,

185 i‡(
t
 == -1)

187 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

188 
bad
;

191 
Àngth
+=
LIBNET_IPV4_H
;

192 
t
 = 
	`lib√t_buûd_ùv4
(

193 
Àngth
,

198 
IPPROTO_TCP
,

200 
§c_ù
,

201 
d°_ù
,

202 
NULL
,

204 
l
,

206 i‡(
t
 == -1)

208 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

209 
bad
;

215 
c
 = 
	`lib√t_wrôe
(
l
);

216 i‡(
c
 == -1)

218 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

219 
bad
;

223 
	`Ârötf
(
°dîr
, "WrŸê%d byã TCPÖackë; checkÅhêwúe.\n", 
c
);

226 
	`lib√t_de°roy
(
l
);

227  (
EXIT_SUCCESS
);

228 
bad
:

229 
	`lib√t_de°roy
(
l
);

230  (
EXIT_FAILURE
);

231 
	}
}

234 
	$ußge
(*
«me
)

236 
	`Ârötf
(
°dîr
,

239 
«me
);

240 
	}
}

	@/workspaces/libnet/sample/bgp4_open.c

59 #i‡(
HAVE_CONFIG_H
)

60 
	~"../ö˛ude/c⁄fig.h
"

62 
	~"lib√t_ã°.h
"

65 
	$maö
(
¨gc
, *
¨gv
[])

67 
c
;

68 
lib√t_t
 *
l
;

69 
u_l⁄g
 
§c_ù
, 
d°_ù
, 
Àngth
;

70 
lib√t_±ag_t
 
t
 = 0;

71 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

72 
u_ch¨
 *
∑ylﬂd
 = 
NULL
;

73 
u_l⁄g
 
∑ylﬂd_s
 = 0;

74 
u_ch¨
 
m¨kî
[
LIBNET_BGP4_MARKER_SIZE
];

76 
	`¥ötf
("libnet 1.1Öacket shaping: BGP4 open +Öayload[raw]\n");

81 
l
 = 
	`lib√t_öô
(

82 
LIBNET_RAW4
,

83 
NULL
,

84 
îrbuf
);

86 i‡(
l
 =
NULL
)

88 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

89 
	`exô
(
EXIT_FAILURE
);

92 
§c_ù
 = 0;

93 
d°_ù
 = 0;

94 
	`mem£t
(
m¨kî
, 0x1, 
LIBNET_BGP4_MARKER_SIZE
);

96 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:t:m:p:S:")Ë!
EOF
)

98 
c
)

107 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

109 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

110 
	`exô
(
EXIT_FAILURE
);

115 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

117 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

118 
	`exô
(
EXIT_FAILURE
);

123 
	`mem˝y
(
m¨kî
, 
›èrg
, 
LIBNET_BGP4_MARKER_SIZE
);

127 
∑ylﬂd
 = (
u_ch¨
 *)
›èrg
;

131 
∑ylﬂd_s
 = 
	`©oi
(
›èrg
);

135 
	`exô
(
EXIT_FAILURE
);

139 i‡(!
§c_ù
 || !
d°_ù
)

141 
	`ußge
(
¨gv
[0]);

142 
bad
;

145 i‡(
∑ylﬂd_s
 && !
∑ylﬂd
)

147 
∑ylﬂd
 = (
u_ch¨
 *)
	`mÆloc
(
∑ylﬂd_s
);

148 i‡(!
∑ylﬂd
)

150 
	`¥ötf
("mem‹yáŒoˇti⁄ faûed (%ld byã†ªque°ed)\n", 
∑ylﬂd_s
);

151 
bad
;

153 
	`mem£t
(
∑ylﬂd
, 0x41, 
∑ylﬂd_s
);

157 i‡(
∑ylﬂd
 && !
∑ylﬂd_s
)

159 
∑ylﬂd_s
 = 
	`°æí
((*)
∑ylﬂd
);

162 
Àngth
 = 
LIBNET_BGP4_OPEN_H
 + 
∑ylﬂd_s
;

163 
t
 = 
	`lib√t_buûd_bgp4_›í
(

168 
∑ylﬂd_s
,

169 
∑ylﬂd
,

170 
∑ylﬂd_s
,

171 
l
,

173 i‡(
t
 == -1)

175 
	`Ârötf
(
°dîr
, "C™'àbuûd BGP4 o≥¿hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

176 
bad
;

179 
Àngth
+=
LIBNET_BGP4_HEADER_H
;

180 
t
 = 
	`lib√t_buûd_bgp4_hódî
(

181 
m¨kî
,

182 
Àngth
,

183 
LIBNET_BGP4_OPEN
,

184 
NULL
,

186 
l
,

188 i‡(
t
 == -1)

190 
	`Ârötf
(
°dîr
, "C™'àbuûd BGP4 hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

191 
bad
;

194 
Àngth
+=
LIBNET_TCP_H
;

195 
t
 = 
	`lib√t_buûd_t˝
(

200 
TH_SYN
,

204 
Àngth
,

205 
NULL
,

207 
l
,

209 i‡(
t
 == -1)

211 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

212 
bad
;

215 
Àngth
+=
LIBNET_IPV4_H
;

216 
t
 = 
	`lib√t_buûd_ùv4
(

217 
Àngth
,

222 
IPPROTO_TCP
,

224 
§c_ù
,

225 
d°_ù
,

226 
NULL
,

228 
l
,

230 i‡(
t
 == -1)

232 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

233 
bad
;

239 
c
 = 
	`lib√t_wrôe
(
l
);

240 i‡(
c
 == -1)

242 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

243 
bad
;

247 
	`Ârötf
(
°dîr
, "WrŸê%d byã TCPÖackë; checkÅhêwúe.\n", 
c
);

250 
	`lib√t_de°roy
(
l
);

251  (
EXIT_SUCCESS
);

252 
bad
:

253 
	`lib√t_de°roy
(
l
);

254  (
EXIT_FAILURE
);

255 
	}
}

258 
	$ußge
(*
«me
)

260 
	`Ârötf
(
°dîr
,

263 
«me
);

264 
	}
}

	@/workspaces/libnet/sample/bgp4_update.c

77 #i‡(
HAVE_CONFIG_H
)

78 
	~"../ö˛ude/c⁄fig.h
"

80 
	~"lib√t_ã°.h
"

83 
	#£t_±r_™d_size
(
±r
, 
size
, 
vÆ
, 
Êag
) \

84 i‡(
size
 && !
±r
) \

86 
±r
 = (
u_ch¨
 *)
	`mÆloc
(
size
); \

87 i‡(!
±r
) \

89 
	`¥ötf
("mem‹yáŒoˇti⁄ faûed (%u byã†ªque°ed)\n", 
size
); \

90 
bad
; \

92 
	`mem£t
(
±r
, 
vÆ
, 
size
); \

93 
Êag
 = 1; \

96 i‡(
±r
 && !
size
) \

98 
size
 = 
	`°æí
((*)
±r
); \

99 }

	)

104 
	$maö
(
¨gc
, *
¨gv
[])

106 
c
;

107 
lib√t_t
 *
l
;

108 
u_l⁄g
 
§c_ù
, 
d°_ù
, 
Àngth
;

109 
lib√t_±ag_t
 
t
 = 0;

110 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

111 
u_ch¨
 *
∑ylﬂd
 = 
NULL
;

112 
u_l⁄g
 
∑ylﬂd_s
 = 0;

113 
u_ch¨
 
m¨kî
[
LIBNET_BGP4_MARKER_SIZE
];

115 
u_sh‹t
 
u_π_l
 = 0;

116 
u_ch¨
 *
wôhdøw_π
 = 
NULL
;

117 
Êag_w
 = 0;

118 
u_sh‹t
 
©å_l
 = 0;

119 
u_ch¨
 *
©å
 = 
NULL
;

120 
Êag_a
 = 0;

121 
u_sh‹t
 
öfo_l
 = 0;

122 
u_ch¨
 *
öfo
 = 
NULL
;

123 
Êag_i
 = 0;

125 
	`¥ötf
("libnet 1.1Öacket shaping: BGP4 update +Öayload[raw]\n");

130 
l
 = 
	`lib√t_öô
(

131 
LIBNET_RAW4
,

132 
NULL
,

133 
îrbuf
);

135 i‡(
l
 =
NULL
)

137 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

138 
	`exô
(
EXIT_FAILURE
);

141 
§c_ù
 = 0;

142 
d°_ù
 = 0;

143 
	`mem£t
(
m¨kî
, 0x1, 
LIBNET_BGP4_MARKER_SIZE
);

145 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:t:m:p:w:W:a:A:i:I:")Ë!
EOF
)

147 
c
)

156 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

158 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

159 
	`exô
(
EXIT_FAILURE
);

164 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

166 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

167 
	`exô
(
EXIT_FAILURE
);

172 
∑ylﬂd
 = (
u_ch¨
 *)
›èrg
;

173 
∑ylﬂd_s
 = 
	`°æí
((*)
∑ylﬂd
);

177 
wôhdøw_π
 = (
u_ch¨
 *)
›èrg
;

181 
u_π_l
 = 
	`©oi
(
›èrg
);

185 
©å
 = (
u_ch¨
 *)
›èrg
;

189 
©å_l
 = 
	`©oi
(
›èrg
);

193 
öfo
 = (
u_ch¨
 *)
›èrg
;

197 
öfo_l
 = 
	`©oi
(
›èrg
);

201 
	`exô
(
EXIT_FAILURE
);

205 i‡(!
§c_ù
 || !
d°_ù
)

207 
	`ußge
(
¨gv
[0]);

208 
bad
;

211 
	`£t_±r_™d_size
(
wôhdøw_π
, 
u_π_l
, 0x41, 
Êag_w
);

212 
	`£t_±r_™d_size
(
©å
, 
©å_l
, 0x42, 
Êag_a
);

213 
	`£t_±r_™d_size
(
öfo
, 
öfo_l
, 0x43, 
Êag_i
);

220 
Àngth
 = 
LIBNET_BGP4_UPDATE_H
 + 
u_π_l
 + 
©å_l
 + 
öfo_l
 + 
∑ylﬂd_s
;

221 
t
 = 
	`lib√t_buûd_bgp4_upd©e
(

222 
u_π_l
,

223 
wôhdøw_π
,

224 
©å_l
,

225 
©å
,

226 
öfo_l
,

227 
öfo
,

228 
∑ylﬂd
,

229 
∑ylﬂd_s
,

230 
l
,

232 i‡(
t
 == -1)

234 
	`Ârötf
(
°dîr
, "C™'àbuûd BGP4 upd©êhódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

235 
bad
;

238 
Àngth
+=
LIBNET_BGP4_HEADER_H
;

239 
t
 = 
	`lib√t_buûd_bgp4_hódî
(

240 
m¨kî
,

241 
Àngth
,

242 
LIBNET_BGP4_UPDATE
,

243 
NULL
,

245 
l
,

247 i‡(
t
 == -1)

249 
	`Ârötf
(
°dîr
, "C™'àbuûd BGP4 hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

250 
bad
;

253 
Àngth
+=
LIBNET_TCP_H
;

254 
t
 = 
	`lib√t_buûd_t˝
(

259 
TH_SYN
,

263 
Àngth
,

264 
NULL
,

266 
l
,

268 i‡(
t
 == -1)

270 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

271 
bad
;

274 
Àngth
+=
LIBNET_IPV4_H
;

275 
t
 = 
	`lib√t_buûd_ùv4
(

276 
Àngth
,

281 
IPPROTO_TCP
,

283 
§c_ù
,

284 
d°_ù
,

285 
NULL
,

287 
l
,

289 i‡(
t
 == -1)

291 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

292 
bad
;

298 
c
 = 
	`lib√t_wrôe
(
l
);

299 i‡(
c
 == -1)

301 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

302 
bad
;

306 
	`Ârötf
(
°dîr
, "WrŸê%d byã TCPÖackë; checkÅhêwúe.\n", 
c
);

309 i‡(
Êag_w
Ë
	`‰ì
(
wôhdøw_π
);

310 i‡(
Êag_a
Ë
	`‰ì
(
©å
);

311 i‡(
Êag_i
Ë
	`‰ì
(
öfo
);

313 
	`lib√t_de°roy
(
l
);

314  (
EXIT_SUCCESS
);

315 
bad
:

316 i‡(
Êag_w
Ë
	`‰ì
(
wôhdøw_π
);

317 i‡(
Êag_a
Ë
	`‰ì
(
©å
);

318 i‡(
Êag_i
Ë
	`‰ì
(
öfo
);

320 
	`lib√t_de°roy
(
l
);

321  (
EXIT_FAILURE
);

322 
	}
}

325 
	$ußge
(*
«me
)

327 
	`Ârötf
(
°dîr
,

333 
«me
);

334 
	}
}

	@/workspaces/libnet/sample/cdp.c

37 #i‡(
HAVE_CONFIG_H
)

38 
	~"../ö˛ude/c⁄fig.h
"

40 
	~"lib√t_ã°.h
"

44 
	$maö
(
¨gc
, *
¨gv
[])

46 
c
, 
Àn
, 
ödex
;

47 
lib√t_t
 *
l
;

48 
lib√t_±ag_t
 
t
;

49 
u_ch¨
 *
vÆue
;

50 
u_ch¨
 
vÆues
[100];

51 
u_sh‹t
 
tmp
;

52 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

53 
uöt8_t
 
oui
[3] = { 0x00, 0x00, 0x0c };

54 
uöt8_t
 
cdp_mac
[6] = {0x01, 0x0, 0xc, 0xcc, 0xcc, 0xcc};

56 i‡(
¨gc
 != 3)

58 
	`Ârötf
(
°dîr
, "ußgê%†devi˚ devi˚-id\n", 
¨gv
[0]);

59  (
EXIT_FAILURE
);

62 
	`Ârötf
(
°dîr
, "cdppoke...\n");

64 
l
 = 
	`lib√t_öô
(
LIBNET_LINK
, 
¨gv
[1], 
îrbuf
);

65 i‡(
l
 =
NULL
)

67 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

68  (
EXIT_FAILURE
);

72 
	`mem£t
(
vÆues
, 0, (values));

73 
ödex
 = 0;

75 
tmp
 = 
	`ht⁄s
(
LIBNET_CDP_VERSION
);

76 
	`mem˝y
(
vÆues
, &
tmp
, 2);

77 
ödex
 += 2;

78 
tmp
 = 
	`ht⁄s
(9);

79 
	`mem˝y
(
vÆues
 + 
ödex
, &
tmp
, 2);

80 
ödex
 += 2;

81 
	`mem˝y
(
vÆues
 + 
ödex
, (
u_ch¨
 *)"1.1.1", 5);

82 
ödex
 += 5;

85 
vÆue
 = (
u_ch¨
 *)
¨gv
[2];

86 
Àn
 = 
	`°æí
(
¨gv
[2]);

89 
t
 = 
	`lib√t_buûd_cdp
(

94 
Àn
,

95 
vÆue
,

96 
vÆues
,

97 
ödex
,

98 
l
,

100 i‡(
t
 == -1)

102 
	`Ârötf
(
°dîr
, "C™'àbuûd CDP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

103 
bad
;

107 
t
 = 
	`lib√t_buûd_802_2¢≠
(

108 
LIBNET_SAP_SNAP
,

109 
LIBNET_SAP_SNAP
,

111 
oui
,

113 
NULL
,

115 
l
,

117 i‡(
t
 == -1)

119 
	`Ârötf
(
°dîr
, "C™'àbuûd SNAP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

120 
bad
;

124 
t
 = 
	`lib√t_buûd_802_3
(

125 
cdp_mac
,

126 (
uöt8_t
 *)
	`lib√t_gë_hwaddr
(
l
),

127 
LIBNET_802_2_H
 + 
LIBNET_802_2SNAP_H
 + 
LIBNET_CDP_H
,

128 
NULL
,

130 
l
,

132 i‡(
t
 == -1)

134 
	`Ârötf
(
°dîr
, "C™'àbuûd 802.3 hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

135 
bad
;

139 
c
 = 
	`lib√t_wrôe
(
l
);

140 i‡(
c
 == -1)

142 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

143 
bad
;

147 
	`Ârötf
(
°dîr
, "WrŸê%d byã CDP fømê\"%s\"\n", 
c
, 
¨gv
[2]);

149 
	`lib√t_de°roy
(
l
);

150  (
EXIT_SUCCESS
);

151 
bad
:

152 
	`lib√t_de°roy
(
l
);

153  (
EXIT_FAILURE
);

154 
	}
}

	@/workspaces/libnet/sample/dhcp_discover.c

34 
	~"lib√t_ã°.h
"

37 
	$ußge
(*
¥og
)

39 
	`Ârötf
(
°dîr
, "Ußge: %†öãrÁ˚\n", 
¥og
);

40 
	`exô
(1);

41 
	}
}

45 
	$maö
(
¨gc
, *
¨gv
[])

47 *
ötf
;

48 
u_l⁄g
 
§c_ù
, 
›ti⁄s_Àn
, 
‹ig_Àn
;

49 
i
;

51 
lib√t_t
 *
l
;

52 
lib√t_±ag_t
 
t
;

53 
lib√t_±ag_t
 
ù
;

54 
lib√t_±ag_t
 
udp
;

55 
lib√t_±ag_t
 
dh˝
;

56 
lib√t_ëhî_addr
 *
ëhaddr
;

57 
lib√t_°©s
 
ls
;

59 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

61 
u_ch¨
 
›ti⁄s_ªq
[] = { 
LIBNET_DHCP_SUBNETMASK
,

62 
LIBNET_DHCP_BROADCASTADDR
, 
LIBNET_DHCP_TIMEOFFSET
,

63 
LIBNET_DHCP_ROUTER
, 
LIBNET_DHCP_DOMAINNAME
,

64 
LIBNET_DHCP_DNS
, 
LIBNET_DHCP_HOSTNAME
 };

65 
u_ch¨
 *
›ti⁄s
;

66 
u_ch¨
 
íë_d°
[6] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

67 
u_ch¨
 *
tmp
;

69 i‡(
¨gc
 != 2)

71 
	`ußge
(
¨gv
[0]);

73 
ötf
 = 
¨gv
[1];

75 
l
 = 
	`lib√t_öô
(
LIBNET_LINK
, 
ötf
, 
îrbuf
);

76 i‡(!
l
)

78 
	`Ârötf
(
°dîr
, "lib√t_öô: %s", 
îrbuf
);

79 
	`exô
(
EXIT_FAILURE
);

83 
§c_ù
 = 
	`lib√t_gë_ùaddr4
(
l
);;

85 i‡((
ëhaddr
 = 
	`lib√t_gë_hwaddr
(
l
)Ë=
NULL
)

87 
	`Ârötf
(
°dîr
, "lib√t_gë_hwaddr: %s\n", 
	`lib√t_gëîr‹
(
l
));

88 
	`exô
(
EXIT_FAILURE
);

91 
	`¥ötf
("ùádd∏ : %s\n", 
	`lib√t_addr2«me4
(
§c_ù
,

92 
LIBNET_DONT_RESOLVE
));

93 
	`¥ötf
("etháddr : ");

94 
i
 = 0; i < 6; i++)

96 
	`¥ötf
("%2.2x", 
ëhaddr
->
ëhî_addr_o˘ë
[
i
]);

97 i‡(
i
 != 5)

99 
	`¥ötf
(":");

102 
	`¥ötf
("\n");

106 
i
 = 0;

108 
›ti⁄s_Àn
 = 3;

111 
›ti⁄s
 = 
	`mÆloc
(3);

112 
›ti⁄s
[
i
++] = 
LIBNET_DHCP_MESSAGETYPE
;

113 
›ti⁄s
[
i
++] = 1;

114 
›ti⁄s
[
i
++] = 
LIBNET_DHCP_MSGDISCOVER
;

116 
‹ig_Àn
 = 
›ti⁄s_Àn
;

118 
›ti⁄s_Àn
 +(
›ti⁄s_ªq
) + 2;

120 
tmp
 = 
	`mÆloc
(
›ti⁄s_Àn
);

121 
	`mem˝y
(
tmp
, 
›ti⁄s
, 
‹ig_Àn
);

122 
	`‰ì
(
›ti⁄s
);

123 
›ti⁄s
 = 
tmp
;

126 
›ti⁄s
[
i
++] = 
LIBNET_DHCP_PARAMREQUEST
;

127 
›ti⁄s
[
i
++] = (
›ti⁄s_ªq
);

128 
	`mem˝y
(
›ti⁄s
 + 
i
, 
›ti⁄s_ªq
, (options_req));

129 
i
 +(
›ti⁄s_ªq
);

132 i‡(
§c_ù
)

134 
‹ig_Àn
 = 
›ti⁄s_Àn
;

135 
›ti⁄s_Àn
 +2 + (
§c_ù
);

137 
tmp
 = 
	`mÆloc
(
›ti⁄s_Àn
);

138 
	`mem˝y
(
tmp
, 
›ti⁄s
, 
‹ig_Àn
);

139 
	`‰ì
(
›ti⁄s
);

140 
›ti⁄s
 = 
tmp
;

142 
›ti⁄s
[
i
++] = 
LIBNET_DHCP_DISCOVERADDR
;

143 
›ti⁄s
[
i
++] = (
§c_ù
);

144 
	`mem˝y
(
›ti⁄s
 + 
i
, (*)&
§c_ù
, (src_ip));

145 
i
 +(
§c_ù
);

149 
‹ig_Àn
 = 
›ti⁄s_Àn
;

150 
›ti⁄s_Àn
 += 1;

151 
tmp
 = 
	`mÆloc
(
›ti⁄s_Àn
);

152 
	`mem˝y
(
tmp
, 
›ti⁄s
, 
‹ig_Àn
);

153 
	`‰ì
(
›ti⁄s
);

154 
›ti⁄s
 = 
tmp
;

155 
›ti⁄s
[
i
++] = 
LIBNET_DHCP_END
;

160 i‡(
›ti⁄s_Àn
 + 
LIBNET_DHCPV4_H
 < 
LIBNET_BOOTP_MIN_LEN
)

162 
‹ig_Àn
 = 
›ti⁄s_Àn
;

163 
›ti⁄s_Àn
 = 
LIBNET_BOOTP_MIN_LEN
 - 
LIBNET_DHCPV4_H
;

165 
tmp
 = 
	`mÆloc
(
›ti⁄s_Àn
);

166 
	`mem˝y
(
tmp
, 
›ti⁄s
, 
‹ig_Àn
);

167 
	`‰ì
(
›ti⁄s
);

168 
›ti⁄s
 = 
tmp
;

170 
	`mem£t
(
›ti⁄s
 + 
i
, 0, 
›ti⁄s_Àn
 - i);

173 
dh˝
 = 
	`lib√t_buûd_dh˝v4
(

174 
LIBNET_DHCP_REQUEST
,

185 
ëhaddr
->
ëhî_addr_o˘ë
,

186 
NULL
,

187 
NULL
,

188 
›ti⁄s
,

189 
›ti⁄s_Àn
,

190 
l
,

193 
udp
 = 
	`lib√t_buûd_udp
(

196 
LIBNET_UDP_H
 + 
LIBNET_DHCPV4_H
 + 
›ti⁄s_Àn
,

198 
NULL
,

200 
l
,

203 
ù
 = 
	`lib√t_buûd_ùv4
(

204 
LIBNET_IPV4_H
 + 
LIBNET_UDP_H
 + 
LIBNET_DHCPV4_H


205 + 
›ti⁄s_Àn
,

210 
IPPROTO_UDP
,

212 
§c_ù
,

213 
	`öë_addr
("255.255.255.255"),

214 
NULL
,

216 
l
,

219 
t
 = 
	`lib√t_autobuûd_ëhî√t
(

220 
íë_d°
,

221 
ETHERTYPE_IP
,

222 
l
);

224 i‡(
	`lib√t_wrôe
(
l
) == -1)

226 
	`Ârötf
(
°dîr
, " %s:Üib√t_wrôe: %s\n", 
¨gv
[0],

227 
	`°ªº‹
(
î∫o
));

228 
	`exô
(
EXIT_FAILURE
);

231 
	`lib√t_°©s
(
l
, &
ls
);

232 
	`Ârötf
(
°dîr
, "Packets sent: %lld\n"

235 ()
ls
.
∑ckës_£¡
, (Ós.
∑ckë_îr‹s
,

236 ()
ls
.
byãs_wrôãn
);

237 
	`lib√t_de°roy
(
l
);

239 
	`‰ì
(
›ti⁄s
);

241 
	`exô
(0);

243 
	`exô
(0);

244 
	}
}

	@/workspaces/libnet/sample/dns.c

33 
	~"lib√t_ã°.h
"

36 
	$ußge
(*
¥og
)

38 
	`Ârötf
(
°dîr
, "Ußge: %†-d d°_ù -q quîy_ho° [-†§c_ù] [-t]\n", 
¥og
);

39 
	`exô
(1);

40 
	}
}

44 
	$maö
(
¨gc
, *
¨gv
[])

46 
c
;

47 
u_l⁄g
 
§c_ù
 = 0, 
d°_ù
 = 0;

48 
u_sh‹t
 
ty≥
 = 
LIBNET_UDP_DNSV4_H
;

49 
lib√t_t
 *
l
;

51 
lib√t_±ag_t
 
ù
;

52 
lib√t_±ag_t
 
±ag4
;

53 
lib√t_±ag_t
 
dns
;

55 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

56 *
quîy
 = 
NULL
;

57 
∑ylﬂd
[1024];

58 
u_sh‹t
 
∑ylﬂd_s
;

60 
	`¥ötf
("libnet 1.1Öacket shaping: DNSv4[raw]\n");

65 
l
 = 
	`lib√t_öô
(

66 
LIBNET_RAW4
,

67 
NULL
,

68 
îrbuf
);

70 i‡(!
l
)

72 
	`Ârötf
(
°dîr
, "lib√t_öô: %s", 
îrbuf
);

73 
	`exô
(
EXIT_FAILURE
);

79 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:q:t")Ë!
EOF
)

81 
c
)

85 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

87 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

88 
	`exô
(
EXIT_FAILURE
);

92 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

94 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

95 
	`exô
(
EXIT_FAILURE
);

99 
quîy
 = 
›èrg
;

102 
ty≥
 = 
LIBNET_TCP_DNSV4_H
;

105 
	`exô
(
EXIT_FAILURE
);

109 i‡(!
§c_ù
)

111 
§c_ù
 = 
	`lib√t_gë_ùaddr4
(
l
);

114 i‡(!
d°_ù
 || !
quîy
)

116 
	`ußge
(
¨gv
[0]);

117 
	`exô
(
EXIT_FAILURE
);

123 
∑ylﬂd_s
 = 
	`¢¥ötf
(
∑ylﬂd
, Öayload, "%c%s%c%c%c%c%c",

124 ()(
	`°æí
(
quîy
)&0xff), query, 0x00, 0x00, 0x01, 0x00, 0x01);

129 
dns
 = 
	`lib√t_buûd_dnsv4
(

130 
ty≥
,

137 (
uöt8_t
 *)
∑ylﬂd
,

138 
∑ylﬂd_s
,

139 
l
,

143 i‡(
dns
 == -1)

145 
	`Ârötf
(
°dîr
, "C™'àbuûd DNSÖackë: %s\n", 
	`lib√t_gëîr‹
(
l
));

146 
bad
;

149 i‡(
ty≥
 =
LIBNET_TCP_DNSV4_H
)

151 
±ag4
 = 
	`lib√t_buûd_t˝
(

156 
TH_PUSH
|
TH_ACK
,

160 
LIBNET_TCP_H
 + 
LIBNET_TCP_DNSV4_H
 + 
∑ylﬂd_s
,

161 
NULL
,

163 
l
,

166 i‡(
±ag4
 == -1)

168 
	`Ârötf
(
°dîr
, "C™'àbuûd UDP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

169 
bad
;

173 
ù
 = 
	`lib√t_buûd_ùv4
(

174 
LIBNET_IPV4_H
 + 
LIBNET_TCP_H
 + 
ty≥
 + 
∑ylﬂd_s
,

179 
IPPROTO_TCP
,

181 
§c_ù
,

182 
d°_ù
,

183 
NULL
,

185 
l
,

188 i‡(
ù
 == -1)

190 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

191 
	`exô
(
EXIT_FAILURE
);

197 
±ag4
 = 
	`lib√t_buûd_udp
(

200 
LIBNET_UDP_H
 + 
LIBNET_UDP_DNSV4_H
 + 
∑ylﬂd_s
,

202 
NULL
,

204 
l
,

207 i‡(
±ag4
 == -1)

209 
	`Ârötf
(
°dîr
, "C™'àbuûd UDP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

210 
bad
;

214 
ù
 = 
	`lib√t_buûd_ùv4
(

215 
LIBNET_IPV4_H
 + 
LIBNET_UDP_H
 + 
ty≥
 + 
∑ylﬂd_s
,

220 
IPPROTO_UDP
,

222 
§c_ù
,

223 
d°_ù
,

224 
NULL
,

226 
l
,

229 i‡(
ù
 == -1)

231 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

232 
	`exô
(
EXIT_FAILURE
);

239 
c
 = 
	`lib√t_wrôe
(
l
);

240 i‡(
c
 == -1)

242 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

243 
bad
;

247 
	`Ârötf
(
°dîr
, "WrŸê%d byã DNSÖackë; checkÅhêwúe.\n", 
c
);

249 
	`lib√t_de°roy
(
l
);

250  (
EXIT_SUCCESS
);

251 
bad
:

252 
	`lib√t_de°roy
(
l
);

253  (
EXIT_FAILURE
);

254 
	}
}

	@/workspaces/libnet/sample/dot1x.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
c
;

42 
lib√t_t
 *
l
;

43 
lib√t_±ag_t
 
t
;

44 
u_ch¨
 
óp_d°
[6] = {0x01, 0x80, 0xc2, 0x00, 0x00, 0x03};

45 *
devi˚
 = 
NULL
;

46 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

48 
∑ylﬂd
[] = {0x01, 0x0a, 0x00, 0x7f, 0x03, 0x05};

50 
	`¥ötf
("libnet 1.1Öacket shaping: dot1x\n");

52 i‡(
¨gc
 > 1)

54 
devi˚
 = 
¨gv
[1];

56 
l
 = 
	`lib√t_öô
(

57 
LIBNET_LINK_ADV
,

58 
devi˚
,

59 
îrbuf
);

61 i‡(
l
 =
NULL
)

63 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

64 
	`exô
(
EXIT_FAILURE
);

67 
t
 = 
	`lib√t_buûd_802_1x
(

69 
LIBNET_802_1X_PACKET
,

70 (
∑ylﬂd
),

71 (
uöt8_t
 *)
∑ylﬂd
,

72 (
∑ylﬂd
),

73 
l
,

75 i‡(
t
 == -1)

77 
	`Ârötf
(
°dîr
, "C™'àbuûd dŸ1x hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

78 
bad
;

81 
t
 = 
	`lib√t_autobuûd_ëhî√t
(

82 
óp_d°
,

83 
ETHERTYPE_EAP
,

84 
l
);

85 i‡(
t
 == -1)

87 
	`Ârötf
(
°dîr
, "C™'àbuûdÉthî√àhódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

88 
bad
;

94 
c
 = 
	`lib√t_wrôe
(
l
);

96 i‡(
c
 == -1)

98 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

99 
bad
;

103 
	`Ârötf
(
°dîr
, "Wrote %d byte dot1xÖacket from context \"%s\"; "

104 "checkÅhêwúe.\n", 
c
, 
	`lib√t_cq_gëœbñ
(
l
));

106 
	`lib√t_de°roy
(
l
);

107  (
EXIT_SUCCESS
);

108 
bad
:

109 
	`lib√t_de°roy
(
l
);

110  (
EXIT_FAILURE
);

111 
	}
}

	@/workspaces/libnet/sample/fddi_tcp1.c

31 #i‡(
HAVE_CONFIG_H
)

32 
	~"../ö˛ude/c⁄fig.h
"

34 
	~"lib√t_ã°.h
"

37 
	$maö
(
¨gc
, *
¨gv
[])

39 
c
;

40 *
˝
;

41 
lib√t_t
 *
l
;

42 
lib√t_±ag_t
 
t
;

43 *
∑ylﬂd
;

44 
u_sh‹t
 
∑ylﬂd_s
;

45 
u_l⁄g
 
§c_ù
, 
d°_ù
;

46 
u_sh‹t
 
§c_¥t
, 
d°_¥t
;

47 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

49 
	`¥ötf
("libnet 1.1Öacket shaping: TCP (over FDDI) [link]\n");

56 
l
 = 
	`lib√t_öô
(

57 
LIBNET_LINK
,

59 
îrbuf
);

61 i‡(
l
 =
NULL
)

63 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

64 
	`exô
(
EXIT_FAILURE
);

67 
§c_ù
 = 0;

68 
d°_ù
 = 0;

69 
§c_¥t
 = 0;

70 
d°_¥t
 = 0;

71 
∑ylﬂd
 = 
NULL
;

72 
∑ylﬂd_s
 = 0;

73 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:p:")Ë!
EOF
)

75 
c
)

84 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

86 
	`ußge
(
¨gv
[0]);

88 *
˝
++ = 0;

89 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

90 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

92 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

93 
	`exô
(
EXIT_FAILURE
);

97 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

99 
	`ußge
(
¨gv
[0]);

101 *
˝
++ = 0;

102 
§c_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

103 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

105 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

106 
	`exô
(
EXIT_FAILURE
);

110 
∑ylﬂd
 = 
›èrg
;

111 
∑ylﬂd_s
 = 
	`°æí
(
∑ylﬂd
);

114 
	`exô
(
EXIT_FAILURE
);

118 i‡(!
§c_ù
 || !
§c_¥t
 || !
d°_ù
 || !
d°_¥t
)

120 
	`ußge
(
¨gv
[0]);

121 
	`exô
(
EXIT_FAILURE
);

125 
t
 = 
	`lib√t_buûd_t˝
(

126 
§c_¥t
,

127 
d°_¥t
,

130 
TH_SYN
,

134 
LIBNET_TCP_H
 + 
∑ylﬂd_s
,

135 (
uöt8_t
 *)
∑ylﬂd
,

136 
∑ylﬂd_s
,

137 
l
,

139 i‡(
t
 == -1)

141 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

142 
bad
;

145 
t
 = 
	`lib√t_buûd_ùv4
(

146 
LIBNET_IPV4_H
 + 
LIBNET_TCP_H
 + 
∑ylﬂd_s
,

151 
IPPROTO_TCP
,

153 
§c_ù
,

154 
d°_ù
,

155 
NULL
,

157 
l
,

159 i‡(
t
 == -1)

161 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

162 
bad
;

165 
t
 = 
	`lib√t_buûd_fddi
(

166 
LIBNET_FDDI_FC_REQD
 | 0x04,

167 
fddi_d°
,

168 
fddi_§c
,

169 
LIBNET_SAP_SNAP
,

170 
LIBNET_SAP_SNAP
,

172 
‹g_code
,

173 
FDDI_TYPE_IP
,

174 
NULL
,

176 
l
,

178 i‡(
t
 == -1)

180 
	`Ârötf
(
°dîr
, "C™'àbuûd fddòhódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

181 
bad
;

187 
c
 = 
	`lib√t_wrôe
(
l
);

188 i‡(
c
 == -1)

190 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

191 
bad
;

195 
	`Ârötf
(
°dîr
, "WrŸê%d byã TCPÖackë; checkÅhêwúe.\n", 
c
);

197 
	`lib√t_de°roy
(
l
);

198  (
EXIT_SUCCESS
);

199 
bad
:

200 
	`lib√t_de°roy
(
l
);

201  (
EXIT_FAILURE
);

202 
	}
}

205 
	$ußge
(*
«me
)

207 
	`Ârötf
(
°dîr
,

210 
«me
);

211 
	}
}

	@/workspaces/libnet/sample/fddi_tcp2.c

31 #i‡(
HAVE_CONFIG_H
)

32 
	~"../ö˛ude/c⁄fig.h
"

34 
	~"lib√t_ã°.h
"

37 
	$maö
(
¨gc
, *
¨gv
[])

39 
c
;

40 *
˝
;

41 
lib√t_t
 *
l
;

42 
lib√t_±ag_t
 
t
;

43 *
∑ylﬂd
;

44 
u_sh‹t
 
∑ylﬂd_s
;

45 
u_l⁄g
 
§c_ù
, 
d°_ù
;

46 
u_sh‹t
 
§c_¥t
, 
d°_¥t
;

47 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

49 
	`¥ötf
("libnet 1.1Öacket shaping: TCP (over FDDI) [link]\n");

56 
l
 = 
	`lib√t_öô
(

57 
LIBNET_LINK
,

59 
îrbuf
);

61 i‡(
l
 =
NULL
)

63 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

64 
	`exô
(
EXIT_FAILURE
);

67 
§c_ù
 = 0;

68 
d°_ù
 = 0;

69 
§c_¥t
 = 0;

70 
d°_¥t
 = 0;

71 
∑ylﬂd
 = 
NULL
;

72 
∑ylﬂd_s
 = 0;

73 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:p:")Ë!
EOF
)

75 
c
)

84 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

86 
	`ußge
(
¨gv
[0]);

88 *
˝
++ = 0;

89 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

90 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

92 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

93 
	`exô
(
EXIT_FAILURE
);

97 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

99 
	`ußge
(
¨gv
[0]);

101 *
˝
++ = 0;

102 
§c_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

103 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

105 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

106 
	`exô
(
EXIT_FAILURE
);

110 
∑ylﬂd
 = 
›èrg
;

111 
∑ylﬂd_s
 = 
	`°æí
(
∑ylﬂd
);

114 
	`exô
(
EXIT_FAILURE
);

118 i‡(!
§c_ù
 || !
§c_¥t
 || !
d°_ù
 || !
d°_¥t
)

120 
	`ußge
(
¨gv
[0]);

121 
	`exô
(
EXIT_FAILURE
);

125 
t
 = 
	`lib√t_buûd_t˝
(

126 
§c_¥t
,

127 
d°_¥t
,

130 
TH_SYN
,

134 
LIBNET_TCP_H
 + 
∑ylﬂd_s
,

135 (
uöt8_t
 *)
∑ylﬂd
,

136 
∑ylﬂd_s
,

137 
l
,

139 i‡(
t
 == -1)

141 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

142 
bad
;

145 
t
 = 
	`lib√t_buûd_ùv4
(

146 
LIBNET_IPV4_H
 + 
LIBNET_TCP_H
 + 
∑ylﬂd_s
,

151 
IPPROTO_TCP
,

153 
§c_ù
,

154 
d°_ù
,

155 
NULL
,

157 
l
,

159 i‡(
t
 == -1)

161 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

162 
bad
;

165 
t
 = 
	`lib√t_autobuûd_fddi
(

166 
LIBNET_FDDI_FC_REQD
 | 0x04,

167 
fddi_d°
,

168 
LIBNET_SAP_SNAP
,

169 
LIBNET_SAP_SNAP
,

171 
‹g_code
,

172 
FDDI_TYPE_IP
,

173 
l
);

174 i‡(
t
 == -1)

176 
	`Ârötf
(
°dîr
, "C™'àbuûd fddòhódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

177 
bad
;

183 
c
 = 
	`lib√t_wrôe
(
l
);

184 i‡(
c
 == -1)

186 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

187 
bad
;

191 
	`Ârötf
(
°dîr
, "WrŸê%d byã TCPÖackë; checkÅhêwúe.\n", 
c
);

193 
	`lib√t_de°roy
(
l
);

194  (
EXIT_SUCCESS
);

195 
bad
:

196 
	`lib√t_de°roy
(
l
);

197  (
EXIT_FAILURE
);

198 
	}
}

201 
	$ußge
(*
«me
)

203 
	`Ârötf
(
°dîr
,

206 
«me
);

207 
	}
}

	@/workspaces/libnet/sample/get_addr.c

33 
	~"lib√t_ã°.h
"

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
c
;

39 
u_l⁄g
 
i
;

40 
lib√t_t
 *
l
;

41 *
devi˚
 = 
NULL
;

42 
lib√t_ëhî_addr
 *
e
;

43 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

45 
	`¥ötf
("libnet 1.1áddress getter\n");

47 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "i:")Ë!
EOF
)

49 
c
)

52 
devi˚
 = 
›èrg
;

55 
	`exô
(
EXIT_FAILURE
);

62 
l
 = 
	`lib√t_öô
(

63 
LIBNET_LINK
,

64 
devi˚
,

65 
îrbuf
);

67 i‡(
l
 =
NULL
)

69 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

70 
	`exô
(
EXIT_FAILURE
);

73 
	`¥ötf
("I¡îÁ˚:\t%s\n", 
	`lib√t_gëdevi˚
(
l
));

74 
e
 = 
	`lib√t_gë_hwaddr
(
l
);

75 i‡(
e
 =
NULL
)

77 
	`Ârötf
(
°dîr
, "C™'àgë h¨dw¨êaddªss: %s\n", 
	`lib√t_gëîr‹
(
l
));

81 
	`¥ötf
("MACáddress:\t");

82 
c
 = 0; c < 6; c++)

84 
	`¥ötf
("%2.2x", 
e
->
ëhî_addr_o˘ë
[
c
]);

85 i‡(
c
 != 5)

87 
	`¥ötf
(":");

90 
	`¥ötf
("\n");

93 
i
 = 
	`lib√t_gë_ùaddr4
(
l
);

94 i‡(
i
 == -1)

96 
	`Ârötf
(
°dîr
, "C™'àgë i∞addªss: %s\n", 
	`lib√t_gëîr‹
(
l
));

100 
	`¥ötf
("IPáddress:\t");

101 
	`¥ötf
("%s\n", 
	`lib√t_addr2«me4
(
i
, 
LIBNET_DONT_RESOLVE
));

103 
	`exô
(
EXIT_SUCCESS
);

104 
	}
}

	@/workspaces/libnet/sample/gre.c

78 #i‡(
HAVE_CONFIG_H
)

79 
	~"../ö˛ude/c⁄fig.h
"

81 
	~"lib√t_ã°.h
"

85 
	$ußge
(*
¥og
)

87 
	`Ârötf
(
°dîr
, "Ußge: %s\n", 
¥og
);

88 
	`Ârötf
(
°dîr
, "\t IP options: -d <dst ip> [-s src ip]\n");

89 
	`Ârötf
(
°dîr
, "\t GRE options: [-v] set RFC 2637 mode (PPP in GRE) (default is RFC 1701 for IP in GRE)\n");

90 
	`Ârötf
(
°dîr
, "\t\t RFC 1701 options (IP in GRE):\n");

91 
	`Ârötf
(
°dîr
, "\t\t [-c sum] [-rÑouting] [-k key] [-n seqnum]\n");

92 
	`Ârötf
(
°dîr
, "\t\t IP in GRE options: [-S src ip] [-D dst ip]\n");

93 
	`Ârötf
(
°dîr
, "\t\t RFC 2637 options (PPP in GRE):\n");

94 
	`Ârötf
(
°dîr
, "\t\t [-aáck]\n");

96 
	`exô
(1);

97 
	}
}

109 
	$maö
(
¨gc
, *
¨gv
[])

111 
c
;

112 
lib√t_t
 *
l
;

113 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

114 
u_l⁄g
 
§c_ù
 = 0, 
d°_ù
 = 0, 
gª_§c_ù
 = 0, 
gª_d°_ù
 = 0;

115 
u_sh‹t
 
checksum
 = 0, 
off£t
 = 0;

116 
u_ch¨
 *
routög
 = 
NULL
;

117 
u_l⁄g
 
key
 = 0, 
£q
 = 0;

118 
u_sh‹t
 
gª_Êags
 = 0;

119 
u_l⁄g
 
Àn
;

120 
u_l⁄g
 
size
 = 0;

121 
lib√t_±ag_t
 
t
;

123 
	`¥ötf
("libnet 1.1Öacket shaping: GRE [link]\n");

128 
l
 = 
	`lib√t_öô
(

129 
LIBNET_LINK
,

130 
NULL
,

131 
îrbuf
);

133 i‡(!
l
)

135 
	`Ârötf
(
°dîr
, "lib√t_öô: %s", 
îrbuf
);

136 
	`exô
(
EXIT_FAILURE
);

142 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:D:S:c:r:k:n:va:")Ë!
EOF
)

144 
c
)

148 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

150 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

151 
	`exô
(
EXIT_FAILURE
);

155 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

157 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

158 
	`exô
(
EXIT_FAILURE
);

162 i‡((
gª_d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

164 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªs†(GRE): %s\n", 
›èrg
);

165 
	`exô
(
EXIT_FAILURE
);

169 i‡((
gª_§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

171 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªs†(GRE): %s\n", 
›èrg
);

172 
	`exô
(
EXIT_FAILURE
);

176 
checksum
 = 
	`©oi
(
›èrg
);

177 
gª_Êags
|=
GRE_CSUM
;

180 
routög
 = (
u_ch¨
 *)
›èrg
;

181 
gª_Êags
|=
GRE_ROUTING
;

184 
key
 = 
	`©oi
(
›èrg
);

185 
gª_Êags
|=
GRE_KEY
;

188 
£q
 = 
	`©oi
(
›èrg
);

189 
gª_Êags
|=
GRE_SEQ
;

192 
gª_Êags
|=(
GRE_VERSION_1
|
GRE_KEY
);

195 i‡(! (
gª_Êags
 & 
GRE_VERSION_1
))

196 
	`ußge
(
¨gv
[0]);

197 
£q
 = 
	`©oi
(
›èrg
);

198 
gª_Êags
|=
GRE_ACK
;

201 
	`exô
(
EXIT_FAILURE
);

208 i‡(!
d°_ù
)

210 
	`ußge
(
¨gv
[0]);

213 i‡(!
§c_ù
)

215 
§c_ù
 = 
	`lib√t_gë_ùaddr4
(
l
);

218 i‡(!
gª_d°_ù
)

220 
gª_d°_ù
 = 
	`lib√t_gë_¥™d
(
LIBNET_PRu32
);

223 i‡(!
gª_§c_ù
)

225 
gª_§c_ù
 = 
	`lib√t_gë_¥™d
(
LIBNET_PRu32
);

229 i‡–(
gª_Êags
 & 
GRE_VERSION_MASK
) == 0)

234 
size
 = 
LIBNET_TCP_H
;

235 
t
 = 
	`lib√t_buûd_t˝
(

240 
TH_SYN
,

244 
size
,

245 
NULL
,

247 
l
,

249 i‡(
t
 == -1)

251 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP hódî (GRE): %s\n", 
	`lib√t_gëîr‹
(
l
));

252 
bad
;

255 
size
 +
LIBNET_IPV4_H
;

256 
t
 = 
	`lib√t_buûd_ùv4
(

257 
size
,

262 
IPPROTO_TCP
,

264 
gª_§c_ù
,

265 
gª_d°_ù
,

266 
NULL
,

268 
l
,

270 i‡(
t
 == -1)

272 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî (GRE): %s\n", 
	`lib√t_gëîr‹
(
l
));

273 
bad
;

277 i‡–(
gª_Êags
 & 
GRE_VERSION_MASK
) == 1)

279 
off£t
 = 
	`lib√t_gë_¥™d
(
LIBNET_PRu16
);

280 i‡(~
gª_Êags
 & 
GRE_ACK
)

282 
u_ch¨
 
µp
[4] = "\x00\x01";

283 
checksum
 = 2;

284 
size
 = 2;

285 
gª_Êags
|=
GRE_SEQ
;

286 
key
 = 
	`lib√t_gë_¥™d
(
LIBNET_PRu32
);

291 
t
 = 
	`lib√t_buûd_d©a
(

292 
µp
,

293 
checksum
,

294 
l
,

297 i‡(
t
 == -1)

299 
	`Ârötf
(
°dîr
, "C™'àbuûd PPP hódî (GRE): %s\n", 
	`lib√t_gëîr‹
(
l
));

300 
bad
;

303 
gª_Êags
&=~(
GRE_CSUM
|
GRE_ROUTING
);

309 i‡(
gª_Êags
 & 
GRE_ROUTING
)

312 
size
 +
LIBNET_GRE_SRE_H
;

313 
t
 = 
	`lib√t_buûd_gª_œ°_§e
(
l
, 0);

314 i‡(
t
 == -1)

316 
	`Ârötf
(
°dîr
, "C™'àbuûd GREÜa° SRE hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

317 
bad
;

319 
size
 +
LIBNET_GRE_SRE_H
 + 
	`°æí
((*)
routög
);

320 
t
 = 
	`lib√t_buûd_gª_§e
(

321 
GRE_IP
,

323 
	`°æí
((*)
routög
),

324 
routög
,

325 
NULL
,

327 
l
,

329 i‡(
t
 == -1)

331 
	`Ârötf
(
°dîr
, "C™'àbuûd GREÜa° SRE hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

332 
bad
;

336 
Àn
 = 
	`lib√t_gëgª_Àngth
(
gª_Êags
);

337 
size
 +
Àn
;

338 
t
 = 
	`lib√t_buûd_gª
(

339 
gª_Êags
,

340 (
gª_Êags
 & 
GRE_VERSION_1
 ? 
GRE_PPP
 : 
GRE_IP
),

341 
checksum
,

342 
off£t
,

343 
key
,

344 
£q
,

345 
size
,

346 
NULL
,

348 
l
,

350 i‡(
t
 == -1)

352 
	`Ârötf
(
°dîr
, "C™'àbuûd GRE hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

353 
bad
;

360 
size
+=
LIBNET_IPV4_H
;

361 
t
 = 
	`lib√t_buûd_ùv4
(

362 
size
,

367 
IPPROTO_GRE
,

369 
§c_ù
,

370 
d°_ù
,

371 
NULL
,

373 
l
,

375 i‡(
t
 == -1)

377 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî (GRE): %s\n", 
	`lib√t_gëîr‹
(
l
));

378 
bad
;

381 
t
 = 
	`lib√t_autobuûd_ëhî√t
(

382 (
uöt8_t
 *)"11:11:11:11:11:11",

383 
ETHERTYPE_IP
,

384 
l
);

385 i‡(
t
 == -1)

387 
	`Ârötf
(
°dîr
, "Can't buildÉthernet header: %s\n",

388 
	`lib√t_gëîr‹
(
l
));

389 
bad
;

395 
c
 = 
	`lib√t_wrôe
(
l
);

396 i‡(
c
 == -1)

398 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

399 
bad
;

403 
	`Ârötf
(
°dîr
, "WrŸê%d byã GREÖackë; checkÅhêwúe.\n", 
c
);

405 
	`lib√t_de°roy
(
l
);

406  (
EXIT_SUCCESS
);

407 
bad
:

408 
	`lib√t_de°roy
(
l
);

409  (
EXIT_FAILURE
);

410 
	}
}

	@/workspaces/libnet/sample/hsrp.c

32 
	~"lib√t_ã°.h
"

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
uöt8_t
 
vîsi⁄
 = 
LIBNET_HSRP_VERSION
;

39 
uöt8_t
 
›code
 = 
LIBNET_HSRP_TYPE_HELLO
;

40 
uöt8_t
 
°©e
 = 
LIBNET_HSRP_STATE_ACTIVE
;

41 
uöt8_t
 
hñlo_time
 = 3;

42 
uöt8_t
 
hﬁd_time
 = 10;

43 
uöt8_t
 
¥i‹ôy
 = 1;

44 
uöt8_t
 
group
 = 1;

45 
uöt8_t
 
ª£rved
 = 0;

46 
uöt8_t
 
authd©a
[8];

48 
lib√t_t
 *
l
;

49 *
devi˚
 = 
NULL
;

50 
§c
[] = "1.1.1.1";

51 *
ëh_d°
 = "DE:AD:00:00:BE:EF";

52 
d°
[] = "224.0.0.2";

53 
p‹t
 = 1985;

54 
c
;

55 
u_l⁄g
 
§c_ù
, 
d°_ù
;

56 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

57 
lib√t_±ag_t
 
±ag
 = 0;

59 
	`¥ötf
("libnet 1.1.2Öacket shaping: HSRP[link]\n");

64 
l
 = 
	`lib√t_öô
(

65 
LIBNET_LINK_ADV
,

66 
devi˚
,

67 
îrbuf
);

69 i‡(
l
 =
NULL
)

71 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

72 
	`exô
(
EXIT_FAILURE
);

75 
	`¥ötf
("Usög devi˚ %s\n", 
l
->
devi˚
);

77 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
d°
, 
LIBNET_RESOLVE
)Ë=(
u_l⁄g
)-1)

79 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
d°
);

80 
	`exô
(
EXIT_FAILURE
);

83 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
§c
, 
LIBNET_RESOLVE
)Ë=(
u_l⁄g
)-1)

85 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
§c
);

86 
	`exô
(
EXIT_FAILURE
);

89 
	`mem£t
(
authd©a
, 0, 8);

90 
	`°∫˝y
((*)
authd©a
, "cisco", 5);

93 
±ag
 = 
	`lib√t_buûd_h§p
(

94 
vîsi⁄
,

95 
›code
,

96 
°©e
,

97 
hñlo_time
,

98 
hﬁd_time
,

99 
¥i‹ôy
,

100 
group
,

101 
ª£rved
,

102 
authd©a
,

103 
§c_ù
,

104 
NULL
,

106 
l
,

110 i‡(
±ag
 == -1)

112 
	`Ârötf
(
°dîr
, "C™'àbuûd HSRP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

113 
bad
;

116 
±ag
 = 
	`lib√t_buûd_udp
(

117 
p‹t
,

118 
p‹t
,

119 
LIBNET_UDP_H
 + 
LIBNET_HSRP_H
 ,

121 
NULL
,

123 
l
,

126 i‡(
±ag
 == -1)

128 
	`Ârötf
(
°dîr
, "C™'àbuûd UDP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

129 
bad
;

132 
±ag
 = 
	`lib√t_buûd_ùv4
(

133 
LIBNET_IPV4_H
 + 
LIBNET_UDP_H
 + 
LIBNET_HSRP_H
,

138 
IPPROTO_UDP
,

140 
§c_ù
,

141 
d°_ù
,

142 
NULL
,

144 
l
,

147 i‡(
±ag
 == -1)

149 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

150 
	`exô
(
EXIT_FAILURE
);

154 
ëh_d°
 = (*)
	`lib√t_hex_©⁄
”th_d°, &
c
);

155 
±ag
 = 
	`lib√t_autobuûd_ëhî√t
(

156 (
uöt8_t
 *)
ëh_d°
,

157 
ETHERTYPE_IP
,

158 
l
);

160 
	`‰ì
(
ëh_d°
);

161 i‡(
±ag
 == -1)

163 
	`Ârötf
(
°dîr
, "Can't buildÉthernet header: %s\n",

164 
	`lib√t_gëîr‹
(
l
));

165 
bad
;

172 
c
 = 
	`lib√t_wrôe
(
l
);

173 i‡(
c
 == -1)

175 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

176 
bad
;

180 
	`Ârötf
(
°dîr
, "WrŸê%d byã HSRPÖackë; checkÅhêwúe.\n", 
c
);

182 
	`lib√t_de°roy
(
l
);

183  (
EXIT_SUCCESS
);

184 
bad
:

185 
	`lib√t_de°roy
(
l
);

186  (
EXIT_FAILURE
);

189 
	}
}

	@/workspaces/libnet/sample/icmp6_echoreq.c

30 #i‡(
HAVE_CONFIG_H
)

31 
	~"../ö˛ude/c⁄fig.h
"

33 
	~"lib√t_ã°.h
"

35 
	st_∑ck


37 
lib√t_ùv6_hdr
 
	mù
;

38 
lib√t_t˝_hdr
 
	mt˝
;

43 
	$maö
(
¨gc
, **
¨gv
)

45 
lib√t_ö6_addr
 
d°_ù
;

46 
lib√t_ö6_addr
 
§c_ù
;

47 
u_sh‹t
 
d°_¥t
 = 0;

48 
u_sh‹t
 
§c_¥t
 = 0;

49 
lib√t_t
 *
l
;

50 
lib√t_±ag_t
 
t
;

51 *
˝
;

52 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

53 
i
, 
c
, 
∑ckë_amt
, 
bur°_öt
, 
bur°_amt
, 
buûd_ù
;

54 
§˙ame
[100], 
d°«me
[100];

56 
∑ckë_amt
 = 0;

57 
bur°_öt
 = 0;

58 
bur°_amt
 = 1;

60 
	`¥ötf
("libnet 1.1ÉchoÑequest ICMP6[raw]\n");

65 
l
 = 
	`lib√t_öô
(
LIBNET_RAW6
,

66 
NULL
,

67 
îrbuf
);

68 i‡(
l
 =
NULL
)

70 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

71 
	`exô
(
EXIT_FAILURE
);

74 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "t:a:i:b:")Ë!
EOF
)

76 
c
)

79 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '/')))

81 
	`ußge
(
¨gv
[0]);

82 
	`exô
(
EXIT_FAILURE
);

84 *
˝
++ = 0;

85 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

86 
d°_ù
 = 
	`lib√t_«me2addr6
(
l
, 
›èrg
, 
LIBNET_RESOLVE
);

87 i‡(
	`°∫cmp
((*)&
d°_ù
, (*)&
ö6addr_îr‹
, (in6addr_error)) == 0)

89 
	`Ârötf
(
°dîr
, "Bad IP6áddªss: %s\n", 
›èrg
);

90 
	`exô
(
EXIT_FAILURE
);

94 
∑ckë_amt
 = 
	`©oi
(
›èrg
);

97 
bur°_öt
 = 
	`©oi
(
›èrg
);

100 
bur°_amt
 = 
	`©oi
(
›èrg
);

103 
	`ußge
(
¨gv
[0]);

104 
	`exô
(
EXIT_FAILURE
);

108 i‡(!
d°_¥t
 || 
	`°∫cmp
((*)&
d°_ù
, (*)&
ö6addr_îr‹
, (ö6addr_îr‹)Ë=0 || !
∑ckë_amt
)

110 
	`ußge
(
¨gv
[0]);

111 
	`exô
(
EXIT_FAILURE
);

114 
	`lib√t_£ed_¥™d
(
l
);

115 
	`lib√t_addr2«me6_r
(
§c_ù
, 1, 
§˙ame
, (srcname));

116 
	`lib√t_addr2«me6_r
(
d°_ù
, 1, 
d°«me
, (dstname));

118 
t
 = 
LIBNET_PTAG_INITIALIZER
, 
buûd_ù
 = 1; 
bur°_amt
--;)

120 
i
 = 0; i < 
∑ckë_amt
; i++)

122 
∑ylﬂd
[56];

123 
i
;

125 
i
 = 0; i < 56; i++)

126 
∑ylﬂd
[
i
] = 'A' + (()(i % 26));

127 
t
 = 
	`lib√t_buûd_icmpv4_echo
(
ICMP6_ECHO
, 0, 0, 1, 0, (
uöt8_t
 *)
∑ylﬂd
, ’aylﬂd), 
l
,Å);

129 i‡(
buûd_ù
)

131 
buûd_ù
 = 0;

132 
	`lib√t_buûd_ùv6
(0, 0,

133 
LIBNET_ICMPV6_H
 + (
∑ylﬂd
),

134 
IPPROTO_ICMP6
, 64,

135 
§c_ù
, 
d°_ù
,

136 
NULL
, 0,

137 
l
, 0);

139 
	`¥ötf
("%15s/%5d -> %15s/%5d\n", 
§˙ame
, 
	`¡ohs
(
§c_¥t
), 
d°«me
, 
d°_¥t
);

140 
c
 = 
	`lib√t_wrôe
(
l
);

141 i‡(
c
 == -1)

143 
	`Ârötf
(
°dîr
, "lib√t_wrôe: %s\n", 
	`lib√t_gëîr‹
(
l
));

145 #i‡!(
__WIN32__
)

146 
	`u¶ìp
(250);

148 
	`SÀï
(250);

152 #i‡!(
__WIN32__
)

153 
	`¶ìp
(
bur°_öt
);

155 
	`SÀï
(
bur°_öt
 * 1000);

158 
	`exô
(
EXIT_SUCCESS
);

159 
	}
}

163 
	$ußge
(*
nomí˛©uª
)

165 
	`Ârötf
(
°dîr
,

170 "\t-bÇumbîÖackë bur°†tÿ£nd (deÁu…†tÿ1)\n", 
nomí˛©uª
);

171 
	}
}

	@/workspaces/libnet/sample/icmp6_unreach.c

30 #i‡(
HAVE_CONFIG_H
)

31 
	~"../ö˛ude/c⁄fig.h
"

33 
	~"lib√t_ã°.h
"

35 
	st_∑ck


37 
lib√t_ùv6_hdr
 
	mù
;

38 
lib√t_t˝_hdr
 
	mt˝
;

43 
	$maö
(
¨gc
, **
¨gv
)

45 
lib√t_ö6_addr
 
d°_ù
;

46 
lib√t_ö6_addr
 
§c_ù
;

47 
u_sh‹t
 
d°_¥t
 = 0;

48 
u_sh‹t
 
§c_¥t
 = 0;

49 
lib√t_t
 *
l
;

50 
lib√t_±ag_t
 
t
;

51 *
˝
;

52 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

53 
i
, 
c
, 
∑ckë_amt
, 
bur°_öt
, 
bur°_amt
, 
buûd_ù
;

54 
§˙ame
[100], 
d°«me
[100];

56 
∑ckë_amt
 = 0;

57 
bur°_öt
 = 0;

58 
bur°_amt
 = 1;

60 
	`¥ötf
("libnet 1.1 unreach/adminÖrohibitedÑequest ICMP6[raw]\n");

65 
l
 = 
	`lib√t_öô
(
LIBNET_RAW6
,

66 
NULL
,

67 
îrbuf
);

69 i‡(
l
 =
NULL
)

71 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

72 
	`exô
(
EXIT_FAILURE
);

75 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "t:a:i:b:")Ë!
EOF
)

77 
c
)

80 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '/')))

82 
	`ußge
(
¨gv
[0]);

83 
	`exô
(
EXIT_FAILURE
);

85 *
˝
++ = 0;

86 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

87 
d°_ù
 = 
	`lib√t_«me2addr6
(
l
, 
›èrg
, 
LIBNET_RESOLVE
);

88 i‡(
	`°∫cmp
((*)&
d°_ù
, (*)&
ö6addr_îr‹
, (in6addr_error)) == 0)

90 
	`Ârötf
(
°dîr
, "Bad IP6áddªss: %s\n", 
›èrg
);

91 
	`exô
(
EXIT_FAILURE
);

95 
∑ckë_amt
 = 
	`©oi
(
›èrg
);

98 
bur°_öt
 = 
	`©oi
(
›èrg
);

101 
bur°_amt
 = 
	`©oi
(
›èrg
);

104 
	`ußge
(
¨gv
[0]);

105 
	`exô
(
EXIT_FAILURE
);

109 i‡(!
d°_¥t
 || 
	`°∫cmp
((*)&
d°_ù
, (*)&
ö6addr_îr‹
, (ö6addr_îr‹)Ë=0 || !
∑ckë_amt
)

111 
	`ußge
(
¨gv
[0]);

112 
	`exô
(
EXIT_FAILURE
);

115 
	`lib√t_£ed_¥™d
(
l
);

116 
	`lib√t_addr2«me6_r
(
§c_ù
, 1, 
§˙ame
, (srcname));

117 
	`lib√t_addr2«me6_r
(
d°_ù
, 1, 
d°«me
, (dstname));

119 
t
 = 
LIBNET_PTAG_INITIALIZER
, 
buûd_ù
 = 1; 
bur°_amt
--;)

121 
i
 = 0; i < 
∑ckë_amt
; i++)

123 
uöt8_t
 
∑ylﬂd
[56];

124 
i
;

126 
i
 = 0; i < (
∑ylﬂd
); i++)

127 
∑ylﬂd
[
i
] = 'A' + (i % 26);

128 
t
 = 
	`lib√t_buûd_icmpv6_uƒóch
(
ICMP6_UNREACH
,

129 
ICMP6_ADM_PROHIBITED
,

131 
∑ylﬂd
,

132 (
∑ylﬂd
),

133 
l
,

134 
t
);

136 i‡(
buûd_ù
)

138 
buûd_ù
 = 0;

139 
	`lib√t_buûd_ùv6
(0, 0,

140 
LIBNET_IPV6_H
 + 
LIBNET_ICMPV6_H
 + (
∑ylﬂd
),

141 
IPPROTO_ICMP6
, 64, 
§c_ù
, 
d°_ù
, 
NULL
, 0, 
l
, 0);

143 
	`¥ötf
("%15s/%5d -> %15s/%5d\n", 
§˙ame
, 
	`¡ohs
(
§c_¥t
), 
d°«me
, 
d°_¥t
);

144 
c
 = 
	`lib√t_wrôe
(
l
);

145 i‡(
c
 == -1)

147 
	`Ârötf
(
°dîr
, "lib√t_wrôe: %s\n", 
	`lib√t_gëîr‹
(
l
));

149 #i‡!(
__WIN32__
)

150 
	`u¶ìp
(250);

152 
	`SÀï
(250);

156 #i‡!(
__WIN32__
)

157 
	`¶ìp
(
bur°_öt
);

159 
	`SÀï
(
bur°_öt
 * 1000);

162 
	`exô
(
EXIT_SUCCESS
);

163 
	}
}

167 
	$ußge
(*
nomí˛©uª
)

169 
	`Ârötf
(
°dîr
,

174 "\t-bÇumbîÖackë bur°†tÿ£nd (deÁu…†tÿ1)\n", 
nomí˛©uª
);

175 
	}
}

	@/workspaces/libnet/sample/icmp_echo_cq.c

33 
	~"lib√t_ã°.h
"

35 
ußge
(*);

39 
	$maö
(
¨gc
, **
¨gv
)

41 
lib√t_t
 *
l
 = 
NULL
;

42 
u_l⁄g
 
§c_ù
 = 0, 
d°_ù
 = 0;

43 
u_l⁄g
 
cou¡
 = 10;

44 
i
, 
c
;

45 
lib√t_±ag_t
 
t
;

46 *
∑ylﬂd
 = 
NULL
;

47 
u_sh‹t
 
∑ylﬂd_s
 = 0;

49 *
devi˚
 = 
NULL
;

50 *
pD°
 = 
NULL
, *
pSrc
 = NULL;

51 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

52 
œbñ
[
LIBNET_LABEL_SIZE
];

54 
	`¥ötf
("libnet 1.1Öacket shaping: ICMP[RAW using context queue]\n");

56 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:i:c:p:")Ë!
EOF
)

58 
c
)

61 
pD°
 = 
›èrg
;

64 
pSrc
 = 
›èrg
;

67 
devi˚
 = 
›èrg
;

70 
cou¡
 = 
	`°πoul
(
›èrg
, 0, 10);

73 
∑ylﬂd
 = 
›èrg
;

74 
∑ylﬂd_s
 = 
	`°æí
(
∑ylﬂd
);

79 i‡(!
pSrc
 || !
pD°
)

81 
	`ußge
(
¨gv
[0]);

82 
	`exô
(
EXIT_FAILURE
);

89 
i
 = 0; i < 
cou¡
; i++)

91 
l
 = 
	`lib√t_öô
(

92 
LIBNET_RAW4
,

93 
devi˚
,

94 
îrbuf
);

96 i‡(
l
 =
NULL
)

99 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

100 
	`exô
(
EXIT_FAILURE
);

106 i‡(!
d°_ù
 && (d°_ù = 
	`lib√t_«me2addr4
(
l
, 
pD°
,

107 
LIBNET_RESOLVE
)) == -1)

109 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
pD°
);

110 
	`exô
(1);

112 i‡(!
§c_ù
 && (§c_ù = 
	`lib√t_«me2addr4
(
l
, 
pSrc
,

113 
LIBNET_RESOLVE
)) == -1)

115 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
pSrc
);

116 
	`exô
(1);

119 
t
 = 
	`lib√t_buûd_icmpv4_echo
(

120 
ICMP_ECHO
,

125 
NULL
,

127 
l
,

129 i‡(
t
 == -1)

131 
	`Ârötf
(
°dîr
, "Can't build ICMP header: %s\n",

132 
	`lib√t_gëîr‹
(
l
));

133 
bad
;

136 
t
 = 
	`lib√t_buûd_ùv4
(

137 
LIBNET_IPV4_H
 + 
LIBNET_ICMPV4_ECHO_H
 + 
∑ylﬂd_s
,

142 
IPPROTO_ICMP
,

144 
§c_ù
,

145 
d°_ù
,

146 (
uöt8_t
 *)
∑ylﬂd
,

147 
∑ylﬂd_s
,

148 
l
,

150 i‡(
t
 == -1)

152 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

153 
bad
;

157 
	`¢¥ötf
(
œbñ
, ÷abñ)-1, "echÿ%d", 
i
);

158 i‡(
	`lib√t_cq_add
(
l
, 
œbñ
) == -1)

160 
	`Ârötf
(
°dîr
, "addÉº‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

161 
bad
;

165 
	`f‹_óch_c⁄ãxt_ö_cq
(
l
)

167 
c
 = 
	`lib√t_wrôe
(
l
);

168 i‡(
c
 == -1)

170 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

171 
bad
;

175 
	`Ârötf
(
°dîr
, "Wrote %d byte ICMPÖacket from context \"%s\"; "

176 "checkÅhêwúe.\n", 
c
, 
	`lib√t_cq_gëœbñ
(
l
));

180 
	`lib√t_cq_de°roy
();

181  (
EXIT_SUCCESS
);

182 
bad
:

183 
	`lib√t_cq_de°roy
();

184 
	`lib√t_de°roy
(
l
);

185  (
EXIT_FAILURE
);

186 
	}
}

189 
	$ußge
(*
«me
)

191 
	`Ârötf
(
°dîr
, "usage: %s -s source_ip -d destination_ip"

192 " [-òiÁ˚] [-¯cou¡ = 10]\¿", 
«me
);

193 
	}
}

	@/workspaces/libnet/sample/icmp_redirect.c

34 #i‡(
HAVE_CONFIG_H
)

35 
	~"../ö˛ude/c⁄fig.h
"

37 
	~"lib√t_ã°.h
"

40 
	$maö
(
¨gc
, **
¨gv
)

42 
c
;

43 
lib√t_t
 *
l
;

44 
lib√t_±ag_t
 
t
;

45 
u_l⁄g
 
§c_ù
, 
d°_ù
, 
gw_ù
;

46 
u_ch¨
 
∑ylﬂd
[8] = {0x11, 0x11, 0x22, 0x22, 0x00, 0x08, 0xc6, 0xa5};

47 
u_l⁄g
 
∑ylﬂd_s
 = 8;

48 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

50 
	`¥ötf
("libnet 1.1Öacket shaping: ICMPÑedirect[link]\n");

55 
l
 = 
	`lib√t_öô
(

56 
LIBNET_LINK
,

57 
NULL
,

58 
îrbuf
);

60 i‡(
l
 =
NULL
)

62 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

63 
	`exô
(
EXIT_FAILURE
);

66 
§c_ù
 = 0;

67 
d°_ù
 = 0;

68 
gw_ù
 = 0;

69 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:g:")Ë!
EOF
)

71 
c
)

74 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

76 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

77 
	`exô
(1);

81 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

83 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

84 
	`exô
(1);

88 i‡((
gw_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

90 
	`Ârötf
(
°dîr
, "Bad g©eway IPáddªss: %s\n", 
›èrg
);

91 
	`exô
(1);

96 i‡(!
§c_ù
 || !
d°_ù
 || !
gw_ù
)

98 
	`ußge
(
¨gv
[0]);

99 
	`exô
(
EXIT_FAILURE
);

102 
t
 = 
	`lib√t_buûd_ùv4
(

103 
LIBNET_IPV4_H
 + 
∑ylﬂd_s
,

104 
IPTOS_LOWDELAY
 | 
IPTOS_THROUGHPUT
,

108 
IPPROTO_ICMP
,

110 
d°_ù
,

111 
§c_ù
,

112 
∑ylﬂd
,

113 
∑ylﬂd_s
,

114 
l
,

116 i‡(
t
 == -1)

118 
	`Ârötf
(
°dîr
, "Can't buildÉrror IP header: %s\n",

119 
	`lib√t_gëîr‹
(
l
));

120 
bad
;

123 
t
 = 
	`lib√t_buûd_icmpv4_ªdúe˘
(

124 
ICMP_REDIRECT
,

125 
ICMP_REDIRECT_HOST
,

127 
gw_ù
,

128 
NULL
,

130 
l
,

132 i‡(
t
 == -1)

134 
	`Ârötf
(
°dîr
, "C™'àbuûd ICMP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

135 
bad
;

138 
t
 = 
	`lib√t_buûd_ùv4
(

139 
LIBNET_IPV4_H
 + 
LIBNET_ICMPV4_REDIRECT_H
 +

140 
LIBNET_IPV4_H
 + 
∑ylﬂd_s
,

141 
IPTOS_LOWDELAY
 | 
IPTOS_THROUGHPUT
,

145 
IPPROTO_ICMP
,

147 
§c_ù
,

148 
d°_ù
,

149 
NULL
,

151 
l
,

153 i‡(
t
 == -1)

155 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

156 
bad
;

159 
t
 = 
	`lib√t_buûd_ëhî√t
(

160 
íë_d°
,

161 
íë_§c
,

162 
ETHERTYPE_IP
,

163 
NULL
,

165 
l
,

167 i‡(
t
 == -1)

169 
	`Ârötf
(
°dîr
, "C™'àbuûdÉthî√àhódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

170 
bad
;

176 
c
 = 
	`lib√t_wrôe
(
l
);

177 i‡(
c
 == -1)

179 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

180 
bad
;

184 
	`Ârötf
(
°dîr
, "WrŸê%d byã ICMPÖackë; checkÅhêwúe.\n", 
c
);

186 
	`lib√t_de°roy
(
l
);

187  (
EXIT_SUCCESS
);

188 
bad
:

189 
	`lib√t_de°roy
(
l
);

190  (
EXIT_FAILURE
);

191 
	}
}

195 
	$ußge
(*
«me
)

197 
	`Ârötf
(
°dîr
, "ußge: %†-†sour˚_ù -d de°ö©i⁄_ù -g g©eway_ù\¿", 
«me
);

198 
	}
}

	@/workspaces/libnet/sample/icmp_timeexceed.c

34 #i‡(
HAVE_CONFIG_H
)

35 
	~"../ö˛ude/c⁄fig.h
"

37 
	~"lib√t_ã°.h
"

40 
	$maö
(
¨gc
, **
¨gv
)

42 
c
;

43 
lib√t_t
 *
l
;

44 
lib√t_±ag_t
 
t
;

45 
u_l⁄g
 
§c_ù
, 
d°_ù
;

46 
u_ch¨
 
∑ylﬂd
[8] = {0x11, 0x11, 0x22, 0x22, 0x00, 0x08, 0xc6, 0xa5};

47 
u_l⁄g
 
∑ylﬂd_s
 = 8;

48 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

50 
	`¥ötf
("libnet 1.1Öacket shaping: ICMPÅimeexceed[link]\n");

55 
l
 = 
	`lib√t_öô
(

56 
LIBNET_LINK
,

57 
NULL
,

58 
îrbuf
);

60 i‡(
l
 =
NULL
)

62 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

63 
	`exô
(
EXIT_FAILURE
);

66 
§c_ù
 = 0;

67 
d°_ù
 = 0;

68 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:")Ë!
EOF
)

70 
c
)

73 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

75 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

76 
	`exô
(1);

80 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

82 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

83 
	`exô
(1);

88 i‡(!
§c_ù
 || !
d°_ù
)

90 
	`ußge
(
¨gv
[0]);

91 
	`exô
(
EXIT_FAILURE
);

93 
t
 = 
	`lib√t_buûd_ùv4
(

94 
LIBNET_IPV4_H
 + 
∑ylﬂd_s
,

95 
IPTOS_LOWDELAY
 | 
IPTOS_THROUGHPUT
,

99 
IPPROTO_UDP
,

101 
d°_ù
,

102 
§c_ù
,

103 
∑ylﬂd
,

104 
∑ylﬂd_s
,

105 
l
,

107 i‡(
t
 == -1)

109 
	`Ârötf
(
°dîr
, "Can't buildÉrror IP header: %s\n",

110 
	`lib√t_gëîr‹
(
l
));

111 
bad
;

114 
t
 = 
	`lib√t_buûd_icmpv4_timìx˚ed
(

115 
ICMP_TIMXCEED
,

116 
ICMP_TIMXCEED_INTRANS
,

118 
NULL
,

120 
l
,

122 i‡(
t
 == -1)

124 
	`Ârötf
(
°dîr
, "C™'àbuûd ICMP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

125 
bad
;

128 
t
 = 
	`lib√t_buûd_ùv4
(

129 
LIBNET_IPV4_H
 + 
LIBNET_ICMPV4_TIMXCEED_H
 +

130 
LIBNET_IPV4_H
 + 
∑ylﬂd_s
,

131 
IPTOS_LOWDELAY
 | 
IPTOS_THROUGHPUT
,

135 
IPPROTO_ICMP
,

137 
§c_ù
,

138 
d°_ù
,

139 
NULL
,

141 
l
,

143 i‡(
t
 == -1)

145 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

146 
bad
;

149 
t
 = 
	`lib√t_buûd_ëhî√t
(

150 
íë_d°
,

151 
íë_§c
,

152 
ETHERTYPE_IP
,

153 
NULL
,

155 
l
,

157 i‡(
t
 == -1)

159 
	`Ârötf
(
°dîr
, "C™'àbuûdÉthî√àhódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

160 
bad
;

166 
c
 = 
	`lib√t_wrôe
(
l
);

167 i‡(
c
 == -1)

169 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

170 
bad
;

174 
	`Ârötf
(
°dîr
, "WrŸê%d byã ICMPÖackë; checkÅhêwúe.\n", 
c
);

176 
	`lib√t_de°roy
(
l
);

177  (
EXIT_SUCCESS
);

178 
bad
:

179 
	`lib√t_de°roy
(
l
);

180  (
EXIT_FAILURE
);

181 
	}
}

185 
	$ußge
(*
«me
)

187 
	`Ârötf
(
°dîr
, "ußge: %†-†sour˚_ù -d de°ö©i⁄_ù\¿", 
«me
);

188 
	}
}

	@/workspaces/libnet/sample/icmp_timestamp.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

39 
	$maö
(
¨gc
, **
¨gv
)

41 
c
;

42 
lib√t_t
 *
l
;

43 
lib√t_±ag_t
 
t
;

44 
u_l⁄g
 
§c_ù
, 
d°_ù
;

45 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

47 
	`¥ötf
("libnet 1.1Öacket shaping: ICMPÅimestamp[raw]\n");

52 
l
 = 
	`lib√t_öô
(

53 
LIBNET_RAW4
,

54 
NULL
,

55 
îrbuf
);

57 i‡(
l
 =
NULL
)

59 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

60 
	`exô
(
EXIT_FAILURE
);

63 
§c_ù
 = 0;

64 
d°_ù
 = 0;

65 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:")Ë!
EOF
)

67 
c
)

70 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

72 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

73 
	`exô
(1);

77 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

79 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

80 
	`exô
(1);

85 i‡(!
§c_ù
 || !
d°_ù
)

87 
	`ußge
(
¨gv
[0]);

88 
	`exô
(
EXIT_FAILURE
);

91 
t
 = 
	`lib√t_buûd_icmpv4_time°amp
(

92 
ICMP_TSTAMP
,

100 
NULL
,

102 
l
,

104 i‡(
t
 == -1)

106 
	`Ârötf
(
°dîr
, "C™'àbuûd ICMP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

107 
bad
;

110 
t
 = 
	`lib√t_buûd_ùv4
(

111 
LIBNET_IPV4_H
 + 
LIBNET_ICMPV4_TS_H
,

116 
IPPROTO_ICMP
,

118 
§c_ù
,

119 
d°_ù
,

120 
NULL
,

122 
l
,

124 i‡(
t
 == -1)

126 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

127 
bad
;

133 
c
 = 
	`lib√t_wrôe
(
l
);

134 i‡(
c
 == -1)

136 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

137 
bad
;

141 
	`Ârötf
(
°dîr
, "WrŸê%d byã ICMPÖackë; checkÅhêwúe.\n", 
c
);

143 
	`lib√t_de°roy
(
l
);

144  (
EXIT_SUCCESS
);

145 
bad
:

146 
	`lib√t_de°roy
(
l
);

147  (
EXIT_FAILURE
);

148 
	}
}

152 
	$ußge
(*
«me
)

154 
	`Ârötf
(
°dîr
, "ußge: %†-†sour˚_ù -d de°ö©i⁄_ù\¿", 
«me
);

155 
	}
}

	@/workspaces/libnet/sample/icmp_unreach.c

36 #i‡(
HAVE_CONFIG_H
)

37 
	~"../ö˛ude/c⁄fig.h
"

39 
	~"lib√t_ã°.h
"

42 
	$maö
(
¨gc
, **
¨gv
)

44 
c
, 
i
;

45 
lib√t_t
 *
l
 = 
NULL
;

46 
lib√t_±ag_t
 
ù_îr
 = 0, 
icmp
 = 0, 
ù
 = 0, 
ëh
 = 0;

47 
u_l⁄g
 
§c_ù
, 
d°_ù
;

48 
u_ch¨
 
∑ylﬂd
[8] = {0x11, 0x11, 0x22, 0x22, 0x00, 0x08, 0xc6, 0xa5};

49 
u_l⁄g
 
∑ylﬂd_s
 = 8;

50 
mode
 = 
LIBNET_LINK
;

51 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

53 
	`¥ötf
("libnet 1.1Öacket shaping: ICMP unreachable[link]\n");

55 
§c_ù
 = 0;

56 
d°_ù
 = 0;

58 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:r")Ë!
EOF
)

60 
c
)

63 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

65 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

66 
	`exô
(1);

70 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

72 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

73 
	`exô
(1);

77 
mode
 = 
LIBNET_RAW4
;

81 i‡(!
§c_ù
 || !
d°_ù
)

83 
	`ußge
(
¨gv
[0]);

84 
	`exô
(
EXIT_FAILURE
);

90 
l
 = 
	`lib√t_öô
(

91 
mode
,

92 
NULL
,

93 
îrbuf
);

95 i‡(
l
 =
NULL
)

97 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

98 
	`exô
(
EXIT_FAILURE
);

101 
i
=0; i<255; i++)

103 
ù_îr
 = 
	`lib√t_buûd_ùv4
(

104 
LIBNET_IPV4_H
 + 
∑ylﬂd_s
,

105 
IPTOS_LOWDELAY
 | 
IPTOS_THROUGHPUT
,

106 (
uöt16_t
)
i
,

109 
IPPROTO_UDP
,

111 
d°_ù
,

112 
§c_ù
,

113 
∑ylﬂd
,

114 
∑ylﬂd_s
,

115 
l
,

116 
ù_îr
);

117 i‡(
ù_îr
 == -1)

119 
	`Ârötf
(
°dîr
, "Can't buildÉrror IPv4 header: %s\n",

120 
	`lib√t_gëîr‹
(
l
));

121 
bad
;

124 
icmp
 = 
	`lib√t_buûd_icmpv4_uƒóch
(

125 
ICMP_UNREACH
,

126 
ICMP_UNREACH_PORT
,

128 
NULL
,

130 
l
,

131 
icmp
);

132 i‡(
icmp
 == -1)

134 
	`Ârötf
(
°dîr
, "C™'àbuûd ICMP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

135 
bad
;

138 
ù
 = 
	`lib√t_buûd_ùv4
(

139 
LIBNET_IPV4_H
 + 
LIBNET_ICMPV4_UNREACH_H
 +

140 
LIBNET_IPV4_H
 + 
∑ylﬂd_s
,

141 
IPTOS_LOWDELAY
 | 
IPTOS_THROUGHPUT
,

142 (
uöt16_t
)
i
 + 1,

145 
IPPROTO_ICMP
,

147 
§c_ù
,

148 
d°_ù
,

149 
NULL
,

151 
l
,

152 
ù
);

153 i‡(
ù
 == -1)

155 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

156 
bad
;

159 i‡(
mode
 =
LIBNET_LINK
) {

160 
ëh
 = 
	`lib√t_buûd_ëhî√t
(

161 
íë_d°
,

162 
íë_§c
,

163 
ETHERTYPE_IP
,

164 
NULL
,

166 
l
,

167 
ëh
);

169 i‡(
ëh
 == -1)

171 
	`Ârötf
(
°dîr
, "C™'àbuûdÉthî√àhódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

172 
bad
;

178 
	`lib√t_düg_dump_pblock
(
l
);

179 
c
 = 
	`lib√t_wrôe
(
l
);

180 i‡(
c
 == -1)

182 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

183 
bad
;

187 
	`Ârötf
(
°dîr
, "WrŸê%d byã ICMPÖackë; checkÅhêwúe.\n", 
c
);

190 
	`lib√t_de°roy
(
l
);

191  (
EXIT_SUCCESS
);

192 
bad
:

193 
	`lib√t_de°roy
(
l
);

194  (
EXIT_FAILURE
);

195 
	}
}

199 
	$ußge
(*
«me
)

201 
	`Ârötf
(
°dîr
, "ußge: %†[-r] -†sour˚_ù -d de°ö©i⁄_ù\¿", 
«me
);

202 
	}
}

	@/workspaces/libnet/sample/ieee.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
c
, 
Àn
, 
do_802_2
;

42 
u_l⁄g
 
i
;

43 
lib√t_t
 *
l
;

44 
lib√t_±ag_t
 
t
;

45 
u_ch¨
 *
d°
, *
§c
, 
oui
[3];

46 *
devi˚
 = 
NULL
;

47 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

49 
	`¥ötf
("libnet 1.1Öacket shaping: ieee[802.1q / 802.2 / ARP]\n");

51 
do_802_2
 = 0;

52 
devi˚
 = 
NULL
;

53 
§c
 = 
d°
 = 
NULL
;

54 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "8d:i:s:")Ë!
EOF
)

56 
c
)

59 
do_802_2
 = 1;

62 
d°
 = 
	`lib√t_hex_©⁄
(
›èrg
, &
Àn
);

65 
devi˚
 = 
›èrg
;

68 
§c
 = 
	`lib√t_hex_©⁄
(
›èrg
, &
Àn
);

73 i‡(
§c
 =
NULL
 || 
d°
 == NULL)

75 
	`Ârötf
(
°dîr
, "usage %s -d dst -s src [-8 ] [-i interface]\n",

76 
¨gv
[0]);

77 
	`exô
(
EXIT_FAILURE
);

83 
l
 = 
	`lib√t_öô
(

84 
LIBNET_LINK
,

85 
devi˚
,

86 
îrbuf
);

88 i‡(
l
 =
NULL
)

90 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

91 
	`exô
(
EXIT_FAILURE
);

94 
i
 = 
	`lib√t_gë_ùaddr4
(
l
);

96 
t
 = 
	`lib√t_buûd_¨p
(

97 
ARPHRD_ETHER
,

98 
ETHERTYPE_IP
,

101 
ARPOP_REPLY
,

102 
§c
,

103 (
u_ch¨
 *)&
i
,

104 
d°
,

105 (
u_ch¨
 *)&
i
,

106 
NULL
,

108 
l
,

110 i‡(
t
 == -1)

112 
	`Ârötf
(
°dîr
, "C™'àbuûd ARP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

113 
bad
;

116 i‡(
do_802_2
)

118 
	`mem£t
(&
oui
, 0, 3);

119 
t
 = 
	`lib√t_buûd_802_2¢≠
(

123 
oui
,

124 
ETHERTYPE_ARP
,

125 
NULL
,

127 
l
,

129 i‡(
t
 == -1)

131 
	`Ârötf
(
°dîr
, "C™'àbuûd 802.2 hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

132 
bad
;

135 
t
 = 
	`lib√t_buûd_802_1q
(

136 
d°
,

137 
§c
,

138 
ETHERTYPE_VLAN
,

142 
do_802_2
 ? 
LIBNET_802_2SNAP_H
 + 
LIBNET_ARP_ETH_IP_H
 : 0x0806,

143 
NULL
,

145 
l
,

147 i‡(
t
 == -1)

149 
	`Ârötf
(
°dîr
, "C™'àbuûd 802.1q hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

150 
bad
;

155 
c
 = 
	`lib√t_wrôe
(
l
);

157 i‡(
c
 == -1)

159 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

160 
bad
;

164 
	`Ârötf
(
°dîr
, "WrŸê%d byã 802.1qÖackë; checkÅhêwúe.\n", 
c
);

166 
	`‰ì
(
d°
);

167 
	`‰ì
(
§c
);

168 
	`lib√t_de°roy
(
l
);

169  (
EXIT_SUCCESS
);

170 
bad
:

171 
	`‰ì
(
d°
);

172 
	`‰ì
(
§c
);

173 
	`lib√t_de°roy
(
l
);

174  (
EXIT_FAILURE
);

175 
	}
}

	@/workspaces/libnet/sample/ip_link.c

39 #i‡(
HAVE_CONFIG_H
)

40 
	~"../ö˛ude/c⁄fig.h
"

42 
	~"lib√t_ã°.h
"

45 
	$maö
(
¨gc
, *
¨gv
[])

47 
c
;

48 
lib√t_t
 *
l
;

49 *
devi˚
 = 
NULL
;

50 *
d°
 = "2.2.2.2", *
§c
 = "1.1.1.1";

51 *
hwd°
 = "22:22:22:22:22:22", *
hw§c
 = "11:11:11:11:11:11";

52 
u_l⁄g
 
§c_ù
, 
d°_ù
;

53 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

54 
lib√t_±ag_t
 
ù_±ag
 = 0;

55 
lib√t_±ag_t
 
ëh_±ag
 = 0;

56 
u_sh‹t
 
¥Ÿo
 = 
IPPROTO_UDP
;

57 
u_ch¨
 
∑ylﬂd
[255] = {0x11, 0x11, 0x22, 0x22, 0x00, 0x08, 0xc6, 0xa5};

58 
u_l⁄g
 
∑ylﬂd_s
 = 8;

60 
	`¥ötf
("libnet 1.1Öacket shaping: IP +Öayload[link]\n");

62 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:D:S:ç:i:h")Ë!
EOF
)

64 
c
)

67 
hwd°
 = 
›èrg
;

71 
hw§c
 = 
›èrg
;

75 
d°
 = 
›èrg
;

79 
§c
 = 
›èrg
;

83 
devi˚
 = 
›èrg
;

87 
¥Ÿo
 = 
IPPROTO_TCP
;

91 
	`°∫˝y
((*)
∑ylﬂd
, 
›èrg
, (payload)-1);

92 
∑ylﬂd_s
 = 
	`°æí
((*)
∑ylﬂd
);

96 
	`ußge
(
¨gv
[0]);

97 
	`exô
(
EXIT_SUCCESS
);

100 
	`exô
(
EXIT_FAILURE
);

108 
l
 = 
	`lib√t_öô
(

109 
LIBNET_LINK
,

110 
devi˚
,

111 
îrbuf
);

113 
	`¥ötf
("Usög devi˚ %s\n", 
l
->
devi˚
);

115 i‡(
l
 =
NULL
)

117 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

118 
	`exô
(
EXIT_FAILURE
);

121 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
d°
, 
LIBNET_RESOLVE
)) == -1)

123 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
d°
);

124 
	`exô
(
EXIT_FAILURE
);

127 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
§c
, 
LIBNET_RESOLVE
)) == -1)

129 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
§c
);

130 
	`exô
(
EXIT_FAILURE
);

136 
ù_±ag
 = 
	`lib√t_buûd_ùv4
(

137 
LIBNET_IPV4_H
 + 
∑ylﬂd_s
,

142 
¥Ÿo
,

144 
§c_ù
,

145 
d°_ù
,

146 
∑ylﬂd
,

147 
∑ylﬂd_s
,

148 
l
,

149 
ù_±ag
);

150 i‡(
ù_±ag
 == -1)

152 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

153 
bad
;

156 
ëh_±ag
 = 
	`lib√t_buûd_ëhî√t
(

157 (
uöt8_t
 *)
hwd°
,

158 (
uöt8_t
 *)
hw§c
,

159 
ETHERTYPE_IP
,

160 
NULL
,

162 
l
,

164 i‡(
ëh_±ag
 == -1)

166 
	`Ârötf
(
°dîr
, "C™'àbuûdÉthî√àhódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

167 
bad
;

173 
c
 = 
	`lib√t_wrôe
(
l
);

174 i‡(
c
 == -1)

176 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

177 
bad
;

181 
	`Ârötf
(
°dîr
, "WrŸê%d byã IPÖackë; checkÅhêwúe.\n", 
c
);

184 
	`lib√t_de°roy
(
l
);

185  (
EXIT_SUCCESS
);

186 
bad
:

187 
	`lib√t_de°roy
(
l
);

188  (
EXIT_FAILURE
);

189 
	}
}

192 
	$ußge
(*
«me
)

194 
	`Ârötf
(
°dîr
,

198 
«me
);

199 
	}
}

	@/workspaces/libnet/sample/ip_raw.c

39 #i‡(
HAVE_CONFIG_H
)

40 
	~"../ö˛ude/c⁄fig.h
"

42 
	~"lib√t_ã°.h
"

45 
	$maö
(
¨gc
, *
¨gv
[])

47 
c
;

48 
lib√t_t
 *
l
;

49 *
devi˚
 = 
NULL
;

50 *
d°
 = "2.2.2.2", *
§c
 = "1.1.1.1";

51 
u_l⁄g
 
§c_ù
, 
d°_ù
;

52 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

53 
lib√t_±ag_t
 
ù_±ag
 = 0;

54 
u_sh‹t
 
¥Ÿo
 = 
IPPROTO_UDP
;

55 
u_ch¨
 
∑ylﬂd
[255] = {0x11, 0x11, 0x22, 0x22, 0x00, 0x08, 0xc6, 0xa5};

56 
u_l⁄g
 
∑ylﬂd_s
 = 8;

58 
	`¥ötf
("libnet 1.1Öacket shaping: IP +Öayload[raw]\n");

63 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:ç:i:h")Ë!
EOF
)

65 
c
)

68 
d°
 = 
›èrg
;

72 
§c
 = 
›èrg
;

76 
devi˚
 = 
›èrg
;

80 
¥Ÿo
 = 
IPPROTO_TCP
;

84 
	`°∫˝y
((*)
∑ylﬂd
, 
›èrg
, (payload)-1);

85 
∑ylﬂd_s
 = 
	`°æí
((*)
∑ylﬂd
);

89 
	`ußge
(
¨gv
[0]);

90 
	`exô
(
EXIT_SUCCESS
);

93 
	`exô
(
EXIT_FAILURE
);

101 
l
 = 
	`lib√t_öô
(

102 
LIBNET_RAW4
,

103 
devi˚
,

104 
îrbuf
);

106 
	`¥ötf
("Usög devi˚ %s\n", 
l
->
devi˚
);

108 i‡(
l
 =
NULL
)

110 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

111 
	`exô
(
EXIT_FAILURE
);

114 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
d°
, 
LIBNET_RESOLVE
)) == -1)

116 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
d°
);

117 
	`exô
(
EXIT_FAILURE
);

120 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
§c
, 
LIBNET_RESOLVE
)) == -1)

122 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
§c
);

123 
	`exô
(
EXIT_FAILURE
);

130 
ù_±ag
 = 
	`lib√t_buûd_ùv4
(

131 
LIBNET_IPV4_H
 + 
∑ylﬂd_s
,

136 
¥Ÿo
,

138 
§c_ù
,

139 
d°_ù
,

140 
∑ylﬂd
,

141 
∑ylﬂd_s
,

142 
l
,

143 
ù_±ag
);

144 i‡(
ù_±ag
 == -1)

146 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

147 
bad
;

153 
c
 = 
	`lib√t_wrôe
(
l
);

154 i‡(
c
 == -1)

156 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

157 
bad
;

161 
	`Ârötf
(
°dîr
, "WrŸê%d byã IPÖackë; checkÅhêwúe.\n", 
c
);

164 
	`lib√t_de°roy
(
l
);

165  (
EXIT_SUCCESS
);

166 
bad
:

167 
	`lib√t_de°roy
(
l
);

168  (
EXIT_FAILURE
);

169 
	}
}

172 
	$ußge
(*
«me
)

174 
	`Ârötf
(
°dîr
,

177 
«me
);

178 
	}
}

	@/workspaces/libnet/sample/isl.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
c
, 
Àn
;

42 
lib√t_t
 *
l
;

43 
lib√t_±ag_t
 
t
;

44 
u_ch¨
 *
d°
;

45 
u_l⁄g
 
ù
;

46 
u_ch¨
 
dho°
[5] = {0x01, 0x00, 0x0c, 0x00, 0x00};

47 
u_ch¨
 
¢≠
[6] = {0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00};

48 *
devi˚
 = 
NULL
;

49 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

51 
	`¥ötf
("libnet 1.1Öacket shaping: [ISL]\n");

53 
devi˚
 = 
NULL
;

54 
d°
 = 
NULL
;

55 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "i:d:")Ë!
EOF
)

57 
c
)

60 
d°
 = 
	`lib√t_hex_©⁄
(
›èrg
, &
Àn
);

63 
devi˚
 = 
›èrg
;

68 i‡(
d°
 =
NULL
)

70 
	`Ârötf
(
°dîr
, "usage %s -d dst [-i interface]\n",

71 
¨gv
[0]);

72 
	`exô
(
EXIT_FAILURE
);

78 
l
 = 
	`lib√t_öô
(

79 
LIBNET_LINK
,

80 
devi˚
,

81 
îrbuf
);

83 i‡(
l
 =
NULL
)

85 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

86 
	`exô
(
EXIT_FAILURE
);

89 
ù
 = 
	`lib√t_gë_ùaddr4
(
l
);

91 
t
 = 
	`lib√t_buûd_¨p
(

92 
ARPHRD_ETHER
,

93 
ETHERTYPE_IP
,

96 
ARPOP_REPLY
,

97 
íë_§c
,

98 (
u_ch¨
 *)&
ù
,

99 
íë_d°
,

100 (
u_ch¨
 *)&
ù
,

101 
NULL
,

103 
l
,

105 i‡(
t
 == -1)

107 
	`Ârötf
(
°dîr
, "C™'àbuûd ARP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

108 
bad
;

111 
t
 = 
	`lib√t_autobuûd_ëhî√t
(

112 
d°
,

113 
ETHERTYPE_ARP
,

114 
l
);

115 i‡(
t
 == -1)

117 
	`Ârötf
(
°dîr
, "Can't buildÉthernet header: %s\n",

118 
	`lib√t_gëîr‹
(
l
));

119 
bad
;

122 
t
 = 
	`lib√t_buûd_i¶
(

123 
dho°
,

126 
íë_§c
,

128 
¢≠
,

132 
NULL
,

134 
l
,

136 i‡(
t
 == -1)

138 
	`Ârötf
(
°dîr
, "Can't build ISL header: %s\n",

139 
	`lib√t_gëîr‹
(
l
));

140 
bad
;

147 
c
 = 
	`lib√t_wrôe
(
l
);

149 i‡(
c
 == -1)

151 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

152 
bad
;

156 
	`Ârötf
(
°dîr
, "WrŸê%d byã ISLÖackë; checkÅhêwúe.\n", 
c
);

158 
	`‰ì
(
d°
);

159 
	`lib√t_de°roy
(
l
);

160  (
EXIT_SUCCESS
);

161 
bad
:

162 
	`‰ì
(
d°
);

163 
	`lib√t_de°roy
(
l
);

164  (
EXIT_FAILURE
);

165 
	}
}

	@/workspaces/libnet/sample/libnet_test.h

7 #i‚de‡
__LIBNET_TEST_H


8 
	#__LIBNET_TEST_H


	)

10 #i‡(
HAVE_CONFIG_H
)

11 
	~"../ö˛ude/c⁄fig.h
"

14 
	~"../ö˛ude/lib√t.h
"

16 #i‡!
deföed
(
__WIN32__
)

17 
	~<√töë/ö.h
>

20 
	#lib√t_timîsub
(
tvp
, 
uvp
, 
vvp
) \

22 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

23 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

24 i‡((
vvp
)->
tv_u£c
 < 0) { \

25 (
vvp
)->
tv_£c
--; \

26 (
vvp
)->
tv_u£c
 += 1000000; \

28 } 0)

	)

30 
u_ch¨
 
	gíë_§c
[6] = {0x0d, 0x0e, 0x0a, 0x0d, 0x00, 0x00};

31 
u_ch¨
 
	gíë_d°
[6] = {0x00, 0x10, 0x67, 0x00, 0xb1, 0x86};

32 
u_ch¨
 
	gù_§c
[4] = {0x0a, 0x00, 0x00, 0x01};

33 
u_ch¨
 
	gù_d°
[4] = {0x0a, 0x00, 0x00, 0x02};

34 
u_ch¨
 
	gfddi_§c
[6] = {0x00, 0x0d, 0x0e, 0x0a, 0x0d, 0x00};

35 
u_ch¨
 
	gfddi_d°
[6] = {0x00, 0x10, 0x67, 0x00, 0xb1, 0x86};

36 
u_ch¨
 
	gå_§c
[6] = {0x00, 0x0d, 0x0e, 0x0a, 0x0d, 0x00};

37 
u_ch¨
 
	gå_d°
[6] = {0x00, 0x10, 0x67, 0x00, 0xb1, 0x86};

39 
u_ch¨
 
	g‹g_code
[3] = {0x00, 0x00, 0x00};

41 
ußge
(*);

43 #i‡
deföed
(
__WIN32__
)

44 
	~<gë›t.h
>

45 
	~<wösock2.h
>

46 
	~<ws2t˝ù.h
>

48 #i‚de‡
_MSC_VER


49 
	~<sys/time.h
>

	@/workspaces/libnet/sample/lldp.c

6 #i‡(
HAVE_CONFIG_H
)

7 
	~"../ö˛ude/c⁄fig.h
"

9 
	~"lib√t_ã°.h
"

11 
	#DEVICE_NAME
 "lo"

	)

14 
	$maö
(
¨gc
, *
¨gv
[])

16 ()
¨gc
;

18 
c
;

19 
lib√t_t
 *
l
;

20 
lib√t_±ag_t
 
t
;

21 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

22 
uöt8_t
 
Œdp_d°_mac
[6] = {0x01, 0x80, 0xC2, 0x00, 0x00, 0x0E};

24 
l
 = 
	`lib√t_öô
(
LIBNET_LINK
, 
DEVICE_NAME
, 
îrbuf
);

25 i‡(
l
 =
NULL
)

27 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

28  (
EXIT_FAILURE
);

43 
t
 = 
	`lib√t_buûd_Œdp_íd
(
l
, 0);

44 i‡(
t
 == -1)

46 
	`Ârötf
(
°dîr
, "Can't buildÜldpÉnd ofÜldpduÅlv: %s\n",

47 
	`lib√t_gëîr‹
(
l
));

48 
bad
;

55 
uöt8_t
 
‹g_•ec
[9] = {0x00, 0x12, 0x0f,

59 
t
 = 
	`lib√t_buûd_Œdp_‹g_•ec
(
‹g_•ec
, (‹g_•ec), 
l
, 0);

60 i‡(
t
 == -1)

62 
	`Ârötf
(
°dîr
, "C™'àbuûd Org™iz©i⁄ S≥cifi¯év: %s\n", 
	`lib√t_gëîr‹
(
l
));

63 
bad
;

69 c⁄° 
uöt16_t
 
âl
 = 
	`ht⁄s
(120);

70 
t
 = 
	`lib√t_buûd_Œdp_âl
(
âl
, 
l
, 0);

71 i‡(
t
 == -1)

73 
	`Ârötf
(
°dîr
, "C™'àbuûdÅéÅlv: %s\n", 
	`lib√t_gëîr‹
(
l
));

74 
bad
;

80 
uöt8_t
 
öãrÁ˚_Æüs
[15] = {0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b,

82 
t
 = 
	`lib√t_buûd_Œdp_p‹t
(
LIBNET_LLDP_PORT_ID_SUBTYPE_IF_ALIAS
,

83 
öãrÁ˚_Æüs
, (öãrÁ˚_Æüs), 
l
, 0);

84 i‡(
t
 == -1)

86 
	`Ârötf
(
°dîr
, "C™'àbuûdÜld∞p‹àidÅlv: %s\n", 
	`lib√t_gëîr‹
(
l
));

87 
bad
;

93 
uöt8_t
 
chassis_mac
[6] = {0x00, 0x19, 0x2f, 0xa7, 0xb2, 0x8d};

94 
t
 = 
	`lib√t_buûd_Œdp_chassis
(
LIBNET_LLDP_CHASSIS_ID_SUBTYPE_MAC
, 
chassis_mac
,

95 (
chassis_mac
), 
l
, 0);

96 i‡(
t
 == -1)

98 
	`Ârötf
(
°dîr
, "Can't buildÜldp chassis idÅlv: %s\n",

99 
	`lib√t_gëîr‹
(
l
));

100 
bad
;

103 
t
 = 
	`lib√t_buûd_ëhî√t
(
Œdp_d°_mac
, (
uöt8_t
 *)
	`lib√t_gë_hwaddr
(
l
),

104 
LIBNET_LLDP_ETH_TYPE
, 
NULL
, 0, 
l
, 0);

105 i‡(
t
 == -1)

107 
	`Ârötf
(
°dîr
, "C™'àbuûdÉthî√àhódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

108 
bad
;

112 
c
 = 
	`lib√t_wrôe
(
l
);

113 i‡(
c
 == -1)

115 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

116 
bad
;

120 
	`Ârötf
(
°dîr
, "WrŸê%d byã LLDP fømê\"%s\"\n", 
c
, 
¨gv
[2]);

123 
	`lib√t_de°roy
(
l
);

124  (
EXIT_SUCCESS
);

125 
bad
:

126 
	`lib√t_de°roy
(
l
);

127  (
EXIT_FAILURE
);

128 
	}
}

	@/workspaces/libnet/sample/mpls.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
c
;

42 *
˝
;

43 
lib√t_t
 *
l
;

44 
lib√t_±ag_t
 
t
;

45 
u_ch¨
 *
∑ylﬂd
;

46 
u_l⁄g
 
∑ylﬂd_s
;

47 
u_l⁄g
 
§c_ù
, 
d°_ù
;

48 
u_sh‹t
 
§c_¥t
, 
d°_¥t
;

49 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

51 
	`¥ötf
("libnet 1.1Öacket shaping: MPLS[link]\n");

56 
l
 = 
	`lib√t_öô
(

57 
LIBNET_LINK_ADV
,

58 
NULL
,

59 
îrbuf
);

61 i‡(
l
 =
NULL
)

63 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

64 
	`exô
(
EXIT_FAILURE
);

67 
§c_ù
 = 0;

68 
d°_ù
 = 0;

69 
§c_¥t
 = 0;

70 
d°_¥t
 = 0;

71 
∑ylﬂd
 = 
NULL
;

72 
∑ylﬂd_s
 = 0;

73 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:p:")Ë!
EOF
)

75 
c
)

84 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

86 
	`ußge
(
¨gv
[0]);

88 *
˝
++ = 0;

89 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

90 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

92 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

93 
	`exô
(
EXIT_FAILURE
);

97 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

99 
	`ußge
(
¨gv
[0]);

101 *
˝
++ = 0;

102 
§c_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

103 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

105 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

106 
	`exô
(
EXIT_FAILURE
);

110 
∑ylﬂd
 = (
u_ch¨
 *)
›èrg
;

111 
∑ylﬂd_s
 = 
	`°æí
((*)
∑ylﬂd
);

114 
	`exô
(
EXIT_FAILURE
);

118 i‡(!
§c_ù
 || !
§c_¥t
 || !
d°_ù
 || !
d°_¥t
)

120 
	`ußge
(
¨gv
[0]);

121 
	`exô
(
EXIT_FAILURE
);

124 
t
 = 
	`lib√t_buûd_t˝
(

125 
§c_¥t
,

126 
d°_¥t
,

129 
TH_SYN
,

133 
LIBNET_TCP_H
 + 
∑ylﬂd_s
,

134 
∑ylﬂd
,

135 
∑ylﬂd_s
,

136 
l
,

138 i‡(
t
 == -1)

140 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

141 
bad
;

144 
t
 = 
	`lib√t_buûd_ùv4
(

145 
LIBNET_IPV4_H
 + 
LIBNET_TCP_H
 + 
∑ylﬂd_s
,

150 
IPPROTO_TCP
,

152 
§c_ù
,

153 
d°_ù
,

154 
NULL
,

156 
l
,

158 i‡(
t
 == -1)

160 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

161 
bad
;

165 
t
 = 
	`lib√t_buûd_m∂s
(

168 
LIBNET_MPLS_BOS_ON
,

170 
NULL
,

172 
l
,

174 i‡(
t
 == -1)

176 
	`Ârötf
(
°dîr
, "C™'àbuûd MPLS hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

177 
bad
;

179 
t
 = 
	`lib√t_buûd_m∂s
(

182 
LIBNET_MPLS_BOS_ON
,

184 
NULL
,

186 
l
,

188 i‡(
t
 == -1)

190 
	`Ârötf
(
°dîr
, "C™'àbuûd MPLS hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

191 
bad
;

193 
t
 = 
	`lib√t_buûd_m∂s
(

196 
LIBNET_MPLS_BOS_ON
,

198 
NULL
,

200 
l
,

202 i‡(
t
 == -1)

204 
	`Ârötf
(
°dîr
, "C™'àbuûd MPLS hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

205 
bad
;

208 
t
 = 
	`lib√t_buûd_ëhî√t
(

209 
íë_d°
,

210 
íë_§c
,

211 
ETHERTYPE_MPLS
,

212 
NULL
,

214 
l
,

216 i‡(
t
 == -1)

218 
	`Ârötf
(
°dîr
, "C™'àbuûdÉthî√àhódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

219 
bad
;

225 
c
 = 
	`lib√t_wrôe
(
l
);

226 i‡(
c
 == -1)

228 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

229 
bad
;

233 
	`Ârötf
(
°dîr
, "WrŸê%d byã MPLS føme; checkÅhêwúe.\n", 
c
);

235 
	`lib√t_de°roy
(
l
);

236  (
EXIT_SUCCESS
);

237 
bad
:

238 
	`lib√t_de°roy
(
l
);

239  (
EXIT_FAILURE
);

240 
	}
}

243 
	$ußge
(*
«me
)

245 
	`Ârötf
(
°dîr
,

248 
«me
);

249 
	}
}

	@/workspaces/libnet/sample/ntp.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

39 
	$maö
(
¨gc
, **
¨gv
)

41 
c
;

42 
lib√t_t
 *
l
;

43 
u_l⁄g
 
d°_ù
;

44 
lib√t_±ag_t
 
t
;

45 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

47 
	`¥ötf
("libnet 1.1 NTPÖacket shaping[raw --áutobuilding IP]\n");

52 
l
 = 
	`lib√t_öô
(

53 
LIBNET_RAW4
,

54 
NULL
,

55 
îrbuf
);

57 i‡(
l
 =
NULL
)

59 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

60 
	`exô
(
EXIT_FAILURE
);

63 
d°_ù
 = 0;

64 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:")Ë!
EOF
)

66 
c
)

75 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

77 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

78 
	`exô
(1);

83 i‡(!
d°_ù
)

85 
	`ußge
(
¨gv
[0]);

86 
	`exô
(
EXIT_FAILURE
);

105 
t
 = 
	`lib√t_buûd_¡p
(

106 
LIBNET_NTP_LI_AC
,

107 
LIBNET_NTP_VN_4
,

108 
LIBNET_NTP_MODE_S
,

109 
LIBNET_NTP_STRATUM_PRIMARY
,

116 
LIBNET_NTP_REF_PPS
,

125 
NULL
,

127 
l
,

129 i‡(
t
 == -1)

131 
	`Ârötf
(
°dîr
, "C™'àbuûd NTP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

132 
bad
;

135 
	`lib√t_£ed_¥™d
(
l
);

136 
t
 = 
	`lib√t_buûd_udp
(

137 
	`lib√t_gë_¥™d
(
LIBNET_PRu16
),

139 
LIBNET_UDP_H
 + 
LIBNET_NTP_H
,

141 
NULL
,

143 
l
,

145 i‡(
t
 == -1)

147 
	`Ârötf
(
°dîr
, "C™'àbuûd UDP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

148 
bad
;

151 
t
 = 
	`lib√t_autobuûd_ùv4
(

152 
LIBNET_IPV4_H
 + 
LIBNET_UDP_H
 + 
LIBNET_NTP_H
,

153 
IPPROTO_UDP
,

154 
d°_ù
,

155 
l
);

156 i‡(
t
 == -1)

158 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

159 
bad
;

166 
	`Ârötf
(
°dîr
, "»c⁄èö†®%d byãÖackë\n", 
	`lib√t_gë∑ckë_size
(
l
));

167 
c
 = 
	`lib√t_wrôe
(
l
);

168 i‡(
c
 == -1)

170 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

171 
bad
;

175 
	`Ârötf
(
°dîr
, "WrŸê%d byã NTPÖackë; checkÅhêwúe.\n", 
c
);

177 
	`lib√t_de°roy
(
l
);

178  (
EXIT_SUCCESS
);

179 
bad
:

180 
	`lib√t_de°roy
(
l
);

181  (
EXIT_FAILURE
);

182 
	}
}

186 
	$ußge
(*
«me
)

188 
	`Ârötf
(
°dîr
,

190 
«me
);

191 
	}
}

	@/workspaces/libnet/sample/ospf_hello.c

36 #i‡(
HAVE_CONFIG_H
)

37 
	~"../ö˛ude/c⁄fig.h
"

39 
	~"lib√t_ã°.h
"

42 
	$maö
(
¨gc
, **
¨gv
)

44 
c
;

45 
lib√t_t
 *
l
;

46 
lib√t_±ag_t
 
t
;

47 
u_l⁄g
 
§c
, 
d°
;

48 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

49 *
to
, *
‰om
;

50 
u_ch¨
 
auth
[8] = {0,0,0,0,0,0,0,0};

53 
	`¥ötf
("libnet 1.1 OSPF HelloÖacket shaping[raw]\n");

55 i‡(
¨gc
 != 3)

57 
	`ußge
(
¨gv
[0]);

60 
‰om
 = 
¨gv
[1];

61 
to
 = 
¨gv
[2];

66 
l
 = 
	`lib√t_öô
(

67 
LIBNET_RAW4
,

68 
NULL
,

69 
îrbuf
);

71 i‡(
l
 =
NULL
)

73 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

74 
	`exô
(
EXIT_FAILURE
);

78 
§c
 = 
	`lib√t_«me2addr4
(
l
, 
‰om
, 
LIBNET_DONT_RESOLVE
);

79 
d°
 = 
	`lib√t_«me2addr4
(
l
, 
to
, 
LIBNET_DONT_RESOLVE
);

81 
t
 = 
	`lib√t_buûd_o•fv2_hñlo
(

87 
§c
,

88 
§c
,

89 
NULL
,

91 
l
,

93 i‡(
t
 == -1)

95 
	`Ârötf
(
°dîr
, "C™'àbuûd OSPF HELLO hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

96 
bad
;

100 
t
 = 
	`lib√t_buûd_d©a
(

101 
auth
,

102 
LIBNET_OSPF_AUTH_H
,

103 
l
,

105 i‡(
t
 == -1)

107 
	`Ârötf
(
°dîr
, "C™'àbuûd OSPFáuth hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

108 
bad
;

111 
t
 = 
	`lib√t_buûd_o•fv2
(

112 
LIBNET_OSPF_HELLO_H
 + 
LIBNET_OSPF_AUTH_H
,

113 
LIBNET_OSPF_HELLO
,

114 
	`ht⁄l
(0xd000000d),

115 
	`ht⁄l
(0xc0ffee00),

117 
LIBNET_OSPF_AUTH_NULL
,

118 
NULL
,

120 
l
,

123 i‡(
t
 == -1)

125 
	`Ârötf
(
°dîr
, "C™'àbuûd OSPF hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

126 
bad
;

129 
t
 = 
	`lib√t_buûd_ùv4
(

130 
LIBNET_IPV4_H
 + 
LIBNET_OSPF_H
 +

131 
LIBNET_OSPF_HELLO_H
 + 
LIBNET_OSPF_AUTH_H
,

134 
IP_DF
,

136 
IPPROTO_OSPF
,

138 
§c
,

139 
d°
,

140 
NULL
,

142 
l
,

144 i‡(
t
 == -1)

146 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

147 
bad
;

153 
c
 = 
	`lib√t_wrôe
(
l
);

154 i‡(
c
 == -1)

156 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

157 
bad
;

161 
	`Ârötf
(
°dîr
, "WrŸê%d byã OSPFÖackë; checkÅhêwúe.\n", 
c
);

163 
	`lib√t_de°roy
(
l
);

164  (
EXIT_SUCCESS
);

165 
bad
:

166 
	`lib√t_de°roy
(
l
);

167  (
EXIT_FAILURE
);

168 
	}
}

172 
	$ußge
(*
≤ame
)

174 
	`¥ötf
("Ußge: %†<sour˚ ip> <de°. ip> <√ighb‹>\n", 
≤ame
);

175 
	`exô
(
EXIT_SUCCESS
);

176 
	}
}

	@/workspaces/libnet/sample/ospf_lsa.c

36 #i‡(
HAVE_CONFIG_H
)

37 
	~"../ö˛ude/c⁄fig.h
"

39 
	~"lib√t_ã°.h
"

43 
	$maö
(
¨gc
, **
¨gv
)

45 
c
;

46 
lib√t_t
 *
l
;

47 
lib√t_±ag_t
 
t
;

48 
u_l⁄g
 
§c
, 
d°
;

49 
u_ch¨
 
auth
[8] = {0,0,0,0,0,0,0,0};

50 *
‰om
, *
to
, 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

52 
	`¥ötf
("libnet 1.1 OSPF LSAÖacket shaping[raw]\n");

54 i‡(
¨gc
 != 3)

56 
	`ußge
(
¨gv
[0]);

59 
‰om
 = 
¨gv
[1];

60 
to
 = 
¨gv
[2];

65 
l
 = 
	`lib√t_öô
(

66 
LIBNET_RAW4
,

67 
NULL
,

68 
îrbuf
);

70 i‡(
l
 =
NULL
)

72 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

73 
	`exô
(
EXIT_FAILURE
);

77 
§c
 = 
	`lib√t_«me2addr4
(
l
, 
‰om
, 
LIBNET_DONT_RESOLVE
);

78 
d°
 = 
	`lib√t_«me2addr4
(
l
, 
to
, 
LIBNET_DONT_RESOLVE
);

80 
t
 = 
	`lib√t_buûd_o•fv2_lß_√t
(

83 
NULL
,

85 
l
,

87 i‡(
t
 == -1)

89 
	`Ârötf
(
°dîr
, "C™'àbuûd LSAÇë hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

90 
bad
;

93 
t
 = 
	`lib√t_buûd_o•fv2_lß
(

96 
LIBNET_LS_TYPE_NET
,

97 
	`ht⁄l
(0xc0ffee00),

98 
§c
,

101 
LIBNET_OSPF_LS_NET_H
 + 
LIBNET_OSPF_LSA_H
,

102 
NULL
,

104 
l
,

106 i‡(
t
 == -1)

108 
	`Ârötf
(
°dîr
, "C™'àbuûd LSA hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

109 
bad
;

113 
t
 = 
	`lib√t_buûd_d©a
(

114 
auth
,

115 
LIBNET_OSPF_AUTH_H
,

116 
l
,

118 i‡(
t
 == -1)

120 
	`Ârötf
(
°dîr
, "C™'àbuûd OSPF AUTH hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

121 
bad
;

124 
t
 = 
	`lib√t_buûd_o•fv2
(

125 
LIBNET_OSPF_LSA_H
 + 
LIBNET_OSPF_AUTH_H
 +

126 
LIBNET_OSPF_LS_NET_H
,

127 
LIBNET_OSPF_LSA
,

128 
	`ht⁄l
(0xd000000d),

129 
	`ht⁄l
(0xc0ffee00),

131 
LIBNET_OSPF_AUTH_NULL
,

132 
NULL
,

134 
l
,

136 i‡(
t
 == -1)

138 
	`Ârötf
(
°dîr
, "C™'àbuûd OSPF hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

139 
bad
;

142 
t
 = 
	`lib√t_buûd_ùv4
(

143 
LIBNET_IPV4_H
 + 
LIBNET_OSPF_H
 + 
LIBNET_OSPF_AUTH_H
 +

144 
LIBNET_OSPF_LSA_H
 + 
LIBNET_OSPF_LS_NET_H
,

147 
IP_DF
,

149 
IPPROTO_OSPF
,

151 
§c
,

152 
d°
,

153 
NULL
,

155 
l
,

157 i‡(
t
 == -1)

159 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

160 
bad
;

166 
c
 = 
	`lib√t_wrôe
(
l
);

167 i‡(
c
 == -1)

169 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

170 
bad
;

174 
	`Ârötf
(
°dîr
, "Wrote %d byte OSPFÖacket; checkÅhe wire.\n",

175 
c
);

177 
	`lib√t_de°roy
(
l
);

178  (
EXIT_SUCCESS
);

179 
bad
:

180 
	`lib√t_de°roy
(
l
);

181  (
EXIT_FAILURE
);

182 
	}
}

186 
	$ußge
(*
≤ame
)

188 
	`¥ötf
("Ußge: %†<sour˚ ip> <de°. ip>\n", 
≤ame
);

189 
	`exô
(0);

190 
	}
}

	@/workspaces/libnet/sample/ping_of_death.c

36 #i‡(
HAVE_CONFIG_H
)

37 
	~"../ö˛ude/c⁄fig.h
"

39 
	~"lib√t_ã°.h
"

42 
	#FRAG_LEN
 1472

	)

45 
	$maö
(
¨gc
, **
¨gv
)

47 
lib√t_t
 *
l
;

48 
lib√t_±ag_t
 
ù
;

49 
lib√t_±ag_t
 
icmp
;

50 
lib√t_°©s
 
ls
;

51 
u_l⁄g
 
Áke§c
, 
èrgë
;

52 
u_ch¨
 *
d©a
;

53 
c
, 
i
, 
Êags
, 
off£t
, 
Àn
;

54 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

56 
	`¥ötf
("libnet 1.1 Ping of Death[raw]\n");

61 
l
 = 
	`lib√t_öô
(

62 
LIBNET_RAW4
,

63 
NULL
,

64 
îrbuf
);

66 i‡(
l
 =
NULL
)

68 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s\n", 
îrbuf
);

69 
	`exô
(
EXIT_FAILURE
);

72 i‡(
¨gc
 !2 || ((
èrgë
 = 
	`lib√t_«me2addr4
(
l
, 
¨gv
[1], 
LIBNET_RESOLVE
)) == -1))

74 
	`Ârötf
(
°dîr
, "Ußge: %†<èrgë>\n", 
¨gv
[0]);

75 
	`exô
(
EXIT_FAILURE
);

79 
	`lib√t_£ed_¥™d
(
l
);

80 
Áke§c
 = 
	`lib√t_gë_¥™d
(
LIBNET_PRu32
);

82 
d©a
 = 
	`mÆloc
(
FRAG_LEN
);

83 
i
 = 0 ; i < 
FRAG_LEN
 ; i++)

86 
d©a
[
i
] = 0x3a;

89 
ù
 = 
LIBNET_PTAG_INITIALIZER
;

90 
icmp
 = 
LIBNET_PTAG_INITIALIZER
;

92 
i
 = 0 ; i < 65536 ; i +(
LIBNET_ICMPV4_ECHO_H
 + 
FRAG_LEN
))

94 
off£t
 = 
i
;

95 
Êags
 = 0;

97 i‡(
off£t
 < 65120)

99 
Êags
 = 
IP_MF
;

100 
Àn
 = 
FRAG_LEN
;

105 
Àn
 = 410;

108 
icmp
 = 
	`lib√t_buûd_icmpv4_echo
(

109 
ICMP_ECHO
,

114 
d©a
,

115 
Àn
,

116 
l
,

117 
icmp
);

118 i‡(
icmp
 == -1)

120 
	`Ârötf
(
°dîr
, "C™'àbuûd ICMP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

121 
bad
;

124 
	`lib√t_toggÀ_checksum
(
l
, 
icmp
, 0);

126 
ù
 = 
	`lib√t_buûd_ùv4
(

127 
LIBNET_IPV4_H
 + 
LIBNET_ICMPV4_ECHO_H
 + 
Àn
,

130 
Êags
 | (
off£t
 >> 3),

132 
IPPROTO_ICMP
,

134 
Áke§c
,

135 
èrgë
,

136 
NULL
,

138 
l
,

139 
ù
);

140 i‡(
ù
 == -1)

142 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

143 
bad
;

146 
c
 = 
	`lib√t_wrôe
(
l
);

147 i‡(
c
 == -1)

149 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

153 
	`¥ötf
("%†> %s: (‰ag 666:%d@%d%s)\n", 
	`lib√t_addr2«me4
(
Áke§c
,0),

154 
¨gv
[1], 
LIBNET_ICMPV4_ECHO_H
 + 
Àn
, 
off£t
, 
Êags
 ? "+" : "");

157 
	`lib√t_°©s
(
l
, &
ls
);

158 
	`Ârötf
(
°dîr
, "Packets sent: %lld\n"

161 ()
ls
.
∑ckës_£¡
, (Ós.
∑ckë_îr‹s
,

162 ()
ls
.
byãs_wrôãn
);

163 
	`lib√t_de°roy
(
l
);

164 
	`‰ì
(
d©a
);

165  (
EXIT_SUCCESS
);

166 
bad
:

167 
	`lib√t_de°roy
(
l
);

168 
	`‰ì
(
d©a
);

169  (
EXIT_FAILURE
);

170 
	}
}

	@/workspaces/libnet/sample/rpc_tcp.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

39 
	$maö
(
¨gc
, **
¨gv
)

41 
c
;

42 *
˝
;

43 
lib√t_t
 *
l
;

44 
lib√t_±ag_t
 
t
;

45 *
∑ylﬂd
;

46 
u_sh‹t
 
∑ylﬂd_s
;

47 
u_l⁄g
 
§c_ù
, 
d°_ù
;

48 
u_sh‹t
 
§c_¥t
, 
d°_¥t
;

49 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

51 
	`¥ötf
("libnet 1.1Öacket shaping: RPC TCP[raw]\n");

56 
l
 = 
	`lib√t_öô
(

57 
LIBNET_RAW4
,

58 
NULL
,

59 
îrbuf
);

61 i‡(
l
 =
NULL
)

63 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

64 
	`exô
(
EXIT_FAILURE
);

67 
§c_ù
 = 0;

68 
d°_ù
 = 0;

69 
§c_¥t
 = 0;

70 
d°_¥t
 = 0;

71 
∑ylﬂd
 = 
NULL
;

72 
∑ylﬂd_s
 = 0;

73 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:p:")Ë!
EOF
)

75 
c
)

84 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

86 
	`ußge
(
¨gv
[0]);

88 *
˝
++ = 0;

89 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

90 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

92 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

93 
	`exô
(
EXIT_FAILURE
);

98 
∑ylﬂd
 = 
›èrg
;

99 
∑ylﬂd_s
 = 
	`°æí
(
∑ylﬂd
);

102 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

104 
	`ußge
(
¨gv
[0]);

106 *
˝
++ = 0;

107 
§c_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

108 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

110 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

111 
	`exô
(
EXIT_FAILURE
);

116 i‡(!
§c_ù
 || !
§c_¥t
 || !
d°_ù
 || !
d°_¥t
)

118 
	`ußge
(
¨gv
[0]);

119 
	`exô
(
EXIT_FAILURE
);

122 
t
 = 
	`lib√t_buûd_Ωc_ˇŒ
(

123 
LIBNET_RPC_LAST_FRAG
 | 
LIBNET_RPC_CALL_TCP_H
,

125 
LIBNET_PMAP_PROGRAM
,

127 
LIBNET_PMAP_PROC_DUMP
,

130 
NULL
,

133 
NULL
,

134 (
uöt8_t
 *)
∑ylﬂd
,

135 
∑ylﬂd_s
,

136 
l
,

138 i‡(
t
 == -1)

140 
	`Ârötf
(
°dîr
, "C™'àbuûd RPC hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

141 
bad
;

144 
t
 = 
	`lib√t_buûd_t˝
(

145 
§c_¥t
,

146 
d°_¥t
,

149 
TH_ACK
,

153 
LIBNET_TCP_H
 + 44 + 
∑ylﬂd_s
,

154 
NULL
,

156 
l
,

158 i‡(
t
 == -1)

160 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

161 
bad
;

164 
t
 = 
	`lib√t_buûd_ùv4
(

165 
LIBNET_IPV4_H
 + 
LIBNET_TCP_H
 + 44 + 
∑ylﬂd_s
,

170 
IPPROTO_TCP
,

172 
§c_ù
,

173 
d°_ù
,

174 
NULL
,

176 
l
,

178 i‡(
t
 == -1)

180 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

181 
bad
;

187 
c
 = 
	`lib√t_wrôe
(
l
);

188 i‡(
c
 == -1)

190 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

191 
bad
;

195 
	`Ârötf
(
°dîr
, "WrŸê%d byã RPC TCPÖackë; checkÅhêwúe.\n", 
c
);

197 
	`lib√t_de°roy
(
l
);

198  (
EXIT_SUCCESS
);

199 
bad
:

200 
	`lib√t_de°roy
(
l
);

201  (
EXIT_FAILURE
);

202 
	}
}

206 
	$ußge
(*
«me
)

208 
	`Ârötf
(
°dîr
,

211 
«me
);

212 
	}
}

	@/workspaces/libnet/sample/rpc_udp.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

40 
	$maö
(
¨gc
, *
¨gv
[])

42 
c
;

43 *
˝
;

44 
lib√t_t
 *
l
;

45 
lib√t_±ag_t
 
t
;

46 
lib√t_±ag_t
 
ù
;

47 
lib√t_±ag_t
 
udp
;

48 *
∑ylﬂd
;

49 
u_sh‹t
 
∑ylﬂd_s
;

50 
u_l⁄g
 
§c_ù
, 
d°_ù
;

51 
u_sh‹t
 
§c_¥t
, 
d°_¥t
;

52 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

54 
	`¥ötf
("libnet 1.1Öacket shaping: RPC + UDP + IP options[raw]\n");

59 
l
 = 
	`lib√t_öô
(

60 
LIBNET_RAW4
,

61 
NULL
,

62 
îrbuf
);

64 i‡(
l
 =
NULL
)

66 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s\n", 
îrbuf
);

67 
	`exô
(
EXIT_FAILURE
);

70 
§c_ù
 = 0;

71 
d°_ù
 = 0;

72 
§c_¥t
 = 0;

73 
d°_¥t
 = 0;

74 
∑ylﬂd
 = 
NULL
;

75 
∑ylﬂd_s
 = 0;

76 
udp
 = 0;

77 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:p:")Ë!
EOF
)

79 
c
)

88 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

90 
	`ußge
(
¨gv
[0]);

92 *
˝
++ = 0;

93 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

94 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

96 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
); 
	`exô
(
EXIT_FAILURE
);

100 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

102 
	`ußge
(
¨gv
[0]);

104 *
˝
++ = 0;

105 
§c_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

106 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

108 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

109 
	`exô
(
EXIT_FAILURE
);

113 
∑ylﬂd
 = 
›èrg
;

114 
∑ylﬂd_s
 = 
	`°æí
(
∑ylﬂd
);

117 
	`exô
(
EXIT_FAILURE
);

121 i‡(!
§c_ù
 || !
§c_¥t
 || !
d°_ù
 || !
d°_¥t
)

123 
	`ußge
(
¨gv
[0]);

124 
	`exô
(
EXIT_FAILURE
);

127 
t
 = 
	`lib√t_buûd_Ωc_ˇŒ
(

135 
NULL
,

138 
NULL
,

139 (
uöt8_t
 *)
∑ylﬂd
,

140 
∑ylﬂd_s
,

141 
l
,

143 i‡(
t
 == -1)

145 
	`Ârötf
(
°dîr
, "C™'àbuûd RPC hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

146 
bad
;

149 
udp
 = 
	`lib√t_buûd_udp
(

150 
§c_¥t
,

151 
d°_¥t
,

152 
LIBNET_UDP_H
 + 40 +
∑ylﬂd_s
,

154 
NULL
,

156 
l
,

157 
udp
);

158 i‡(
udp
 == -1)

160 
	`Ârötf
(
°dîr
, "C™'àbuûd UDP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

161 
bad
;

164 
ù
 = 
	`lib√t_buûd_ùv4
(

165 
LIBNET_IPV4_H
 + 40 + 
∑ylﬂd_s
 + 
LIBNET_UDP_H
,

170 
IPPROTO_UDP
,

172 
§c_ù
,

173 
d°_ù
,

174 
NULL
,

176 
l
,

178 i‡(
ù
 == -1)

180 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

181 
bad
;

187 
c
 = 
	`lib√t_wrôe
(
l
);

188 i‡(
c
 == -1)

190 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

191 
bad
;

195 
	`Ârötf
(
°dîr
, "WrŸê%d byã RPC UDPÖackë; checkÅhêwúe.\n", 
c
);

198 
	`lib√t_de°roy
(
l
);

199  (
EXIT_SUCCESS
);

200 
bad
:

201 
	`lib√t_de°roy
(
l
);

202  (
EXIT_FAILURE
);

203 
	}
}

206 
	$ußge
(*
«me
)

208 
	`Ârötf
(
°dîr
,

211 
«me
);

212 
	}
}

	@/workspaces/libnet/sample/sebek.c

32 
	~"lib√t_ã°.h
"

34 
	$ußge
(*
«me
)

36 
	`Ârötf
(
°dîr
,

40 
«me
);

42 
	}
}

46 
	$maö
(
¨gc
, *
¨gv
[])

48 
c
, 
p‹t
 = 1101;

49 
lib√t_t
 *
l
;

50 *
devi˚
 = 
NULL
;

51 *
ëh_d°
 = "11:11:11:11:11:11";

52 *
d°
 = "2.2.2.2", *
§c
 = "1.1.1.1";

53 
u_l⁄g
 
§c_ù
, 
d°_ù
;

54 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

55 
lib√t_±ag_t
 
±ag
 = 0;

56 
u_ch¨
 *
∑ylﬂd
 = 0;

57 
∑ylﬂd_Êag
 = 0;

58 
u_l⁄g
 
∑ylﬂd_s
 = 0;

59 
magic
 = 0x0defaced,

60 
cou¡î
 = 0x12345678,

61 
£c
 = 0, 
u£c
 = 0,

62 
pid
 = 1,

63 
uid
 = 666,

64 
fd
 = 2;

65 *
cmd
 = "./h4ckw0r1D";

66 
Àngth
 = 
	`°æí
(
cmd
)+1;

67 
vîsi⁄
 = 
SEBEK_PROTO_VERSION
, 
ty≥
 = 
SEBEK_TYPE_READ
;

69 
	`¥ötf
("libnet 1.1Öacket shaping: Sebek[link]\n");

75 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "D:d:s:u:m:v:t:S:U:P:I:f:c:p:i:h")Ë!
EOF
)

77 
c
)

80 
ëh_d°
 = 
›èrg
;

83 
d°
 = 
›èrg
;

87 
§c
 = 
›èrg
;

91 
devi˚
 = 
›èrg
;

95 
p‹t
 = 
	`©oi
(
›èrg
);

99 
magic
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

103 
vîsi⁄
 = (Ë
	`°πoul
(
›èrg
, 
NULL
, 10);

107 
ty≥
 = (Ë
	`°πoul
(
›èrg
, 
NULL
, 10);

111 
£c
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

115 
u£c
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

119 
pid
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

123 
uid
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

127 
fd
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

131 
cmd
 = 
›èrg
;

132 
Àngth
 = 
	`°æí
(
cmd
);

137 
∑ylﬂd_Êag
 = 1;

138 
∑ylﬂd
 = (
u_ch¨
 *)
›èrg
;

139 
∑ylﬂd_s
 = 
	`°æí
((*)
∑ylﬂd
);

143 
	`ußge
(
¨gv
[0]);

144 
	`exô
(
EXIT_SUCCESS
);

147 
	`exô
(
EXIT_FAILURE
);

155 
l
 = 
	`lib√t_öô
(

156 
LIBNET_LINK_ADV
,

157 
devi˚
,

158 
îrbuf
);

160 i‡(
l
 =
NULL
)

162 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

163 
	`exô
(
EXIT_FAILURE
);

166 
	`¥ötf
("Usög devi˚ %s\n", 
l
->
devi˚
);

168 i‡(
∑ylﬂd_Êag
)

170 
	`mem£t
(
cmd
, 0, 
Àngth
);

171 
	`mem˝y
(
cmd
, 
∑ylﬂd
, (
∑ylﬂd_s
 < 12 ?Öayload_s : 12));

172 
Àngth
 = 
∑ylﬂd_s
;

176 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
d°
, 
LIBNET_RESOLVE
)) == -1)

178 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
d°
);

179 
	`exô
(
EXIT_FAILURE
);

182 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
§c
, 
LIBNET_RESOLVE
)) == -1)

184 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
§c
);

185 
	`exô
(
EXIT_FAILURE
);

188 i‡(!
∑ylﬂd
)

190 
∑ylﬂd
 = (
uöt8_t
 *)
cmd
;

191 
∑ylﬂd_s
 = 
Àngth
;

195 
±ag
 = 
	`lib√t_buûd_£bek
(

196 
magic
,

197 
vîsi⁄
,

198 
ty≥
,

199 
cou¡î
,

200 
£c
,

201 
u£c
,

202 
pid
,

203 
uid
,

204 
fd
,

205 (
uöt8_t
 *)
cmd
,

206  
Àngth
,

207 (
uöt8_t
 *)
∑ylﬂd
,

208 
∑ylﬂd_s
,

209 
l
,

213 i‡(
±ag
 == -1)

215 
	`Ârötf
(
°dîr
, "C™'àbuûd Sebek hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

216 
bad
;

219 
±ag
 = 
	`lib√t_buûd_udp
(

220 
p‹t
,

221 
p‹t
,

222 
LIBNET_UDP_H
 + 
LIBNET_SEBEK_H
 + 
∑ylﬂd_s
,

224 
NULL
,

226 
l
,

229 i‡(
±ag
 == -1)

231 
	`Ârötf
(
°dîr
, "C™'àbuûd UDP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

232 
bad
;

235 
±ag
 = 
	`lib√t_buûd_ùv4
(

236 
LIBNET_IPV4_H
 + 
LIBNET_UDP_H
 + 
LIBNET_SEBEK_H
 + 
∑ylﬂd_s
,

241 
IPPROTO_UDP
,

243 
§c_ù
,

244 
d°_ù
,

245 
NULL
,

247 
l
,

250 i‡(
±ag
 == -1)

252 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

253 
	`exô
(
EXIT_FAILURE
);

257 
ëh_d°
 = (*)
	`lib√t_hex_©⁄
((*Îth_d°, &
c
);

258 
±ag
 = 
	`lib√t_autobuûd_ëhî√t
(

259 (
uöt8_t
 *)
ëh_d°
,

260 
ETHERTYPE_IP
,

261 
l
);

263 
	`‰ì
(
ëh_d°
);

264 i‡(
±ag
 == -1)

266 
	`Ârötf
(
°dîr
, "Can't buildÉthernet header: %s\n",

267 
	`lib√t_gëîr‹
(
l
));

268 
bad
;

275 
c
 = 
	`lib√t_wrôe
(
l
);

276 i‡(
c
 == -1)

278 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

279 
bad
;

283 
	`Ârötf
(
°dîr
, "WrŸê%d byã SebekÖackë; checkÅhêwúe.\n", 
c
);

285 
	`lib√t_de°roy
(
l
);

286  (
EXIT_SUCCESS
);

287 
bad
:

288 
	`lib√t_de°roy
(
l
);

289  (
EXIT_FAILURE
);

292 
	}
}

	@/workspaces/libnet/sample/smurf.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

38 
ußge
(*);

42 
	$maö
(
¨gc
, **
¨gv
)

44 
lib√t_t
 *
l
 = 
NULL
;

45 
u_l⁄g
 
èrgë_ù
 = 0, 
am∂i_ù
 = 0;

46 
u_l⁄g
 
cou¡
 = 10;

47 
i
, 
c
;

48 
lib√t_±ag_t
 
t
;

50 *
devi˚
 = 
NULL
;

51 *
pT¨gë
 = 
NULL
;

52 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

53 
œbñ
[
LIBNET_LABEL_SIZE
];

55 
	`¥ötf
("libnet 1.1 smurf DoS: ICMP[RAW using context queue]\n");

57 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "t:i:c:")Ë!
EOF
)

59 
c
)

62 
pT¨gë
 = 
›èrg
;

65 
devi˚
 = 
›èrg
;

68 
cou¡
 = 
	`°πoul
(
›èrg
, 0, 10);

73 i‡(
›töd
 =
¨gc
) {

74 
	`Ârötf
(
°dîr
, "Noámplifier given.\n");

75 
	`ußge
(
¨gv
[0]);

76 
	`exô
 (
EXIT_FAILURE
);

79 i‡(!
pT¨gë
) {

80 
	`Ârötf
(
°dout
, "NoÅarget given.\n");

81 
	`ußge
(
¨gv
[0]);

82 
	`exô
 (
EXIT_FAILURE
);

85 i‡((
èrgë_ù
 = 
	`lib√t_«me2addr4
(
l
, 
pT¨gë
, 
LIBNET_RESOLVE
)) == -1)

87 
	`Ârötf
(
°dîr
, "BadÅ¨gë IPáddªss: %s\n", 
pT¨gë
);

88 
	`exô
(
EXIT_FAILURE
);

92 
i
 = 0; 
›töd
 < 
¨gc
; optind++) {

94 
	`¥ötf
 ("Addögám∂ifõ∏%s\n", 
¨gv
[
›töd
]);

96 
l
 = 
	`lib√t_öô
(

97 
LIBNET_RAW4
,

98 
devi˚
,

99 
îrbuf
);

101 i‡(
l
 =
NULL
)

103 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

104 
	`exô
(
EXIT_FAILURE
);

107 i‡((
am∂i_ù
 = 
	`lib√t_«me2addr4
(
l
, 
¨gv
[
›töd
], 
LIBNET_RESOLVE
)) == -1)

109 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
¨gv
[
›töd
]);

110 
	`exô
(1);

114 
t
 = 
	`lib√t_buûd_icmpv4_echo
(

115 
ICMP_ECHO
,

120 
NULL
,

122 
l
,

124 i‡(
t
 == -1)

126 
	`Ârötf
(
°dîr
, "C™'àbuûd ICMP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

127 
bad
;

130 
t
 = 
	`lib√t_buûd_ùv4
(

131 
LIBNET_IPV4_H
 + 
LIBNET_ICMPV4_TS_H
,

136 
IPPROTO_ICMP
,

138 
èrgë_ù
,

139 
am∂i_ù
,

140 
NULL
,

142 
l
,

144 i‡(
t
 == -1)

146 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

147 
bad
;

151 
	`¢¥ötf
(
œbñ
, ÷abñ)-1, "echo%d", 
i
);

152 i‡(
	`lib√t_cq_add
(
l
, 
œbñ
) == -1)

154 
	`Ârötf
(
°dîr
, "addÉº‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

155 
bad
;

161 
	`f‹_óch_c⁄ãxt_ö_cq
(
l
) {

165 
i
 = 0; i<
cou¡
; i++) {

166 
c
 = 
	`lib√t_wrôe
(
l
);

167 i‡(
c
 == -1)

169 
	`Ârötf
(
°dîr
, "Wrôêîr‹ (pkà#%d): %s\n", 
i
, 
	`lib√t_gëîr‹
(
l
));

170 
bad
;

174 
	`Ârötf
(
°dîr
, "WrŸê%d byã ICMPÖackë; checkÅhêwúe.\n", 
c
);

180 
	`lib√t_cq_de°roy
();

181  (
EXIT_SUCCESS
);

182 
bad
:

183 
	`lib√t_cq_de°roy
();

184 
	`lib√t_de°roy
(
l
);

185  (
EXIT_FAILURE
);

186 
	}
}

189 
	$ußge
(*
«me
)

191 
	`Ârötf
(
°dîr
, "ußge: %†-àèrge_ù [-òiÁ˚] [-¯cou¡=10]ám∂ifõrs\¿", 
«me
);

192 
	}
}

	@/workspaces/libnet/sample/stp.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

38 
	#CONF
 1

	)

39 
	#TCN
 2

	)

42 
	$maö
(
¨gc
, *
¨gv
[])

44 
c
, 
Àn
, 
ty≥
;

45 
lib√t_t
 *
l
;

46 
lib√t_±ag_t
 
t
;

47 
u_ch¨
 *
d°
, *
§c
;

48 
u_ch¨
 
roŸid
[8], 
bridgeid
[8];

49 *
devi˚
 = 
NULL
;

50 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

52 
	`¥ötf
("libnet 1.1Öacket shaping: [STP]\n");

54 
devi˚
 = 
NULL
;

55 
§c
 = 
d°
 = 
NULL
;

56 
ty≥
 = 
CONF
;

57 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "cd:i:s:t")Ë!
EOF
)

59 
c
)

62 
ty≥
 = 
CONF
;

65 
d°
 = 
	`lib√t_hex_©⁄
(
›èrg
, &
Àn
);

68 
devi˚
 = 
›èrg
;

71 
§c
 = 
	`lib√t_hex_©⁄
(
›èrg
, &
Àn
);

74 
ty≥
 = 
TCN
;

77 
	`ußge
(
¨gv
[0]);

78 
	`exô
(
EXIT_FAILURE
);

82 i‡(
§c
 =
NULL
 || 
d°
 == NULL)

84 
	`ußge
(
¨gv
[0]);

85 
	`exô
(
EXIT_FAILURE
);

91 
l
 = 
	`lib√t_öô
(

92 
LIBNET_LINK
,

93 
devi˚
,

94 
îrbuf
);

96 i‡(
l
 =
NULL
)

98 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

99 
	`exô
(
EXIT_FAILURE
);

102 i‡(
ty≥
 =
CONF
)

104 
roŸid
[0] = 0x80;

105 
roŸid
[1] = 0x00;

106 
roŸid
[2] = 0x00;

107 
roŸid
[3] = 0x07;

108 
roŸid
[4] = 0xec;

109 
roŸid
[5] = 0xae;

110 
roŸid
[6] = 0x30;

111 
roŸid
[7] = 0x41;

113 
bridgeid
[0] = 0x80;

114 
bridgeid
[1] = 0x00;

115 
bridgeid
[2] = 0x00;

116 
bridgeid
[3] = 0x07;

117 
bridgeid
[4] = 0xec;

118 
bridgeid
[5] = 0xae;

119 
bridgeid
[6] = 0x30;

120 
bridgeid
[7] = 0x41;

122 
t
 = 
	`lib√t_buûd_°p_c⁄f
(

127 
roŸid
,

129 
bridgeid
,

135 
NULL
,

137 
l
,

139 i‡(
t
 == -1)

141 
	`Ârötf
(
°dîr
, "Can't build STP conf header: %s\n",

142 
	`lib√t_gëîr‹
(
l
));

143 
bad
;

148 
t
 = 
	`lib√t_buûd_°p_t˙
(

152 
NULL
,

154 
l
,

156 i‡(
t
 == -1)

158 
	`Ârötf
(
°dîr
, "Can't build STPÅcn header: %s\n",

159 
	`lib√t_gëîr‹
(
l
));

160 
bad
;

164 
t
 = 
	`lib√t_buûd_802_2
(

165 
LIBNET_SAP_STP
,

166 
LIBNET_SAP_STP
,

168 
NULL
,

170 
l
,

172 i‡(
t
 == -1)

174 
	`Ârötf
(
°dîr
, "Can't buildÉthernet header: %s\n",

175 
	`lib√t_gëîr‹
(
l
));

176 
bad
;

179 
t
 = 
	`lib√t_buûd_802_3
(

180 
d°
,

181 
§c
,

182 
LIBNET_802_2_H
 + ((
ty≥
 =
CONF
Ë? 
LIBNET_STP_CONF_H
 :

183 
LIBNET_STP_TCN_H
),

184 
NULL
,

186 
l
,

188 i‡(
t
 == -1)

190 
	`Ârötf
(
°dîr
, "Can't buildÉthernet header: %s\n",

191 
	`lib√t_gëîr‹
(
l
));

192 
bad
;

197 
c
 = 
	`lib√t_wrôe
(
l
);

199 i‡(
c
 == -1)

201 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

202 
bad
;

206 
	`Ârötf
(
°dîr
, "WrŸê%d byã STPÖackë; checkÅhêwúe.\n", 
c
);

208 
	`‰ì
(
d°
);

209 
	`‰ì
(
§c
);

210 
	`lib√t_de°roy
(
l
);

211  (
EXIT_SUCCESS
);

212 
bad
:

213 
	`‰ì
(
d°
);

214 
	`‰ì
(
§c
);

215 
	`lib√t_de°roy
(
l
);

216  (
EXIT_FAILURE
);

217 
	}
}

221 
	$ußge
(*
«me
)

223 
	`Ârötf
(
°dîr
, "usage %s -d dst -s src -t -c [-i interface]\n",

224 
«me
);

225 
	}
}

	@/workspaces/libnet/sample/synflood.c

32 #i‡(
HAVE_CONFIG_H
)

33 
	~"../ö˛ude/c⁄fig.h
"

35 
	~"lib√t_ã°.h
"

37 
	st_∑ck


39 
lib√t_ùv4_hdr
 
	mù
;

40 
lib√t_t˝_hdr
 
	mt˝
;

45 
	$maö
(
¨gc
, **
¨gv
)

47 
u_l⁄g
 
d°_ù
 = 0;

48 
u_l⁄g
 
§c_ù
 = 0;

49 
u_sh‹t
 
d°_¥t
 = 0;

50 
u_sh‹t
 
§c_¥t
 = 0;

51 
lib√t_t
 *
l
;

52 
lib√t_±ag_t
 
t
;

53 *
˝
;

54 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

55 
i
, 
c
, 
∑ckë_amt
, 
bur°_öt
, 
bur°_amt
, 
buûd_ù
;

57 
∑ckë_amt
 = 0;

58 
bur°_öt
 = 0;

59 
bur°_amt
 = 1;

61 
	`¥ötf
("libnet 1.1 syn flooding: TCP[raw]\n");

66 
l
 = 
	`lib√t_öô
(

67 
LIBNET_RAW4
,

68 
NULL
,

69 
îrbuf
);

71 i‡(
l
 =
NULL
)

73 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

74 
	`exô
(
EXIT_FAILURE
);

77 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "t:a:i:b:")Ë!
EOF
)

79 
c
)

88 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

90 
	`ußge
(
¨gv
[0]);

91 
	`exô
(
EXIT_FAILURE
);

93 *
˝
++ = 0;

94 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

95 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

97 
	`Ârötf
(
°dîr
, "Bad IPáddªss: %s\n", 
›èrg
);

98 
	`exô
(
EXIT_FAILURE
);

102 
∑ckë_amt
 = 
	`©oi
(
›èrg
);

105 
bur°_öt
 = 
	`©oi
(
›èrg
);

108 
bur°_amt
 = 
	`©oi
(
›èrg
);

111 
	`ußge
(
¨gv
[0]);

112 
	`exô
(
EXIT_FAILURE
);

116 i‡(!
d°_¥t
 || !
d°_ù
 || !
∑ckë_amt
)

118 
	`ußge
(
¨gv
[0]);

119 
	`exô
(
EXIT_FAILURE
);

122 
	`lib√t_£ed_¥™d
(
l
);

124 
t
 = 
LIBNET_PTAG_INITIALIZER
, 
buûd_ù
 = 1; 
bur°_amt
--;)

126 
i
 = 0; i < 
∑ckë_amt
; i++)

128 
t
 = 
	`lib√t_buûd_t˝
(

129 
§c_¥t
 = 
	`lib√t_gë_¥™d
(
LIBNET_PRu16
),

130 
d°_¥t
,

131 
	`lib√t_gë_¥™d
(
LIBNET_PRu32
),

132 
	`lib√t_gë_¥™d
(
LIBNET_PRu32
),

133 
TH_SYN
,

134 
	`lib√t_gë_¥™d
(
LIBNET_PRu16
),

137 
LIBNET_TCP_H
,

138 
NULL
,

140 
l
,

141 
t
);

143 i‡(
buûd_ù
)

145 
buûd_ù
 = 0;

146 
	`lib√t_buûd_ùv4
(

147 
LIBNET_TCP_H
 + 
LIBNET_IPV4_H
,

149 
	`lib√t_gë_¥™d
(
LIBNET_PRu16
),

151 
	`lib√t_gë_¥™d
(
LIBNET_PR8
),

152 
IPPROTO_TCP
,

154 
§c_ù
 = 
	`lib√t_gë_¥™d
(
LIBNET_PRu32
),

155 
d°_ù
,

156 
NULL
,

158 
l
,

161 
c
 = 
	`lib√t_wrôe
(
l
);

162 i‡(
c
 == -1)

164 
	`Ârötf
(
°dîr
, "lib√t_wrôe: %s\n", 
	`lib√t_gëîr‹
(
l
));

166 #i‡!(
__WIN32__
)

167 
	`u¶ìp
(250);

169 
	`SÀï
(250);

172 
	`¥ötf
("%15s:%5d ------> %15s:%5d\n",

173 
	`lib√t_addr2«me4
(
§c_ù
, 1),

174 
	`¡ohs
(
§c_¥t
),

175 
	`lib√t_addr2«me4
(
d°_ù
, 1),

176 
d°_¥t
);

178 #i‡!(
__WIN32__
)

179 
	`¶ìp
(
bur°_öt
);

181 
	`SÀï
(
bur°_öt
 * 1000);

184 
	`exô
(
EXIT_SUCCESS
);

185 
	}
}

189 
	$ußge
(*
nomí˛©uª
)

191 
	`Ârötf
(
°dîr
,

196 "\t-bÇumbîÖackë bur°†tÿ£nd (deÁu…†tÿ1)\n" , 
nomí˛©uª
);

197 
	}
}

	@/workspaces/libnet/sample/synflood6.c

34 #i‡(
HAVE_CONFIG_H
)

35 
	~"../ö˛ude/c⁄fig.h
"

37 
	~"lib√t_ã°.h
"

39 
	st_∑ck


41 
lib√t_ùv6_hdr
 
	mù
;

42 
lib√t_t˝_hdr
 
	mt˝
;

47 
	$maö
(
¨gc
, **
¨gv
)

49 
lib√t_ö6_addr
 
d°_ù
;

50 
lib√t_ö6_addr
 
§c_ù
;

51 
u_sh‹t
 
d°_¥t
 = 0;

52 
u_sh‹t
 
§c_¥t
 = 0;

53 
lib√t_t
 *
l
;

54 
lib√t_±ag_t
 
t
;

55 *
˝
;

56 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

57 
i
, 
c
, 
∑ckë_amt
, 
bur°_öt
, 
bur°_amt
, 
buûd_ù
;

58 
§˙ame
[100], 
d°«me
[100];

60 
∑ckë_amt
 = 0;

61 
bur°_öt
 = 0;

62 
bur°_amt
 = 1;

64 
	`¥ötf
("libnet 1.1 syn flooding: TCP6[raw]\n");

69 
l
 = 
	`lib√t_öô
(
LIBNET_RAW6
,

70 
NULL
,

71 
îrbuf
);

73 i‡(
l
 =
NULL
)

75 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

76 
	`exô
(
EXIT_FAILURE
);

79 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "t:a:i:b:")Ë!
EOF
)

81 
c
)

84 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '/')))

86 
	`ußge
(
¨gv
[0]);

87 
	`exô
(
EXIT_FAILURE
);

89 *
˝
++ = 0;

90 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

91 
d°_ù
 = 
	`lib√t_«me2addr6
(
l
, 
›èrg
, 1);

92 i‡(
	`°∫cmp
((*)&
d°_ù
, (*)&
ö6addr_îr‹
, (in6addr_error)) == 0)

94 
	`Ârötf
(
°dîr
, "Bad IP6áddªss: %s\n", 
›èrg
);

95 
	`exô
(
EXIT_FAILURE
);

99 
∑ckë_amt
 = 
	`©oi
(
›èrg
);

102 
bur°_öt
 = 
	`©oi
(
›èrg
);

105 
bur°_amt
 = 
	`©oi
(
›èrg
);

108 
	`ußge
(
¨gv
[0]);

109 
	`exô
(
EXIT_FAILURE
);

113 
§c_ù
 = 
	`lib√t_«me2addr6
(
l
, "0:0:0:0:0:0:0:1", 
LIBNET_DONT_RESOLVE
);

119 i‡(!
d°_¥t
 || 
	`°∫cmp
((*)&
d°_ù
, (*)&
ö6addr_îr‹
, (ö6addr_îr‹)Ë=0 || !
∑ckë_amt
)

121 
	`ußge
(
¨gv
[0]);

122 
	`exô
(
EXIT_FAILURE
);

125 
	`lib√t_£ed_¥™d
(
l
);

126 
	`lib√t_addr2«me6_r
(
§c_ù
, 1, 
§˙ame
, (srcname));

127 
	`lib√t_addr2«me6_r
(
d°_ù
, 1, 
d°«me
, (dstname));

129 
t
 = 
LIBNET_PTAG_INITIALIZER
, 
buûd_ù
 = 1; 
bur°_amt
--;)

131 
i
 = 0; i < 
∑ckë_amt
; i++)

133 
∑ylﬂd
[56];

134 
i
;

136 
i
 = 0; i < 56; i++)

137 
∑ylﬂd
[
i
] = 'A' + (()(i % 26));

139 
§c_¥t
 = 
	`lib√t_gë_¥™d
(
LIBNET_PRu16
);

140 
t
 = 
	`lib√t_buûd_t˝
(
§c_¥t
,

141 
d°_¥t
,

142 
	`lib√t_gë_¥™d
(
LIBNET_PRu32
),

143 
	`lib√t_gë_¥™d
(
LIBNET_PRu32
),

144 
TH_SYN
, 
	`lib√t_gë_¥™d
(
LIBNET_PRu16
), 0, 0, 
LIBNET_TCP_H
, 
NULL
, 0, 
l
, 
t
);

146 i‡(
buûd_ù
)

148 
buûd_ù
 = 0;

149 
	`¥ötf
("PackëÜí = %ld\n", ()
LIBNET_ICMPV6_H
 + (
∑ylﬂd
));

150 
	`lib√t_buûd_ùv6
(0, 0, 
LIBNET_TCP_H
, 
IPPROTO_TCP
, 64, 
§c_ù
, 
d°_ù
, 
NULL
, 0, 
l
, 0);

152 
	`¥ötf
("%15s/%5d -> %15s/%5d\n", 
§˙ame
, 
	`¡ohs
(
§c_¥t
), 
d°«me
, 
d°_¥t
);

153 
c
 = 
	`lib√t_wrôe
(
l
);

154 i‡(
c
 == -1)

156 
	`Ârötf
(
°dîr
, "lib√t_wrôe: %s\n", 
	`lib√t_gëîr‹
(
l
));

158 #i‡!(
__WIN32__
)

159 
	`u¶ìp
(250);

161 
	`SÀï
(250);

165 #i‡!(
__WIN32__
)

166 
	`¶ìp
(
bur°_öt
);

168 
	`SÀï
(
bur°_öt
 * 1000);

171 
	`exô
(
EXIT_SUCCESS
);

172 
	}
}

176 
	$ußge
(*
nomí˛©uª
)

178 
	`Ârötf
(
°dîr
,

183 "\t-bÇumbîÖackë bur°†tÿ£nd (deÁu…†tÿ1)\n", 
nomí˛©uª
);

184 
	}
}

	@/workspaces/libnet/sample/synflood6_frag.c

34 #i‡(
HAVE_CONFIG_H
)

35 
	~"../ö˛ude/c⁄fig.h
"

37 
	~"lib√t_ã°.h
"

39 
	st_∑ck


41 
lib√t_ùv6_hdr
 
	mù
;

42 
lib√t_t˝_hdr
 
	mt˝
;

47 
	$maö
(
¨gc
, **
¨gv
)

49 
lib√t_ö6_addr
 
d°_ù
;

50 
lib√t_ö6_addr
 
§c_ù
;

51 
u_sh‹t
 
d°_¥t
 = 0;

52 
u_sh‹t
 
§c_¥t
 = 0;

53 
lib√t_t
 *
l
;

54 
lib√t_±ag_t
 
t˝
, 
ù
, 
ù_‰ag
;

55 *
˝
;

56 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

57 
i
, 
j
, 
c
, 
∑ckë_amt
, 
bur°_öt
, 
bur°_amt
;

58 
§˙ame
[100], 
d°«me
[100];

59 
uöt8_t
 
∑ylﬂd
[56];

61 
∑ckë_amt
 = 0;

62 
bur°_öt
 = 0;

63 
bur°_amt
 = 1;

64 
t˝
 = 
ù_‰ag
 = 
ù
 = 
LIBNET_PTAG_INITIALIZER
;

66 
	`¥ötf
("libnet 1.1 syn flooding: TCP IPv6 fragments [raw]\n");

68 
l
 = 
	`lib√t_öô
(
LIBNET_RAW6
,

69 
NULL
,

70 
îrbuf
);

72 i‡(
l
 =
NULL
)

74 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

75 
	`exô
(
EXIT_FAILURE
);

78 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "t:a:i:b:")Ë!
EOF
)

80 
c
)

83 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '/')))

85 
	`ußge
(
¨gv
[0]);

86 
	`exô
(
EXIT_FAILURE
);

88 *
˝
++ = 0;

89 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

90 
d°_ù
 = 
	`lib√t_«me2addr6
(
l
, 
›èrg
, 
LIBNET_RESOLVE
);

91 i‡(
	`°∫cmp
((*)&
d°_ù
, (*)&
ö6addr_îr‹
, (in6addr_error)) == 0)

93 
	`Ârötf
(
°dîr
, "Bad IPv6áddªss: %s\n", 
›èrg
);

94 
	`exô
(
EXIT_FAILURE
);

98 
∑ckë_amt
 = 
	`©oi
(
›èrg
);

101 
bur°_öt
 = 
	`©oi
(
›èrg
);

104 
bur°_amt
 = 
	`©oi
(
›èrg
);

107 
	`ußge
(
¨gv
[0]);

108 
	`exô
(
EXIT_FAILURE
);

112 
§c_ù
 = 
	`lib√t_«me2addr6
(
l
, "0:0:0:0:0:0:0:1", 
LIBNET_DONT_RESOLVE
);

120 i‡(!
d°_¥t
 || 
	`°∫cmp
((*)&
d°_ù
, (*)&
ö6addr_îr‹
, (ö6addr_îr‹)Ë=0 || !
∑ckë_amt
)

122 
	`ußge
(
¨gv
[0]);

123 
	`exô
(
EXIT_FAILURE
);

126 
	`lib√t_£ed_¥™d
(
l
);

127 
	`lib√t_addr2«me6_r
(
§c_ù
, 
LIBNET_RESOLVE
, 
§˙ame
, (srcname));

128 
	`lib√t_addr2«me6_r
(
d°_ù
, 
LIBNET_RESOLVE
, 
d°«me
, (dstname));

130 ; 
bur°_amt
--;)

132 
i
 = 0; i < 
∑ckë_amt
; i++)

134 
j
 = 0; j < 56; j++)

135 
∑ylﬂd
[
j
] = 'A' + (()(j % 26));

137 
t˝
 = 
	`lib√t_buûd_t˝
(
§c_¥t
 = 
	`lib√t_gë_¥™d
(
LIBNET_PRu16
),

138 
d°_¥t
,

139 
	`lib√t_gë_¥™d
(
LIBNET_PRu32
),

140 
	`lib√t_gë_¥™d
(
LIBNET_PRu32
),

141 
TH_SYN
, 
	`lib√t_gë_¥™d
(
LIBNET_PRu16
), 0, 0, 
LIBNET_TCP_H
, 
NULL
, 0, 
l
, 
t˝
);

142 i‡(
t˝
 == -1)

144 
	`Ârötf
(
°dîr
, "C™'àbuûd o∏modify TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

145  (
EXIT_FAILURE
);

148 
ù_‰ag
 = 
	`lib√t_buûd_ùv6_‰ag
(
IPPROTO_TCP
,

152 
NULL
, 0, 
l
, 
ù_‰ag
);

153 i‡(
ù_‰ag
 == -1)

155 
	`Ârötf
(
°dîr
, "C™'àbuûd o∏modify TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

156  (
EXIT_FAILURE
);

159 
ù
 = 
	`lib√t_buûd_ùv6
(0, 0, 
LIBNET_TCP_H
, 
IPPROTO_TCP
, 64, 
§c_ù
, 
d°_ù
, 
NULL
, 0, 
l
, ip);

160 i‡(
ù
 == -1)

162 
	`Ârötf
(
°dîr
, "C™'àbuûd o∏modify TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

163  (
EXIT_FAILURE
);

166 
	`¥ötf
("%15s/%5d -> %15s/%5d\n", 
§˙ame
, 
	`¡ohs
(
§c_¥t
), 
d°«me
, 
d°_¥t
);

168 
c
 = 
	`lib√t_wrôe
(
l
);

169 i‡(
c
 == -1)

171 
	`Ârötf
(
°dîr
, "lib√t_wrôe: %s\n", 
	`lib√t_gëîr‹
(
l
));

173 #i‡!(
__WIN32__
)

174 
	`u¶ìp
(250);

176 
	`SÀï
(250);

180 #i‡!(
__WIN32__
)

181 
	`¶ìp
(
bur°_öt
);

183 
	`SÀï
(
bur°_öt
 * 1000);

186 
	`exô
(
EXIT_SUCCESS
);

187 
	}
}

191 
	$ußge
(*
nomí˛©uª
)

193 
	`Ârötf
(
°dîr
,

198 "\t-bÇumbîÖackë bur°†tÿ£nd (deÁu…†tÿ1)\n", 
nomí˛©uª
);

199 
	}
}

	@/workspaces/libnet/sample/tcp1.c

33 
	~"lib√t_ã°.h
"

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
c
;

39 *
˝
;

40 
lib√t_t
 *
l
;

41 
lib√t_±ag_t
 
t
;

42 *
∑ylﬂd
;

43 
u_sh‹t
 
∑ylﬂd_s
;

44 
u_l⁄g
 
§c_ù
, 
d°_ù
;

45 
u_sh‹t
 
§c_¥t
, 
d°_¥t
;

46 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

48 
	`¥ötf
("libnet 1.1Öacket shaping: TCP + options[link]\n");

53 
l
 = 
	`lib√t_öô
(

54 
LIBNET_LINK
,

55 
NULL
,

56 
îrbuf
);

58 i‡(
l
 =
NULL
)

60 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

61 
	`exô
(
EXIT_FAILURE
);

64 
§c_ù
 = 0;

65 
d°_ù
 = 0;

66 
§c_¥t
 = 0;

67 
d°_¥t
 = 0;

68 
∑ylﬂd
 = 
NULL
;

69 
∑ylﬂd_s
 = 0;

70 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:p:")Ë!
EOF
)

72 
c
)

81 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

83 
	`ußge
(
¨gv
[0]);

85 *
˝
++ = 0;

86 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

87 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

89 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

90 
	`exô
(
EXIT_FAILURE
);

94 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

96 
	`ußge
(
¨gv
[0]);

98 *
˝
++ = 0;

99 
§c_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

100 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

102 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

103 
	`exô
(
EXIT_FAILURE
);

107 
∑ylﬂd
 = 
›èrg
;

108 
∑ylﬂd_s
 = 
	`°æí
(
∑ylﬂd
);

111 
	`exô
(
EXIT_FAILURE
);

115 i‡(!
§c_ù
 || !
§c_¥t
 || !
d°_ù
 || !
d°_¥t
)

117 
	`ußge
(
¨gv
[0]);

118 
	`exô
(
EXIT_FAILURE
);

121 
t
 = 
	`lib√t_buûd_t˝_›ti⁄s
(

122 (
uöt8_t
*)"\003\003\012\001\002\004\001\011\010\012\077\077\077\077\000\000\000\000\000\000",

124 
l
,

126 i‡(
t
 == -1)

128 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP o±i⁄s: %s\n", 
	`lib√t_gëîr‹
(
l
));

129 
bad
;

132 
t
 = 
	`lib√t_buûd_t˝
(

133 
§c_¥t
,

134 
d°_¥t
,

137 
TH_SYN
,

141 
LIBNET_TCP_H
 + 20 + 
∑ylﬂd_s
,

142 (
uöt8_t
*)
∑ylﬂd
,

143 
∑ylﬂd_s
,

144 
l
,

146 i‡(
t
 == -1)

148 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

149 
bad
;

152 
t
 = 
	`lib√t_buûd_ùv4
(

153 
LIBNET_IPV4_H
 + 
LIBNET_TCP_H
 + 20 + 
∑ylﬂd_s
,

158 
IPPROTO_TCP
,

160 
§c_ù
,

161 
d°_ù
,

162 
NULL
,

164 
l
,

166 i‡(
t
 == -1)

168 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

169 
bad
;

172 
t
 = 
	`lib√t_buûd_ëhî√t
(

173 
íë_d°
,

174 
íë_§c
,

175 
ETHERTYPE_IP
,

176 
NULL
,

178 
l
,

180 i‡(
t
 == -1)

182 
	`Ârötf
(
°dîr
, "C™'àbuûdÉthî√àhódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

183 
bad
;

189 
c
 = 
	`lib√t_wrôe
(
l
);

190 i‡(
c
 == -1)

192 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

193 
bad
;

197 
	`Ârötf
(
°dîr
, "WrŸê%d byã TCPÖackë; checkÅhêwúe.\n", 
c
);

200 
	`lib√t_de°roy
(
l
);

201  (
EXIT_SUCCESS
);

202 
bad
:

203 
	`lib√t_de°roy
(
l
);

204  (
EXIT_FAILURE
);

205 
	}
}

208 
	$ußge
(*
«me
)

210 
	`Ârötf
(
°dîr
,

213 
«me
);

214 
	}
}

	@/workspaces/libnet/sample/tcp2.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

39 
	$maö
(
¨gc
, **
¨gv
)

41 
c
;

42 *
˝
;

43 
lib√t_t
 *
l
;

44 
lib√t_±ag_t
 
t
;

45 *
∑ylﬂd
;

46 
u_sh‹t
 
∑ylﬂd_s
;

47 
u_l⁄g
 
§c_ù
, 
d°_ù
;

48 
u_sh‹t
 
§c_¥t
, 
d°_¥t
;

49 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

51 
	`¥ötf
("libnet 1.1Öacket shaping: TCP[raw]\n");

56 
l
 = 
	`lib√t_öô
(

57 
LIBNET_RAW4
,

58 
NULL
,

59 
îrbuf
);

60 i‡(
l
 =
NULL
)

62 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

63 
	`exô
(
EXIT_FAILURE
);

66 
§c_ù
 = 0;

67 
d°_ù
 = 0;

68 
§c_¥t
 = 0;

69 
d°_¥t
 = 0;

70 
∑ylﬂd
 = 
NULL
;

71 
∑ylﬂd_s
 = 0;

72 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:p:")Ë!
EOF
)

74 
c
)

83 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

85 
	`ußge
(
¨gv
[0]);

87 *
˝
++ = 0;

88 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

89 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

91 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

92 
	`exô
(
EXIT_FAILURE
);

97 
∑ylﬂd
 = 
›èrg
;

98 
∑ylﬂd_s
 = 
	`°æí
(
∑ylﬂd
);

101 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

103 
	`ußge
(
¨gv
[0]);

105 *
˝
++ = 0;

106 
§c_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

107 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

109 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

110 
	`exô
(
EXIT_FAILURE
);

115 i‡(!
§c_ù
 || !
§c_¥t
 || !
d°_ù
 || !
d°_¥t
)

117 
	`ußge
(
¨gv
[0]);

118 
	`exô
(
EXIT_FAILURE
);

121 
t
 = 
	`lib√t_buûd_t˝
(

122 
§c_¥t
,

123 
d°_¥t
,

126 
TH_SYN
,

130 
LIBNET_TCP_H
 + 
∑ylﬂd_s
,

131 (
uöt8_t
*)
∑ylﬂd
,

132 
∑ylﬂd_s
,

133 
l
,

135 i‡(
t
 == -1)

137 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

138 
bad
;

141 
t
 = 
	`lib√t_buûd_ùv4
(

142 
LIBNET_IPV4_H
 + 
LIBNET_TCP_H
 + 
∑ylﬂd_s
,

147 
IPPROTO_TCP
,

149 
§c_ù
,

150 
d°_ù
,

151 
NULL
,

153 
l
,

155 i‡(
t
 == -1)

157 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

158 
bad
;

165 
c
 = 
	`lib√t_wrôe
(
l
);

166 i‡(
c
 == -1)

168 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

169 
bad
;

173 
	`Ârötf
(
°dîr
, "WrŸê%d byã TCPÖackë; checkÅhêwúe.\n", 
c
);

175 
	`lib√t_de°roy
(
l
);

176  (
EXIT_SUCCESS
);

177 
bad
:

178 
	`lib√t_de°roy
(
l
);

179  (
EXIT_FAILURE
);

180 
	}
}

184 
	$ußge
(*
«me
)

186 
	`Ârötf
(
°dîr
,

189 
«me
);

190 
	}
}

	@/workspaces/libnet/sample/test_ipv4.c

30 #i‡(
HAVE_CONFIG_H
)

31 
	~"../ö˛ude/c⁄fig.h
"

33 
	~"lib√t_ã°.h
"

35 
	~<as£π.h
>

37 
	$¥öt_pblocks
(
lib√t_t
* 
l
)

39 
lib√t_pblock_t
* 
p
 = 
l
->
¥Ÿocﬁ_blocks
;

41 
p
) {

43 
	`¥ötf
("Åag %d flags %dÅype %20s/%#x buf %p b_len %2u h_len %2u copied %2u\n",

44 
p
->
±ag
,Ö->
Êags
,

45 
	`lib√t_düg_dump_pblock_ty≥
(
p
->
ty≥
),Ö->type,

46 
p
->
buf
,Ö->
b_Àn
,Ö->
h_Àn
,Ö->
c›õd
);

47 
p
 =Ö->
√xt
;

49 
	`¥ötf
("Üink_offset %dáligner %dÅotal_size %uÇblocks %d\n",

50 
l
->
lök_off£t
,Ü->
Æig√r
,Ü->
tŸÆ_size
,Ü->
n_pblocks
);

52 
	}
}

54 
	$buûd_ùv4
(
lib√t_t
* 
l
, 
lib√t_±ag_t
 
ù_±ag
, 
∑ylﬂd_s
)

56 
u_l⁄g
 
§c_ù
 = 0xf101f1f1;

57 
u_l⁄g
 
d°_ù
 = 0xf102f1f1;

58 
uöt8_t
* 
∑ylﬂd
 = 
	`mÆloc
(
∑ylﬂd_s
);

59 
	`as£π
(
∑ylﬂd
);

60 
	`mem£t
(
∑ylﬂd
, '\x00', 
∑ylﬂd_s
);

62 
ù_±ag
 = 
	`lib√t_buûd_ùv4
(

63 
LIBNET_IPV4_H
 + 
∑ylﬂd_s
,

68 
IPPROTO_UDP
,

70 
§c_ù
,

71 
d°_ù
,

72 
∑ylﬂd
,

73 
∑ylﬂd_s
,

74 
l
,

75 
ù_±ag
);

77 
	`as£π
(
ù_±ag
 > 0);

79 
	`‰ì
(
∑ylﬂd
);

81  
ù_±ag
;

82 
	}
}

85 
	$maö
(
¨gc
, *
¨gv
[])

87 
lib√t_t
 *
l
;

88 
r
;

89 *
devi˚
 = "eth0";

90 
uöt8_t
 
íë_§c
[6] = {0x11, 0x11, 0x11, 0x11, 0x11, 0x11};

91 
uöt8_t
 
íë_d°
[6] = {0x22, 0x22, 0x22, 0x22, 0x22, 0x22};

92 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

93 
lib√t_±ag_t
 
ù_±ag
 = 0;

94 
lib√t_±ag_t
 
ëh_±ag
 = 0;

95 
pkt1_∑ylﬂd
 = 10;

96 
uöt8_t
* 
pkt1
 = 
NULL
;

97 
uöt32_t
 
pkt1_sz
 = 0;

98 
lib√t_ùv4_hdr
* 
h1
;

99 
pkt2_∑ylﬂd
 = 2;

100 
uöt8_t
* 
pkt2
 = 
NULL
;

101 
uöt32_t
 
pkt2_sz
 = 0;

102 
lib√t_ùv4_hdr
* 
h2
;

106 
l
 = 
	`lib√t_öô
–
LIBNET_LINK
, 
devi˚
, 
îrbuf
);

108 
	`as£π
(
l
);

117 
	`¥ötf
("Packet 1:\n");

119 
ù_±ag
 = 
	`buûd_ùv4
(
l
, ip_±ag, 
pkt1_∑ylﬂd
);

121 
ëh_±ag
 = 
	`lib√t_buûd_ëhî√t
(

122 
íë_d°
,

123 
íë_§c
,

124 
ETHERTYPE_IP
,

125 
NULL
,

127 
l
,

129 
	`as£π
(
ëh_±ag
 > 0);

131 
r
 = 
	`lib√t_pblock_cﬂÀs˚
(
l
, &
pkt1
, &
pkt1_sz
);

132 
	`as£π
(
r
 >= 0);

134 
	`¥öt_pblocks
(
l
);

136 
	`lib√t_düg_dump_hex
(
pkt1
, 14, 0, 
°dout
);

137 
	`lib√t_düg_dump_hex
(
pkt1
+14, 
pkt1_sz
-14, 0, 
°dout
);

139 
	`¥ötf
("Packet 2:\n");

141 
ù_±ag
 = 
	`buûd_ùv4
(
l
, ip_±ag, 
pkt2_∑ylﬂd
);

143 
r
 = 
	`lib√t_pblock_cﬂÀs˚
(
l
, &
pkt2
, &
pkt2_sz
);

144 
	`as£π
(
r
 >= 0);

146 
	`¥öt_pblocks
(
l
);

148 
	`lib√t_düg_dump_hex
(
pkt2
, 14, 0, 
°dout
);

149 
	`lib√t_düg_dump_hex
(
pkt2
+14, 
pkt2_sz
-14, 0, 
°dout
);

152 
h1
 = (
lib√t_ùv4_hdr
*Ë(
pkt1
+14);

153 
h2
 = (
lib√t_ùv4_hdr
*Ë(
pkt2
+14);

155 
	`as£π
(
h1
->
ù_Àn
 =
	`ht⁄s
(20+
pkt1_∑ylﬂd
));

156 
	`as£π
(
h2
->
ù_Àn
 =
	`ht⁄s
(20+
pkt2_∑ylﬂd
));

158 
h1
->
ù_Àn
 = 
h2
->ip_len = 0x5555;

159 
h1
->
ù_sum
 = 
h2
->ip_sum = 0x6666;

161 
	`as£π
(
	`memcmp
(
pkt1
, 
pkt2
, 14 + 20) == 0);

163  (
EXIT_SUCCESS
);

164 
	}
}

	@/workspaces/libnet/sample/test_ipv4_options.c

30 #i‡(
HAVE_CONFIG_H
)

31 
	~"../ö˛ude/c⁄fig.h
"

33 
	~"lib√t_ã°.h
"

35 
	~<as£π.h
>

37 
	$as£π_eq_
(
have
, 
w™t
, c⁄° * 
fûe
, 
löe
) {

38 if(
have
 !
w™t
) {

39 
	`¥ötf
("%s:%d: faû - havê%ld w™à%ld\n", 
fûe
, 
löe
, 
have
, 
w™t
);

40 
	`ab‹t
();

42 
	}
}

43 
	#as£π_eq
(
have
, 
w™t
Ë
	`as£π_eq_
(have, w™t, 
__FILE__
, 
__LINE__
)

	)

46 
	$¥öt_pblocks
(
lib√t_t
* 
l
)

48 
lib√t_pblock_t
* 
p
 = 
l
->
¥Ÿocﬁ_blocks
;

50 
p
) {

51 
	`¥ötf
("Åag %2d flags %dÅype %20s/%#x buf %p b_len %2u h_len %2u copied %2u\n",

52 
p
->
±ag
,Ö->
Êags
,

53 
	`lib√t_düg_dump_pblock_ty≥
(
p
->
ty≥
),Ö->type,

54 
p
->
buf
,Ö->
b_Àn
,Ö->
h_Àn
,Ö->
c›õd
);

55 
p
 =Ö->
√xt
;

57 
	`¥ötf
("Üink_offset %dáligner %dÅotal_size %uÇblocks %d\n",

58 
l
->
lök_off£t
,Ü->
Æig√r
,Ü->
tŸÆ_size
,Ü->
n_pblocks
);

60 
	}
}

62 
	$±ag_îr‹
(
lib√t_t
* 
l
, 
±ag
)

64 if(
±ag
 <= 0) {

65 
	`¥ötf
("îr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

67 
	`as£π
(
±ag
 > 0);

68 
	}
}

70 
	$buûd_ùo
(
lib√t_t
* 
l
, 
lib√t_±ag_t
 
±ag
, 
∑ylﬂd_s
)

72 
uöt8_t
* 
∑ylﬂd
 = 
	`mÆloc
(
∑ylﬂd_s
);

73 
	`as£π
(
∑ylﬂd
);

74 
	`mem£t
(
∑ylﬂd
, '\x88', 
∑ylﬂd_s
);

76 
±ag
 = 
	`lib√t_buûd_ùv4_›ti⁄s
(
∑ylﬂd
, 
∑ylﬂd_s
, 
l
,Ötag);

78 
	`±ag_îr‹
(
l
, 
±ag
);

80 
	`‰ì
(
∑ylﬂd
);

82  
±ag
;

83 
	}
}

85 
	$buûd_ùv4
(
lib√t_t
* 
l
, 
lib√t_±ag_t
 
±ag
, 
∑ylﬂd_s
, 
ù_Àn
)

87 
u_l⁄g
 
§c_ù
 = 0xf101f1f1;

88 
u_l⁄g
 
d°_ù
 = 0xf102f1f1;

89 
uöt8_t
* 
∑ylﬂd
 = 
	`mÆloc
(
∑ylﬂd_s
);

90 
	`as£π
(
∑ylﬂd
);

91 
	`mem£t
(
∑ylﬂd
, '\x99', 
∑ylﬂd_s
);

93 if(!
ù_Àn
) {

94 
ù_Àn
 = 
LIBNET_IPV4_H
 + 
∑ylﬂd_s
;

97 
±ag
 = 
	`lib√t_buûd_ùv4
(

98 
ù_Àn
,

103 
IPPROTO_UDP
,

105 
§c_ù
,

106 
d°_ù
,

107 
∑ylﬂd_s
 ? 
∑ylﬂd
 : 
NULL
,

108 
∑ylﬂd_s
,

109 
l
,

110 
±ag
);

112 
	`±ag_îr‹
(
l
, 
±ag
);

114 
	`‰ì
(
∑ylﬂd
);

116  
±ag
;

117 
	}
}

119 
	$buûd_ëhî√t
(
lib√t_t
* 
l
, 
lib√t_±ag_t
 
±ag
)

121 
uöt8_t
 
íë_§c
[6] = {0x11, 0x11, 0x11, 0x11, 0x11, 0x11};

122 
uöt8_t
 
íë_d°
[6] = {0x22, 0x22, 0x22, 0x22, 0x22, 0x22};

124 
±ag
 = 
	`lib√t_buûd_ëhî√t
(

125 
íë_d°
,

126 
íë_§c
,

127 
ETHERTYPE_IP
,

128 
NULL
,

130 
l
,

131 
±ag
);

133 
	`±ag_îr‹
(
l
, 
±ag
);

135  
±ag
;

136 
	}
}

139 
	$as£π_Àngths
(
lib√t_t
* 
l
, 
ù_Àn
, 
ù_ihl
, 
∑ylﬂd_s
)

141 
uöt8_t
* 
pkt1
 = 
NULL
;

142 
uöt32_t
 
pkt1_sz
 = 0;

143 
lib√t_ùv4_hdr
* 
h1
;

144 
uöt8_t
* 
∑ylﬂd
 = 
NULL
;

147 
r
 = 
	`lib√t_pblock_cﬂÀs˚
(
l
, &
pkt1
, &
pkt1_sz
);

148 
	`as£π
(
r
 >= 0);

150 
	`¥öt_pblocks
(
l
);

152 
	`lib√t_düg_dump_hex
(
pkt1
, 14, 1, 
°dout
);

153 
	`lib√t_düg_dump_hex
(
pkt1
+14, 
pkt1_sz
-14, 1, 
°dout
);

156 
h1
 = (
lib√t_ùv4_hdr
*Ë(
pkt1
+14);

157 
	`as£π_eq
(
h1
->
ù_hl
, 
ù_ihl
);

158 
	`as£π_eq
(
	`¡ohs
(
h1
->
ù_Àn
), ip_len);

160 
∑ylﬂd
 = ((
uöt8_t
*Ë
h1
Ë+ 
ù_ihl
 * 4;

161 if(
∑ylﬂd_s
 > 0) {

162 
	`as£π
(
∑ylﬂd
[0] =(
uöt8_t
)'\x99');

163 
	`as£π
(
∑ylﬂd
[
∑ylﬂd_s
-1] =(
uöt8_t
)'\x99');

165 
	}
}

168 
	$maö
(
¨gc
, *
¨gv
[])

170 
lib√t_t
 *
l
;

171 *
devi˚
 = "eth0";

172 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

173 
lib√t_±ag_t
 
ùo_±ag
 = 0;

174 
lib√t_±ag_t
 
ù_±ag
 = 0;

175 
lib√t_±ag_t
 
ëh_±ag
 = 0;

176 
ù_Àn
 = 0;

178 
l
 = 
	`lib√t_öô
–
LIBNET_LINK
, 
devi˚
, 
îrbuf
);

180 
	`as£π
(
l
);

182 
	`¥ötf
("Packet: options=4,Öayload=0\n");

184 
ù_Àn
 = 20 + 4 + 0;

185 
ùo_±ag
 = 
	`buûd_ùo
(
l
, ipo_ptag, 4);

186 
ù_±ag
 = 
	`buûd_ùv4
(
l
, ip_ptag, 0, 24);

187 
ëh_±ag
 = 
	`buûd_ëhî√t
(
l
,Éth_ptag);

189 
	`as£π_Àngths
(
l
, 24, 6, 0);

191 
ùo_±ag
 = 
ù_±ag
 = 
ëh_±ag
 = 0;

193 
	`lib√t_˛ór_∑ckë
(
l
);

195 
	`¥ötf
("Packet: options=3,Öayload=1\n");

197 
ù_Àn
 = 20 + 4 + 1;

198 
ùo_±ag
 = 
	`buûd_ùo
(
l
, ipo_ptag, 3);

199 
ù_±ag
 = 
	`buûd_ùv4
(
l
, ip_ptag, 1, 25);

200 
ëh_±ag
 = 
	`buûd_ëhî√t
(
l
,Éth_ptag);

202 
	`as£π_Àngths
(
l
, 25, 6, 1);

204 
ùo_±ag
 = 
ù_±ag
 = 
ëh_±ag
 = 0;

206 
	`lib√t_˛ór_∑ckë
(
l
);

208 
	`¥ötf
("Packet: options=3,Öayload=1\n");

210 
ù_Àn
 = 20 + 4 + 1;

211 
ùo_±ag
 = 
	`buûd_ùo
(
l
, ipo_ptag, 3);

212 
ù_±ag
 = 
	`buûd_ùv4
(
l
, ip_±ag, 1, 
ù_Àn
);

213 
ëh_±ag
 = 
	`buûd_ëhî√t
(
l
,Éth_ptag);

215 
	`as£π_Àngths
(
l
, 25, 6, 1);

217 
	`¥ötf
("... modify -> options=40\n");

219 
ù_Àn
 = 20 + 40 + 1;

220 
ùo_±ag
 = 
	`buûd_ùo
(
l
, ipo_ptag, 40);

222 
	`as£π_Àngths
(
l
, 
ù_Àn
, 15, 1);

224 
	`¥ötf
("... modify -> options=0\n");

226 
ù_Àn
 = 20 + 0 + 1;

227 
ùo_±ag
 = 
	`buûd_ùo
(
l
, ipo_ptag, 0);

229 
	`as£π_Àngths
(
l
, 
ù_Àn
, 5, 1);

231 
	`¥ötf
("... modify -> options=5\n");

233 
ù_Àn
 = 20 + 8 + 1;

234 
ùo_±ag
 = 
	`buûd_ùo
(
l
, ipo_ptag, 5);

236 
	`as£π_Àngths
(
l
, 
ù_Àn
, 7, 1);

238 
	`¥ötf
("... modify -> ip_payload=5\n");

240 
ù_Àn
 = 20 + 8 + 5;

241 
ù_±ag
 = 
	`buûd_ùv4
(
l
, ip_±ag, 5, 
ù_Àn
);

243 
	`as£π_Àngths
(
l
, 
ù_Àn
, 7, 1);

245 
ùo_±ag
 = 
ù_±ag
 = 
ëh_±ag
 = 0;

247 
	`lib√t_˛ór_∑ckë
(
l
);

250  (
EXIT_SUCCESS
);

251 
	}
}

	@/workspaces/libnet/sample/test_ipv6_icmpv4.c

30 #i‡(
HAVE_CONFIG_H
)

31 
	~"../ö˛ude/c⁄fig.h
"

33 
	~"lib√t_ã°.h
"

35 
	~<as£π.h
>

36 #ifde‡
_WIN32


37 
	~<wösock2.h
>

39 
	~<√töë/ö.h
>

42 
	$¥öt_pblocks
(
lib√t_t
* 
l
)

44 
lib√t_pblock_t
* 
p
 = 
l
->
¥Ÿocﬁ_blocks
;

46 
p
) {

48 
	`¥ötf
("Åag %d flags %dÅype %20s/%#x buf %p b_len %2u h_len %2u copied %2u\n",

49 
p
->
±ag
,Ö->
Êags
,

50 
	`lib√t_düg_dump_pblock_ty≥
(
p
->
ty≥
),Ö->type,

51 
p
->
buf
,Ö->
b_Àn
,Ö->
h_Àn
,Ö->
c›õd
);

52 
p
 =Ö->
√xt
;

54 
	`¥ötf
("Üink_offset %dáligner %dÅotal_size %uÇblocks %d\n",

55 
l
->
lök_off£t
,Ü->
Æig√r
,Ü->
tŸÆ_size
,Ü->
n_pblocks
);

57 
	}
}

60 
	$maö
(
¨gc
, *
¨gv
[])

62 
lib√t_t
 *
l
;

63 
r
;

64 *
devi˚
 = "eth0";

65 
lib√t_ëhî_addr
 *
mac_addªss
;

66 
ö6_addr
 
§c_ù
;

67 
lib√t_ö6_addr
 
d°_ù
;

68 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

69 
lib√t_±ag_t
 
icmp_±ag
 = 0;

70 
lib√t_±ag_t
 
ùv6_±ag
 = 0;

71 
∑ylﬂd
[24] = { 0 };

73 
	`mem£t
(&
§c_ù
, 0x66, (src_ip));

75 
l
 = 
	`lib√t_öô
–
LIBNET_RAW6
, 
devi˚
, 
îrbuf
);

77 
	`as£π
(
l
);

79 
mac_addªss
 = 
	`lib√t_gë_hwaddr
(
l
);

80 
	`as£π
(
mac_addªss
);

82 
d°_ù
 = 
	`lib√t_«me2addr6
(
l
, "::1" , 
LIBNET_DONT_RESOLVE
);

84 
	`mem˝y
(
∑ylﬂd
,
§c_ù
.
s6_addr
,16);

85 
∑ylﬂd
[16] = 2;

86 
∑ylﬂd
[17] = 1;

87 
	`mem˝y
(
∑ylﬂd
+18,
mac_addªss
->
ëhî_addr_o˘ë
, 6);

90 
icmp_±ag
 = 
	`lib√t_buûd_icmpv4_echo
(

92 (
uöt8_t
 *)
∑ylﬂd
,’aylﬂd), 
l
, 
LIBNET_PTAG_INITIALIZER
);

93 
	`as£π
(
icmp_±ag
);

95 
ùv6_±ag
 = 
	`lib√t_buûd_ùv6
(

97 
LIBNET_ICMPV6_H
 + (
∑ylﬂd
),

98 
IPPROTO_ICMP6
,

100 *(
lib√t_ö6_addr
*)&
§c_ù
,

101 
d°_ù
,

102 
NULL
, 0,

103 
l
, 0);

104 
	`as£π
(
icmp_±ag
);

106 
	`¥öt_pblocks
(
l
);

109 
uöt8_t
* 
pkt1
 = 
NULL
;

110 
uöt32_t
 
pkt1_sz
 = 0;

111 
r
 = 
	`lib√t_pblock_cﬂÀs˚
(
l
, &
pkt1
, &
pkt1_sz
);

112 
	`as£π
(
r
 >= 0);

114 
	`lib√t_düg_dump_hex
(
pkt1
, 
LIBNET_IPV6_H
, 0, 
°dout
);

115 
	`lib√t_düg_dump_hex
(
pkt1
+
LIBNET_IPV6_H
, 
pkt1_sz
-LIBNET_IPV6_H, 0, 
°dout
);

117 
	`‰ì
(
pkt1
);

118 
pkt1
 = 
NULL
;

121 
r
 = 
	`lib√t_wrôe
(
l
);

122 
	`as£π
(
r
 >= 0);

124  (
EXIT_SUCCESS
);

125 
	}
}

	@/workspaces/libnet/sample/tftp.c

35 #i‡(
HAVE_CONFIG_H
)

36 
	~"../ö˛ude/c⁄fig.h
"

38 
	~"lib√t_ã°.h
"

42 
	$maö
(
¨gc
, *
¨gv
[])

44 
c
;

45 
lib√t_t
 *
l
;

46 
u_l⁄g
 
§c_ù
, 
d°_ù
;

47 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

48 
lib√t_±ag_t
 
udp
 = 0, 
ù
 = 0;

49 *
fûíame
 = "/etc/passwd";

50 
mode
[] = "netascii";

51 
u_ch¨
 *
∑ylﬂd
 = 
NULL
;

52 
uöt32_t
 
∑ylﬂd_s
 = 0;

55 
	`¥ötf
("libnet 1.1Öacket shaping: UDP +Öayload[raw] == TFTP\n");

60 
l
 = 
	`lib√t_öô
(

61 
LIBNET_RAW4
,

62 
NULL
,

63 
îrbuf
);

65 i‡(
l
 =
NULL
)

67 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

68 
	`exô
(
EXIT_FAILURE
);

71 
§c_ù
 = 0;

72 
d°_ù
 = 0;

73 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:p:")Ë!
EOF
)

75 
c
)

84 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

86 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

87 
bad
;

92 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

94 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

95 
bad
;

100 
fûíame
 = 
›èrg
;

104 
	`Ârötf
(
°dîr
, "unkow¿›ti⁄ [%s]: byêbye\n", 
›èrg
);

105 
bad
;

110 i‡(!
§c_ù
 || !
d°_ù
)

112 
	`ußge
(
¨gv
[0]);

113 
	`exô
(
EXIT_FAILURE
);

125 
∑ylﬂd_s
 = 2 + 
	`°æí
(
fûíame
Ë+ 1 + såÀn(
mode
) + 1;

126 
∑ylﬂd
 = 
	`mÆloc
(()*
∑ylﬂd_s
);

127 i‡(!
∑ylﬂd
)

129 
	`Ârötf
(
°dîr
, "mallocÉrror forÖayload\n");

130 
bad
;

132 
	`mem£t
(
∑ylﬂd
, 0, 
∑ylﬂd_s
);

133 
∑ylﬂd
[1] = 1;

134 
	`mem˝y
(
∑ylﬂd
 + 2, 
fûíame
, 
	`°æí
(filename));

135 
	`mem˝y
(
∑ylﬂd
 + 2 + 
	`°æí
(
fûíame
Ë+ 1 , 
mode
, strlen(mode));

140 
udp
 = 
	`lib√t_buûd_udp
(

143 
LIBNET_UDP_H
 + 
∑ylﬂd_s
,

145 
∑ylﬂd
,

146 
∑ylﬂd_s
,

147 
l
,

149 i‡(
udp
 == -1)

151 
	`Ârötf
(
°dîr
, "C™'àbuûd UDP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

152 
bad
;

155 
ù
 = 
	`lib√t_buûd_ùv4
(

156 
LIBNET_IPV4_H
 + 
LIBNET_UDP_H
 + 
∑ylﬂd_s
,

161 
IPPROTO_UDP
,

163 
§c_ù
,

164 
d°_ù
,

165 
NULL
,

167 
l
,

169 i‡(
ù
 == -1)

171 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

172 
bad
;

178 
c
 = 
	`lib√t_wrôe
(
l
);

179 i‡(
c
 == -1)

181 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

182 
bad
;

186 
	`Ârötf
(
°dîr
, "WrŸê%d byã TFTPÖackë; checkÅhêwúe.\n", 
c
);

189 
	`lib√t_de°roy
(
l
);

190 
	`‰ì
(
∑ylﬂd
);

191  (
EXIT_SUCCESS
);

192 
bad
:

193 
	`lib√t_de°roy
(
l
);

194 
	`‰ì
(
∑ylﬂd
);

195  (
EXIT_FAILURE
);

196 
	}
}

199 
	$ußge
(*
«me
)

201 
	`Ârötf
(
°dîr
,

204 
«me
);

205 
	}
}

	@/workspaces/libnet/sample/tring_tcp1.c

31 #i‡(
HAVE_CONFIG_H
)

32 
	~"../ö˛ude/c⁄fig.h
"

34 
	~"lib√t_ã°.h
"

37 
	$maö
(
¨gc
, *
¨gv
[])

39 
c
;

40 *
˝
;

41 
lib√t_t
 *
l
;

42 
lib√t_±ag_t
 
t
;

43 *
∑ylﬂd
;

44 
u_sh‹t
 
∑ylﬂd_s
;

45 
u_l⁄g
 
§c_ù
, 
d°_ù
;

46 
u_sh‹t
 
§c_¥t
, 
d°_¥t
;

47 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

49 
	`¥ötf
("libnet 1.1Öacket shaping: TCP (over Token Ring) [link]\n");

56 
l
 = 
	`lib√t_öô
(

57 
LIBNET_LINK
,

59 
îrbuf
);

61 i‡(
l
 =
NULL
)

63 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

64 
	`exô
(
EXIT_FAILURE
);

67 
§c_ù
 = 0;

68 
d°_ù
 = 0;

69 
§c_¥t
 = 0;

70 
d°_¥t
 = 0;

71 
∑ylﬂd
 = 
NULL
;

72 
∑ylﬂd_s
 = 0;

73 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:p:")Ë!
EOF
)

75 
c
)

84 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

86 
	`ußge
(
¨gv
[0]);

88 *
˝
++ = 0;

89 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

90 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

92 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

93 
	`exô
(
EXIT_FAILURE
);

97 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

99 
	`ußge
(
¨gv
[0]);

101 *
˝
++ = 0;

102 
§c_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

103 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

105 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

106 
	`exô
(
EXIT_FAILURE
);

110 
∑ylﬂd
 = 
›èrg
;

111 
∑ylﬂd_s
 = 
	`°æí
(
∑ylﬂd
);

114 
	`exô
(
EXIT_FAILURE
);

118 i‡(!
§c_ù
 || !
§c_¥t
 || !
d°_ù
 || !
d°_¥t
)

120 
	`ußge
(
¨gv
[0]);

121 
	`exô
(
EXIT_FAILURE
);

125 
t
 = 
	`lib√t_buûd_t˝
(

126 
§c_¥t
,

127 
d°_¥t
,

130 
TH_SYN
,

134 
LIBNET_TCP_H
 + 
∑ylﬂd_s
,

135 (
uöt8_t
 *)
∑ylﬂd
,

136 
∑ylﬂd_s
,

137 
l
,

139 i‡(
t
 == -1)

141 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

142 
bad
;

145 
t
 = 
	`lib√t_buûd_ùv4
(

146 
LIBNET_IPV4_H
 + 
LIBNET_TCP_H
 + 
∑ylﬂd_s
,

151 
IPPROTO_TCP
,

153 
§c_ù
,

154 
d°_ù
,

155 
NULL
,

157 
l
,

159 i‡(
t
 == -1)

161 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

162 
bad
;

165 
t
 = 
	`lib√t_buûd_tokí_rög
(

166 
LIBNET_TOKEN_RING_FRAME
,

167 
LIBNET_TOKEN_RING_LLC_FRAME
,

168 
å_d°
,

169 
å_§c
,

170 
LIBNET_SAP_SNAP
,

171 
LIBNET_SAP_SNAP
,

173 
‹g_code
,

174 
TOKEN_RING_TYPE_IP
,

175 
NULL
,

177 
l
,

179 i‡(
t
 == -1)

181 
	`Ârötf
(
°dîr
, "C™'àbuûdÅokíÑög hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

182 
bad
;

188 
c
 = 
	`lib√t_wrôe
(
l
);

189 i‡(
c
 == -1)

191 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

192 
bad
;

196 
	`Ârötf
(
°dîr
, "WrŸê%d byã TCPÖackë; checkÅhêwúe.\n", 
c
);

198 
	`lib√t_de°roy
(
l
);

199  (
EXIT_SUCCESS
);

200 
bad
:

201 
	`lib√t_de°roy
(
l
);

202  (
EXIT_FAILURE
);

203 
	}
}

206 
	$ußge
(*
«me
)

208 
	`Ârötf
(
°dîr
,

211 
«me
);

212 
	}
}

	@/workspaces/libnet/sample/tring_tcp2.c

31 #i‡(
HAVE_CONFIG_H
)

32 
	~"../ö˛ude/c⁄fig.h
"

34 
	~"lib√t_ã°.h
"

37 
	$maö
(
¨gc
, *
¨gv
[])

39 
c
;

40 *
˝
;

41 
lib√t_t
 *
l
;

42 
lib√t_±ag_t
 
t
;

43 *
∑ylﬂd
;

44 
u_sh‹t
 
∑ylﬂd_s
;

45 
u_l⁄g
 
§c_ù
, 
d°_ù
;

46 
u_sh‹t
 
§c_¥t
, 
d°_¥t
;

47 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

49 
	`¥ötf
("libnet 1.1Öacket shaping: TCP (overÅokenÑing) [link]\n");

56 
l
 = 
	`lib√t_öô
(

57 
LIBNET_LINK
,

59 
îrbuf
);

61 i‡(
l
 =
NULL
)

63 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

64 
	`exô
(
EXIT_FAILURE
);

67 
§c_ù
 = 0;

68 
d°_ù
 = 0;

69 
§c_¥t
 = 0;

70 
d°_¥t
 = 0;

71 
∑ylﬂd
 = 
NULL
;

72 
∑ylﬂd_s
 = 0;

73 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:p:")Ë!
EOF
)

75 
c
)

84 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

86 
	`ußge
(
¨gv
[0]);

88 *
˝
++ = 0;

89 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

90 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

92 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

93 
	`exô
(
EXIT_FAILURE
);

97 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

99 
	`ußge
(
¨gv
[0]);

101 *
˝
++ = 0;

102 
§c_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

103 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

105 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

106 
	`exô
(
EXIT_FAILURE
);

110 
∑ylﬂd
 = 
›èrg
;

111 
∑ylﬂd_s
 = 
	`°æí
(
∑ylﬂd
);

114 
	`exô
(
EXIT_FAILURE
);

118 i‡(!
§c_ù
 || !
§c_¥t
 || !
d°_ù
 || !
d°_¥t
)

120 
	`ußge
(
¨gv
[0]);

121 
	`exô
(
EXIT_FAILURE
);

125 
t
 = 
	`lib√t_buûd_t˝
(

126 
§c_¥t
,

127 
d°_¥t
,

130 
TH_SYN
,

134 
LIBNET_TCP_H
 + 
∑ylﬂd_s
,

135 (
uöt8_t
 *)
∑ylﬂd
,

136 
∑ylﬂd_s
,

137 
l
,

139 i‡(
t
 == -1)

141 
	`Ârötf
(
°dîr
, "C™'àbuûd TCP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

142 
bad
;

145 
t
 = 
	`lib√t_buûd_ùv4
(

146 
LIBNET_IPV4_H
 + 
LIBNET_TCP_H
 + 
∑ylﬂd_s
,

151 
IPPROTO_TCP
,

153 
§c_ù
,

154 
d°_ù
,

155 
NULL
,

157 
l
,

159 i‡(
t
 == -1)

161 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

162 
bad
;

165 
t
 = 
	`lib√t_autobuûd_tokí_rög
(

166 
LIBNET_TOKEN_RING_FRAME
,

167 
LIBNET_TOKEN_RING_LLC_FRAME
,

168 
å_d°
,

169 
LIBNET_SAP_SNAP
,

170 
LIBNET_SAP_SNAP
,

172 
‹g_code
,

173 
TOKEN_RING_TYPE_IP
,

174 
l
);

175 i‡(
t
 == -1)

177 
	`Ârötf
(
°dîr
, "C™'àbuûdÅokíÑög hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

178 
bad
;

184 
c
 = 
	`lib√t_wrôe
(
l
);

185 i‡(
c
 == -1)

187 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

188 
bad
;

192 
	`Ârötf
(
°dîr
, "WrŸê%d byã TCPÖackë; checkÅhêwúe.\n", 
c
);

194 
	`lib√t_de°roy
(
l
);

195  (
EXIT_SUCCESS
);

196 
bad
:

197 
	`lib√t_de°roy
(
l
);

198  (
EXIT_FAILURE
);

199 
	}
}

202 
	$ußge
(*
«me
)

204 
	`Ârötf
(
°dîr
,

207 
«me
);

208 
	}
}

	@/workspaces/libnet/sample/udp1.c

33 
	~"lib√t_ã°.h
"

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
c
, 
i
, 
j
, 
buûd_ù
;

39 *
˝
;

40 
lib√t_t
 *
l
;

41 
lib√t_±ag_t
 
ù
, 
ùo
;

42 
lib√t_±ag_t
 
udp
;

43 *
∑ylﬂd
;

44 
u_sh‹t
 
∑ylﬂd_s
;

45 
lib√t_°©s
 
ls
;

46 
u_l⁄g
 
§c_ù
, 
d°_ù
;

47 
u_sh‹t
 
§c_¥t
, 
d°_¥t
;

48 
u_ch¨
 
›t
[20];

49 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

51 
	`¥ötf
("libnet 1.1Öacket shaping: UDP + IP options[raw]\n");

56 
l
 = 
	`lib√t_öô
(

57 
LIBNET_RAW4
,

58 
NULL
,

59 
îrbuf
);

61 i‡(
l
 =
NULL
)

63 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s\n", 
îrbuf
);

64 
	`exô
(
EXIT_FAILURE
);

67 
§c_ù
 = 0;

68 
d°_ù
 = 0;

69 
§c_¥t
 = 0;

70 
d°_¥t
 = 0;

71 
∑ylﬂd
 = 
NULL
;

72 
∑ylﬂd_s
 = 0;

73 
ù
 = 
ùo
 = 
udp
 = 0;

74 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:p:")Ë!
EOF
)

76 
c
)

85 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

87 
	`ußge
(
¨gv
[0]);

89 *
˝
++ = 0;

90 
d°_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

91 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

93 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
); 
	`exô
(
EXIT_FAILURE
);

97 i‡(!(
˝
 = 
	`°ºchr
(
›èrg
, '.')))

99 
	`ußge
(
¨gv
[0]);

101 *
˝
++ = 0;

102 
§c_¥t
 = (
u_sh‹t
)
	`©oi
(
˝
);

103 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
, 
LIBNET_RESOLVE
)) == -1)

105 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

106 
	`exô
(
EXIT_FAILURE
);

110 
∑ylﬂd
 = 
›èrg
;

111 
∑ylﬂd_s
 = 
	`°æí
(
∑ylﬂd
);

114 
	`exô
(
EXIT_FAILURE
);

118 i‡(!
§c_ù
 || !
§c_¥t
 || !
d°_ù
 || !
d°_¥t
)

120 
	`ußge
(
¨gv
[0]);

121 
	`exô
(
EXIT_FAILURE
);

124 
buûd_ù
 = 0, 
i
 = 0; i < 10; i++)

126 
udp
 = 
	`lib√t_buûd_udp
(

127 
§c_¥t
,

128 
d°_¥t
 + 
i
,

129 
LIBNET_UDP_H
 + 
∑ylﬂd_s
,

131 (
uöt8_t
*)
∑ylﬂd
,

132 
∑ylﬂd_s
,

133 
l
,

134 
udp
);

135 i‡(
udp
 == -1)

137 
	`Ârötf
(
°dîr
, "C™'àbuûd UDP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

138 
bad
;

143 
buûd_ù
 = 0;

145 
j
 = 0; j < 20; j++)

147 
›t
[
j
] = 
	`lib√t_gë_¥™d
(
LIBNET_PR2
);

149 
ùo
 = 
	`lib√t_buûd_ùv4_›ti⁄s
(

150 
›t
,

152 
l
,

153 
ùo
);

154 i‡(
ùo
 == -1)

156 
	`Ârötf
(
°dîr
, "C™'àbuûd IP o±i⁄s: %s\n", 
	`lib√t_gëîr‹
(
l
));

157 
bad
;

160 
ù
 = 
	`lib√t_buûd_ùv4
(

161 
LIBNET_IPV4_H
 + 20 + 
∑ylﬂd_s
 + 
LIBNET_UDP_H
,

166 
IPPROTO_UDP
,

168 
§c_ù
,

169 
d°_ù
,

170 
NULL
,

172 
l
,

173 
ù
);

174 i‡(
ù
 == -1)

176 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

177 
bad
;

184 
	`Ârötf
(
°dîr
, "%d byteÖacket,ÑeadyÅo go\n",

185 
	`lib√t_gë∑ckë_size
(
l
));

186 
c
 = 
	`lib√t_wrôe
(
l
);

187 i‡(
c
 == -1)

189 
	`Ârötf
(
°dîr
, "Wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

190 
bad
;

194 
	`Ârötf
(
°dîr
, "WrŸê%d byã UDPÖackë; checkÅhêwúe.\n", 
c
);

197 
	`lib√t_°©s
(
l
, &
ls
);

198 
	`Ârötf
(
°dîr
, "Packets sent: %lld\n"

201 ()
ls
.
∑ckës_£¡
, (Ós.
∑ckë_îr‹s
,

202 ()
ls
.
byãs_wrôãn
);

203 
	`lib√t_de°roy
(
l
);

204  (
EXIT_SUCCESS
);

205 
bad
:

206 
	`lib√t_de°roy
(
l
);

207  (
EXIT_FAILURE
);

208 
	}
}

211 
	$ußge
(*
«me
)

213 
	`Ârötf
(
°dîr
,

216 
«me
);

217 
	}
}

	@/workspaces/libnet/sample/udp2.c

33 #i‡(
HAVE_CONFIG_H
)

34 
	~"../ö˛ude/c⁄fig.h
"

36 
	~"lib√t_ã°.h
"

40 
	$maö
(
¨gc
, **
¨gv
)

42 
c
, 
buûd_ù
;

43 
timevÆ
 
r
;

44 
timevÆ
 
s
;

45 
timevÆ
 
e
;

46 
lib√t_t
 *
l
;

47 
lib√t_±ag_t
 
udp
;

48 *
∑ylﬂd
;

49 
lib√t_±ag_t
 
t
;

50 
lib√t_°©s
 
ls
;

51 
uöt16_t
 
∑ylﬂd_s
;

52 
uöt32_t
 
§c_ù
, 
d°_ù
;

53 
uöt16_t
 
bp‹t
, 
ï‹t
, 
˝‹t
;

54 
lib√t_∂i°_t
 
∂i°
, *
∂i°_p
;

55 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

57 
	`¥ötf
("libnet 1.1.2Öacket shaping: UDP2[link]\n");

59 
l
 = 
	`lib√t_öô
(

60 
LIBNET_LINK
,

61 
NULL
,

62 
îrbuf
);

64 i‡(
l
 =
NULL
)

66 
	`Ârötf
(
°dîr
, "lib√t_öô(ËÁûed: %s", 
îrbuf
);

67 
	`exô
(
EXIT_FAILURE
);

70 
§c_ù
 = 0;

71 
d°_ù
 = 0;

72 
∑ylﬂd
 = 
NULL
;

73 
∑ylﬂd_s
 = 0;

74 
∂i°_p
 = 
NULL
;

75 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:s:p:P:")Ë!
EOF
)

77 
c
)

80 i‡((
d°_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
,

81 
LIBNET_RESOLVE
)) == -1)

83 
	`Ârötf
(
°dîr
, "Bad de°ö©i⁄ IPáddªss: %s\n", 
›èrg
);

84 
	`exô
(1);

88 i‡((
§c_ù
 = 
	`lib√t_«me2addr4
(
l
, 
›èrg
,

89 
LIBNET_RESOLVE
)) == -1)

91 
	`Ârötf
(
°dîr
, "Bad sour˚ IPáddªss: %s\n", 
›èrg
);

92 
	`exô
(1);

96 
∂i°_p
 = &
∂i°
;

97 i‡(
	`lib√t_∂i°_chaö_√w
(
l
, &
∂i°_p
, 
›èrg
) == -1)

99 
	`Ârötf
(
°dîr
, "BadÅoken inÖortÜist: %s\n",

100 
	`lib√t_gëîr‹
(
l
));

101 
	`exô
(1);

105 
∑ylﬂd
 = 
›èrg
;

106 
∑ylﬂd_s
 = 
	`°æí
(
∑ylﬂd
);

109 
	`ußge
(
¨gv
[0]);

110 
	`exô
(
EXIT_FAILURE
);

114 i‡(!
§c_ù
 || !
d°_ù
 || !
∂i°_p
)

116 
	`ußge
(
¨gv
[0]);

117 
	`exô
(
EXIT_FAILURE
);

120 
udp
 = 0;

121 #i‡!(
__WIN32__
)

122 
	`gëtimeofday
(&
s
, 
NULL
);

125 
s
.
tv_£c
 = 
	`time
(
NULL
);

126 
s
.
tv_u£c
 = 0;

129 
buûd_ù
 = 1;

130 
	`lib√t_∂i°_chaö_√xt_∑ú
(
∂i°_p
, &
bp‹t
, &
ï‹t
))

132 !(
bp‹t
 > 
ï‹t
) && bport != 0)

134 
˝‹t
 = 
bp‹t
++;

135 
udp
 = 
	`lib√t_buûd_udp
(

137 
˝‹t
,

138 
LIBNET_UDP_H
 + 
∑ylﬂd_s
,

140 (
uöt8_t
 *)
∑ylﬂd
,

141 
∑ylﬂd_s
,

142 
l
,

143 
udp
);

144 i‡(
udp
 == -1)

146 
	`Ârötf
(
°dîr
, "Can't build UDP header (atÖort %d): %s\n",

147 
˝‹t
, 
	`lib√t_gëîr‹
(
l
));

148 
bad
;

150 i‡(
buûd_ù
)

152 
buûd_ù
 = 0;

153 
t
 = 
	`lib√t_buûd_ùv4
(

154 
LIBNET_IPV4_H
 + 
LIBNET_UDP_H
 + 
∑ylﬂd_s
,

159 
IPPROTO_UDP
,

161 
§c_ù
,

162 
d°_ù
,

163 
NULL
,

165 
l
,

167 i‡(
t
 == -1)

169 
	`Ârötf
(
°dîr
, "C™'àbuûd IP hódî: %s\n", 
	`lib√t_gëîr‹
(
l
));

170 
bad
;

173 
t
 = 
	`lib√t_buûd_ëhî√t
(

174 
íë_d°
,

175 
íë_§c
,

176 
ETHERTYPE_IP
,

177 
NULL
,

179 
l
,

181 i‡(
t
 == -1)

183 
	`Ârötf
(
°dîr
, "Can't buildÉthernet header: %s\n",

184 
	`lib√t_gëîr‹
(
l
));

185 
bad
;

188 
c
 = 
	`lib√t_wrôe
(
l
);

189 i‡(
c
 == -1)

191 
	`Ârötf
(
°dîr
, "wrôêîr‹: %s\n", 
	`lib√t_gëîr‹
(
l
));

195 
	`Ârötf
(
°dîr
, "wrŸê%d byã UDPÖackëÅÿp‹à%d\r", 
c
,

196 
˝‹t
);

199 
	`Ârötf
(
°dîr
, "\n");

202 #i‡!(
__WIN32__
)

203 
	`gëtimeofday
(&
e
, 
NULL
);

206 
s
.
tv_£c
 = 
	`time
(
NULL
);

207 
s
.
tv_u£c
 = 0;

210 
	`lib√t_timîsub
(&
e
, &
s
, &
r
);

211 
	`Ârötf
(
°dîr
, "TŸÆÅimê•íàöÜo›: %d.%d\n", ()
r
.
tv_£c
,

212 ()
r
.
tv_u£c
);

214 
	`lib√t_°©s
(
l
, &
ls
);

215 
	`Ârötf
(
°dîr
, "Packets sent: %lld\n"

218 ()
ls
.
∑ckës_£¡
, (Ós.
∑ckë_îr‹s
,

219 ()
ls
.
byãs_wrôãn
);

220 
	`lib√t_de°roy
(
l
);

221  (
EXIT_SUCCESS
);

222 
bad
:

223 
	`lib√t_de°roy
(
l
);

224  (
EXIT_FAILURE
);

225 
	}
}

229 
	$ußge
(*
«me
)

231 
	`Ârötf
(
°dîr
, "ußge: %†-†s_ù -d d_ù -PÖ‹àli° [-∞∑ylﬂd]\n", 
«me
);

232 
	}
}

	@/workspaces/libnet/sample/win32/getopt.c

32 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

33 
	gsccsid
[] = "@(#)getopt.c 8.3 (Berkeley) 4/27/95";

35 
	~<sys/cdefs.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<°rög.h
>

40 
	~<uni°d.h
>

42 
	g›ãº
 = 1,

43 
	g›töd
 = 1,

44 
	g›t›t
,

45 
	g›åe£t
;

46 *
	g›èrg
;

48 
	#BADCH
 ()'?'

	)

49 
	#BADARG
 ()':'

	)

50 
	#EMSG
 ""

	)

57 
	$gë›t
(
«rgc
, 
«rgv
, 
o°r
)

58 
«rgc
;

59 * c⁄° 
«rgv
[];

60 c⁄° *
o°r
;

62 #ifde‡
WIN32


63 *
__¥og«me
 = "windump";

65 *
__¥og«me
;

67 *
∂a˚
 = 
EMSG
;

68 *
ﬁi
;

70 i‡(
›åe£t
 || *
∂a˚
 == 0) {

71 
›åe£t
 = 0;

72 
∂a˚
 = 
«rgv
[
›töd
];

73 i‡(
›töd
 >
«rgc
 || *
∂a˚
++ != '-') {

75 
∂a˚
 = 
EMSG
;

78 
›t›t
 = *
∂a˚
++;

79 i‡(
›t›t
 ='-' && *
∂a˚
 == 0) {

81 ++
›töd
;

82 
∂a˚
 = 
EMSG
;

85 i‡(
›t›t
 == 0) {

88 
∂a˚
 = 
EMSG
;

89 i‡(
	`°rchr
(
o°r
, '-'Ë=
NULL
)

91 
›t›t
 = '-';

94 
›t›t
 = *
∂a˚
++;

97 i‡(
›t›t
 =':' || (
ﬁi
 = 
	`°rchr
(
o°r
, o±›t)Ë=
NULL
) {

98 i‡(*
∂a˚
 == 0)

99 ++
›töd
;

100 i‡(
›ãº
 && *
o°r
 != ':')

101 ()
	`Ârötf
(
°dîr
,

102 "%s: iŒegÆ o±i⁄ -- %c\n", 
__¥og«me
,

103 
›t›t
);

104  (
BADCH
);

108 i‡(
ﬁi
[1] != ':') {

110 
›èrg
 = 
NULL
;

111 i‡(*
∂a˚
 == 0)

112 ++
›töd
;

116 i‡(*
∂a˚
)

117 
›èrg
 = 
∂a˚
;

118 i‡(
«rgc
 > ++
›töd
)

119 
›èrg
 = 
«rgv
[
›töd
];

122 
∂a˚
 = 
EMSG
;

123 i‡(*
o°r
 == ':')

124  (
BADARG
);

125 i‡(
›ãº
)

126 ()
	`Ârötf
(
°dîr
,

128 
__¥og«me
, 
›t›t
);

129  (
BADCH
);

131 
∂a˚
 = 
EMSG
;

132 ++
›töd
;

134  (
›t›t
);

135 
	}
}

	@/workspaces/libnet/src/common.h

30 #i‡(
_WIN32
Ë|| (
__CYGWIN__
)

33 
	#_CRT_SECURE_NO_WARNINGS


	)

37 
	~<Packë32.h
>

40 
	#PCAP_DONT_INCLUDE_PCAP_BPF_H


	)

41 
	~<pˇp/pˇp.h
>

43 
	~<mÆloc.h
>

45 #ifde‡
__MINGW32__


46 
	~<¡ddndis.h
>

48 
	~<Ntddndis.h
>

53 
	~<as£π.h
>

54 
	~<sys/ty≥s.h
>

55 
	~<√töë/ö.h
>

63 
	~<c⁄fig.h
>

64 
	~"../ö˛ude/lib√t.h
"

70 #i‚de‡
IPPROTO_MH


71 
	#IPPROTO_MH
 135

	)

	@/workspaces/libnet/src/libnet_advanced.c

33 
	~"comm⁄.h
"

36 
	$lib√t_adv_cuŒ_∑ckë
(
lib√t_t
 *
l
, 
uöt8_t
 **
∑ckë
, 
uöt32_t
 *
∑ckë_s
)

38 *
∑ckë
 = 
NULL
;

39 *
∑ckë_s
 = 0;

41 i‡(
l
->
öje˘i⁄_ty≥
 !
LIBNET_LINK_ADV
)

43 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

44 "%s():ádv™˚dÜök modênŸÉ«bÀd", 
__func__
);

49  (
	`lib√t_pblock_cﬂÀs˚
(
l
, 
∑ckë
, 
∑ckë_s
));

50 
	}
}

53 
	$lib√t_adv_cuŒ_hódî
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
, 
uöt8_t
 **
hódî
,

54 
uöt32_t
 *
hódî_s
)

56 
lib√t_pblock_t
 *
p
;

58 *
hódî
 = 
NULL
;

59 *
hódî_s
 = 0;

61 i‡(
l
->
öje˘i⁄_ty≥
 !
LIBNET_LINK_ADV
)

63 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

64 "%s():ádv™˚dÜök modênŸÉ«bÀd", 
__func__
);

68 
p
 = 
	`lib√t_pblock_föd
(
l
, 
±ag
);

69 i‡(
p
 =
NULL
)

71 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

72 "%s():ÖègÇŸ found, you suª iàexi°s?", 
__func__
);

75 *
hódî
 = 
p
->
buf
;

76 *
hódî_s
 = 
p
->
b_Àn
;

79 
	}
}

82 
	$lib√t_adv_wrôe_lök
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
∑ckë_s
)

84 
ssize_t
 
c
;

86 i‡(
l
->
öje˘i⁄_ty≥
 !
LIBNET_LINK_ADV
)

88 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

89 "%s():ádv™˚dÜök modênŸÉ«bÀd", 
__func__
);

92 
c
 = 
	`lib√t_wrôe_lök
(
l
, 
∑ckë
, 
∑ckë_s
);

95 i‡(
c
 =(
ssize_t
)
∑ckë_s
)

97 
l
->
°©s
.
∑ckës_£¡
++;

98 
l
->
°©s
.
byãs_wrôãn
 +
c
;

102 
l
->
°©s
.
∑ckë_îr‹s
++;

107 i‡(
c
 > 0)

109 
l
->
°©s
.
byãs_wrôãn
 +
c
;

112  (
c
);

113 
	}
}

116 
	$lib√t_adv_wrôe_øw_ùv4
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
∑ckë_s
)

118 
ssize_t
 
c
;

120 i‡(
l
->
öje˘i⁄_ty≥
 !
LIBNET_RAW4_ADV
)

122 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

123 "%s():ádv™˚dÑaw4 modênŸÉ«bÀd", 
__func__
);

126 
c
 = 
	`lib√t_wrôe_øw_ùv4
(
l
, 
∑ckë
, 
∑ckë_s
);

129 i‡(
c
 =(
ssize_t
)
∑ckë_s
)

131 
l
->
°©s
.
∑ckës_£¡
++;

132 
l
->
°©s
.
byãs_wrôãn
 +
c
;

136 
l
->
°©s
.
∑ckë_îr‹s
++;

141 i‡(
c
 > 0)

143 
l
->
°©s
.
byãs_wrôãn
 +
c
;

146  (
c
);

147 
	}
}

150 
	$lib√t_adv_‰ì_∑ckë
(
lib√t_t
 *
l
, 
uöt8_t
 *
∑ckë
)

156 i‡(
l
->
Æig√r
 > 0)

158 
∑ckë
 =Öackë - 
l
->
Æig√r
;

160 
	`‰ì
(
∑ckë
);

161 
	}
}

	@/workspaces/libnet/src/libnet_asn1.c

58 
	~"comm⁄.h
"

60 
uöt8_t
 *

61 
	$lib√t_buûd_a¢1_öt
(
uöt8_t
 *
d©a
, *
d©Æí
, uöt8_à
ty≥
, 
öt32_t
 *
öt_p
,

62 
öt_s
)

67 
öt32_t
 
öãgî
;

68 
uöt32_t
 
mask
;

70 i‡(
öt_s
 ! (
öt32_t
))

72  (
NULL
);

74 
öãgî
 = *
öt_p
;

81 
mask
 = ((
uöt32_t
Ë0x1FFË<< ((8 * ( (
öt32_t
) - 1)) - 1);

84 (((
öãgî
 & 
mask
Ë=0Ë|| ((öãgî & maskË=mask)Ë&& 
öt_s
 > 1)

86 
öt_s
--;

87 
öãgî
 <<= 8;

90 
d©a
 = 
	`lib√t_buûd_a¢1_hódî
(d©a, 
d©Æí
, 
ty≥
, 
öt_s
);

92 i‡(
d©a
 =
NULL
 || *
d©Æí
 < 
öt_s
)

94  (
NULL
);

97 *
d©Æí
 -
öt_s
;

99 
mask
 = ((
uöt32_t
Ë0xFFË<< (8 * ((
öt32_t
) - 1));

102 
öt_s
--)

104 *
d©a
++ = (
uöt8_t
)((
öãgî
 & 
mask
Ë>> (8 * ( (
öt32_t
) - 1)));

105 
öãgî
 <<= 8;

107  (
d©a
);

108 
	}
}

111 
uöt8_t
 *

112 
	$lib√t_buûd_a¢1_uöt
(
uöt8_t
 *
d©a
, *
d©Æí
, uöt8_à
ty≥
, 
uöt32_t
 *
öt_p
,

113 
öt_s
)

118 
uöt32_t
 
öãgî
;

119 
uöt32_t
 
mask
;

120 
add_nuŒ_byã
 = 0;

122 i‡(
öt_s
 ! (
öt32_t
))

124  (
NULL
);

126 
öãgî
 = *
öt_p
;

128 
mask
 = ((
uöt32_t
Ë0xFFË<< (8 * ( (
öt32_t
) - 1));

131 i‡((
uöt8_t
)((
öãgî
 & 
mask
Ë>> (8 * ( (
öt32_t
) - 1))) & 0x80)

134 
add_nuŒ_byã
 = 1;

135 
öt_s
++;

145 
mask
 = ((
uöt32_t
Ë0x1FFË<< ((8 * ((
öt32_t
) - 1)) - 1);

148 ((
öãgî
 & 
mask
Ë=0Ë&& 
öt_s
 > 1)

150 
öt_s
--;

151 
öãgî
 <<= 8;

155 
d©a
 = 
	`lib√t_buûd_a¢1_hódî
(d©a, 
d©Æí
, 
ty≥
, 
öt_s
);

157 i‡(
d©a
 =
NULL
 || *
d©Æí
 < 
öt_s
)

159  (
NULL
);

162 *
d©Æí
 -
öt_s
;

164 i‡(
add_nuŒ_byã
 == 1)

166 *
d©a
++ = '\0';

167 
öt_s
--;

170 
mask
 = ((
uöt32_t
Ë0xFFË<< (8 * ((
öt32_t
) - 1));

173 
öt_s
--)

175 *
d©a
++ = (
uöt8_t
)((
öãgî
 & 
mask
Ë>> (8 * ( (
öt32_t
) - 1)));

176 
öãgî
 <<= 8;

178  (
d©a
);

179 
	}
}

182 
uöt8_t
 *

183 
	$lib√t_buûd_a¢1_°rög
(
uöt8_t
 *
d©a
, *
d©Æí
, uöt8_à
ty≥
,

184 
uöt8_t
 *
°rög
, 
°r_s
)

193 
d©a
 = 
	`lib√t_buûd_a¢1_hódî
(d©a, 
d©Æí
, 
ty≥
, 
°r_s
);

195 i‡(
d©a
 =
NULL
 || *
d©Æí
 < 
°r_s
)

197  (
NULL
);

199 
	`memmove
(
d©a
, 
°rög
, 
°r_s
);

200 *
d©Æí
 -
°r_s
;

202  (
d©a
 + 
°r_s
);

203 
	}
}

206 
uöt8_t
 *

207 
	$lib√t_buûd_a¢1_hódî
(
uöt8_t
 *
d©a
, *
d©Æí
, uöt8_à
ty≥
, 
Àn
)

209 i‡(*
d©Æí
 < 1)

211  (
NULL
);

213 *
d©a
++ = 
ty≥
;

214 (*
d©Æí
)--;

216  (
	`lib√t_buûd_a¢1_Àngth
(
d©a
, 
d©Æí
, 
Àn
));

217 
	}
}

220 
uöt8_t
 *

221 
	$lib√t_buûd_a¢1_£quí˚
(
uöt8_t
 *
d©a
, *
d©Æí
, uöt8_à
ty≥
, 
Àn
)

223 *
d©Æí
 -= 4;

224 i‡(*
d©Æí
 < 0)

226 *
d©Æí
 += 4;

227  (
NULL
);

229 *
d©a
++ = 
ty≥
;

230 *
d©a
++ = (
uöt8_t
)(0x02 | 
ASN_LONG_LEN
);

231 *
d©a
++ = (
uöt8_t
)((
Àn
 >> 8) & 0xFF);

232 *
d©a
++ = (
uöt8_t
)(
Àn
 & 0xFF);

233  (
d©a
);

234 
	}
}

237 
uöt8_t
 *

238 
	$lib√t_buûd_a¢1_Àngth
(
uöt8_t
 *
d©a
, *
d©Æí
, 
Àn
)

240 
uöt8_t
 *
°¨t_d©a
 = 
d©a
;

243 i‡(
Àn
 < 0x80)

245 i‡(*
d©Æí
 < 1)

247  (
NULL
);

249 *
d©a
++ = (
uöt8_t
)
Àn
;

251 i‡(
Àn
 <= 0xFF)

253 i‡(*
d©Æí
 < 2)

255  (
NULL
);

257 *
d©a
++ = (
uöt8_t
)(0x01 | 
ASN_LONG_LEN
);

258 *
d©a
++ = (
uöt8_t
)
Àn
;

262 i‡(*
d©Æí
 < 3)

264  (
NULL
);

266 *
d©a
++ = (
uöt8_t
)(0x02 | 
ASN_LONG_LEN
);

267 *
d©a
++ = (
uöt8_t
)((
Àn
 >> 8) & 0xFF);

268 *
d©a
++ = (
uöt8_t
)(
Àn
 & 0xFF);

270 *
d©Æí
 -()(
d©a
 - 
°¨t_d©a
);

271  (
d©a
);

272 
	}
}

275 
uöt8_t
 *

276 
	$lib√t_buûd_a¢1_objid
(
uöt8_t
 *
d©a
, *
d©Æí
, uöt8_à
ty≥
, 
oid
 *
objid
,

277 
objidÀn
)

285 
a¢Àn
;

286 
oid
 *
›
 = 
objid
;

287 
uöt8_t
 
objid_size
[
MAX_OID_LEN
];

288 
uöt32_t
 
objid_vÆ
;

289 
uöt32_t
 
fú°_objid_vÆ
;

290 
i
;

293 i‡(
objidÀn
 < 2)

296 
objid_vÆ
 = 0;

297 
objidÀn
 = 2;

302 
objid_vÆ
 = (
›
[0] * 40) + op[1];

303 
›
 += 2;

305 
fú°_objid_vÆ
 = 
objid_vÆ
;

308 
i
 = 1, 
a¢Àn
 = 0;;)

310 i‡(
objid_vÆ
 < ()0x80)

312 
objid_size
[
i
] = 1;

313 
a¢Àn
 += 1;

315 i‡(
objid_vÆ
 < ()0x4000)

317 
objid_size
[
i
] = 2;

318 
a¢Àn
 += 2;

320 i‡(
objid_vÆ
 < ()0x200000)

322 
objid_size
[
i
] = 3;

323 
a¢Àn
 += 3;

325 i‡(
objid_vÆ
 < ()0x10000000)

327 
objid_size
[
i
] = 4;

328 
a¢Àn
 += 4;

332 
objid_size
[
i
] = 5;

333 
a¢Àn
 += 5;

335 
i
++;

336 i‡(
i
 >
objidÀn
)

340 
objid_vÆ
 = *
›
++;

344 
d©a
 = 
	`lib√t_buûd_a¢1_hódî
(d©a, 
d©Æí
, 
ty≥
, 
a¢Àn
);

345 i‡(
d©a
 =
NULL
 || *
d©Æí
 < 
a¢Àn
)

347  (
NULL
);

351 
i
 = 1, 
objid_vÆ
 = 
fú°_objid_vÆ
, 
›
 = 
objid
 + 2; i < 
objidÀn
; i++)

353 i‡(
i
 != 1)

355 
objid_vÆ
 = *
›
++;

357 
objid_size
[
i
])

360 *
d©a
++ = (
uöt8_t
)
objid_vÆ
;

364 *
d©a
++ = (
uöt8_t
)((
objid_vÆ
 >> 7) | 0x80);

365 *
d©a
++ = (
uöt8_t
)(
objid_vÆ
 & 0x07f);

368 *
d©a
++ = (
uöt8_t
)((
objid_vÆ
 >> 14) | 0x80);

369 *
d©a
++ = (
uöt8_t
)((
objid_vÆ
 >> 7 & 0x7f) | 0x80);

370 *
d©a
++ = (
uöt8_t
)(
objid_vÆ
 & 0x07f);

374 *
d©a
++ = (
uöt8_t
)((
objid_vÆ
 >> 21) | 0x80);

375 *
d©a
++ = (
uöt8_t
)((
objid_vÆ
 >> 14 & 0x7f) | 0x80);

376 *
d©a
++ = (
uöt8_t
)((
objid_vÆ
 >> 7 & 0x7f) | 0x80);

377 *
d©a
++ = (
uöt8_t
)(
objid_vÆ
 & 0x07f);

381 *
d©a
++ = (
uöt8_t
)((
objid_vÆ
 >> 28) | 0x80);

382 *
d©a
++ = (
uöt8_t
)((
objid_vÆ
 >> 21 & 0x7f) | 0x80);

383 *
d©a
++ = (
uöt8_t
)((
objid_vÆ
 >> 14 & 0x7f) | 0x80);

384 *
d©a
++ = (
uöt8_t
)((
objid_vÆ
 >> 7 & 0x7f) | 0x80);

385 *
d©a
++ = (
uöt8_t
)(
objid_vÆ
 & 0x07f);

391 *
d©Æí
 -
a¢Àn
;

392  (
d©a
);

393 
	}
}

396 
uöt8_t
 *

397 
	$lib√t_buûd_a¢1_nuŒ
(
uöt8_t
 *
d©a
, *
d©Æí
, uöt8_à
ty≥
)

402  (
	`lib√t_buûd_a¢1_hódî
(
d©a
, 
d©Æí
, 
ty≥
, 0));

403 
	}
}

406 
uöt8_t
 *

407 
	$lib√t_buûd_a¢1_bô°rög
(
uöt8_t
 *
d©a
, *
d©Æí
, uöt8_à
ty≥
,

408 
uöt8_t
 *
°rög
, 
°r_s
)

414 i‡(
°r_s
 < 1 || *
°rög
 > 7)

416  (
NULL
);

418 
d©a
 = 
	`lib√t_buûd_a¢1_hódî
(d©a, 
d©Æí
, 
ty≥
, 
°r_s
);

420 i‡(
d©a
 =
NULL
 || *
d©Æí
 < 
°r_s
)

422  (
NULL
);

425 
	`memmove
(
d©a
, 
°rög
, 
°r_s
);

426 *
d©Æí
 -
°r_s
;

428  (
d©a
 + 
°r_s
);

429 
	}
}

	@/workspaces/libnet/src/libnet_build_802.1q.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_802_1q
(c⁄° 
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, 
uöt16_t
 
çi
,

37 
uöt8_t
 
¥i‹ôy
, uöt8_à
cfi
, 
uöt16_t
 
vœn_id
, uöt16_à
Àn_¥Ÿo
,

38 c⁄° 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

40 
uöt32_t
 
n
, 
h
;

41 
lib√t_pblock_t
 *
p
;

42 
lib√t_802_1q_hdr
 
_802_1q_hdr
;

44 i‡(
l
 =
NULL
)

49 
n
 = 
LIBNET_802_1Q_H
 + 
∑ylﬂd_s
;

50 
h
 = 0;

56 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_802_1Q_H
);

57 i‡(
p
 =
NULL
)

62 
	`mem£t
(&
_802_1q_hdr
, 0, (_802_1q_hdr));

63 
	`mem˝y
(
_802_1q_hdr
.
vœn_dho°
, 
d°
, 
ETHER_ADDR_LEN
);

64 
	`mem˝y
(
_802_1q_hdr
.
vœn_sho°
, 
§c
, 
ETHER_ADDR_LEN
);

65 
_802_1q_hdr
.
vœn_çi
 = 
	`ht⁄s
(
çi
);

66 
_802_1q_hdr
.
vœn_¥i‹ôy_c_vid
 = 
	`ht⁄s
((
¥i‹ôy
 << 13Ë| (
cfi
 << 12)

67 | (
vœn_id
 & 
LIBNET_802_1Q_VIDMASK
));

68 
_802_1q_hdr
.
vœn_Àn
 = 
	`ht⁄s
(
Àn_¥Ÿo
);

70 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
_802_1q_hdr
, 
LIBNET_802_1Q_H
) == -1)

72 
bad
;

76 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

85 
l
->
lök_off£t
 += 4;

86  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

87 
LIBNET_PBLOCK_802_1Q_H
));

88 
bad
:

89 
	`lib√t_pblock_dñëe
(
l
, 
p
);

91 
	}
}

	@/workspaces/libnet/src/libnet_build_802.1x.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_802_1x
(
uöt8_t
 
óp_vî
, uöt8_à
óp_ty≥
, 
uöt16_t
 
Àngth
,

37 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

39 
uöt32_t
 
n
, 
h
;

40 
lib√t_pblock_t
 *
p
;

41 
lib√t_802_1x_hdr
 
dŸ1x_hdr
;

43 i‡(
l
 =
NULL
)

48 
n
 = 
LIBNET_802_1X_H
 + 
∑ylﬂd_s
;

49 
h
 = 0;

55 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_802_1X_H
);

56 i‡(
p
 =
NULL
)

61 
	`mem£t
(&
dŸ1x_hdr
, 0, (dot1x_hdr));

62 
dŸ1x_hdr
.
dŸ1x_vîsi⁄
 = 
óp_vî
;

63 
dŸ1x_hdr
.
dŸ1x_ty≥
 = 
óp_ty≥
;

64 
dŸ1x_hdr
.
dŸ1x_Àngth
 = 
	`ht⁄s
(
Àngth
);

66 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
dŸ1x_hdr
, 
LIBNET_802_1X_H
) == -1)

68 
bad
;

71 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

73  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

74 
LIBNET_PBLOCK_802_1X_H
));

75 
bad
:

76 
	`lib√t_pblock_dñëe
(
l
, 
p
);

78 
	}
}

	@/workspaces/libnet/src/libnet_build_802.2.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_802_2
(
uöt8_t
 
dßp
, uöt8_à
sßp
, uöt8_à
c⁄åﬁ
,

37 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

39 
uöt32_t
 
n
, 
h
;

40 
lib√t_pblock_t
 *
p
;

41 
lib√t_802_2_hdr
 
_802_2_hdr
;

43 i‡(
l
 =
NULL
)

48 
n
 = 
LIBNET_802_2_H
 + 
∑ylﬂd_s
;

49 
h
 = 0;

55 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_802_2_H
);

56 i‡(
p
 =
NULL
)

61 
	`mem£t
(&
_802_2_hdr
, 0, (_802_2_hdr));

62 
_802_2_hdr
.
Œc_dßp
 = 
dßp
;

63 
_802_2_hdr
.
Œc_sßp
 = 
sßp
;

64 
_802_2_hdr
.
Œc_c⁄åﬁ
 = 
c⁄åﬁ
;

66 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
_802_2_hdr
,

67 
LIBNET_802_2_H
) == -1)

69 
bad
;

73 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

75  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

76 
LIBNET_PBLOCK_802_2_H
));

77 
bad
:

78 
	`lib√t_pblock_dñëe
(
l
, 
p
);

80 
	}
}

82 
lib√t_±ag_t


83 
	$lib√t_buûd_802_2¢≠
(
uöt8_t
 
dßp
, uöt8_à
sßp
, uöt8_à
c⁄åﬁ
,

84 
uöt8_t
 *
oui
, 
uöt16_t
 
ty≥
, c⁄° uöt8_à*
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

85 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

87 
uöt32_t
 
n
, 
h
;

88 
lib√t_pblock_t
 *
p
;

89 
lib√t_802_2¢≠_hdr
 
_802_2_hdr
;

91 i‡(
l
 =
NULL
)

96 
n
 = 
LIBNET_802_2SNAP_H
 + 
∑ylﬂd_s
;

97 
h
 = 0;

103 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_802_2SNAP_H
);

104 i‡(
p
 =
NULL
)

109 
	`mem£t
(&
_802_2_hdr
, 0, (_802_2_hdr));

110 
_802_2_hdr
.
¢≠_dßp
 = 
dßp
;

111 
_802_2_hdr
.
¢≠_sßp
 = 
sßp
;

112 
_802_2_hdr
.
¢≠_c⁄åﬁ
 = 
c⁄åﬁ
;

113 
	`mem˝y
(
_802_2_hdr
.
¢≠_oui
, 
oui
, 3);

114 
_802_2_hdr
.
¢≠_ty≥
 = 
	`ht⁄s
(
ty≥
);

116 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
_802_2_hdr
, 
LIBNET_802_2SNAP_H
) == -1)

118 
bad
;

122 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

124  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

125 
LIBNET_PBLOCK_802_2SNAP_H
));

126 
bad
:

127 
	`lib√t_pblock_dñëe
(
l
, 
p
);

129 
	}
}

	@/workspaces/libnet/src/libnet_build_802.3.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_802_3
(c⁄° 
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, 
uöt16_t
 
Àn
,

37 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

39 
uöt32_t
 
n
, 
h
;

40 
lib√t_pblock_t
 *
p
;

41 
lib√t_802_3_hdr
 
_802_3_hdr
;

43 i‡(
l
 =
NULL
)

48 
n
 = 
LIBNET_802_3_H
 + 
∑ylﬂd_s
;

49 
h
 = 0;

55 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_802_3_H
);

56 i‡(
p
 =
NULL
)

61 
	`mem£t
(&
_802_3_hdr
, 0, (_802_3_hdr));

62 
	`mem˝y
(
_802_3_hdr
.
_802_3_dho°
, 
d°
, 
ETHER_ADDR_LEN
);

63 
	`mem˝y
(
_802_3_hdr
.
_802_3_sho°
, 
§c
, 
ETHER_ADDR_LEN
);

64 
_802_3_hdr
.
_802_3_Àn
 = 
	`ht⁄s
(
Àn
);

66 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
_802_3_hdr
, 
LIBNET_802_3_H
) == -1)

68 
bad
;

72 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

74  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_802_3_H
));

75 
bad
:

76 
	`lib√t_pblock_dñëe
(
l
, 
p
);

78 
	}
}

	@/workspaces/libnet/src/libnet_build_arp.c

33 
	~"comm⁄.h
"

36 
lib√t_±ag_t


37 
	$lib√t_buûd_¨p
(
uöt16_t
 
hrd
, uöt16_à
¥o
, 
uöt8_t
 
h 
, uöt8_à
∂n
,

38 
uöt16_t
 
›
, c⁄° 
uöt8_t
 *
sha
, c⁄° uöt8_à*
•a
, c⁄° uöt8_à*
tha
, c⁄° uöt8_à*
ça
,

39 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

41 
uöt32_t
 
n
, 
h
;

42 
lib√t_pblock_t
 *
p
;

43 
lib√t_¨p_hdr
 
¨p_hdr
;

45 i‡(
l
 =
NULL
)

50 
n
 = 
LIBNET_ARP_H
 + (2 * 
h 
Ë+ (2 * 
∂n
Ë+ 
∑ylﬂd_s
;

51 
h
 = 0;

57 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_ARP_H
);

58 i‡(
p
 =
NULL
)

63 
	`mem£t
(&
¨p_hdr
, 0, (arp_hdr));

64 
¨p_hdr
.
¨_hrd
 = 
	`ht⁄s
(
hrd
);

65 
¨p_hdr
.
¨_¥o
 = 
	`ht⁄s
(
¥o
);

66 
¨p_hdr
.
¨_h 
 = 
h 
;

67 
¨p_hdr
.
¨_∂n
 = 
∂n
;

68 
¨p_hdr
.
¨_›
 = 
	`ht⁄s
(
›
);

70 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
¨p_hdr
, 
LIBNET_ARP_H
) == -1)

73 
bad
;

75 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
sha
, 
h 
) == -1)

78 
bad
;

80 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
•a
, 
∂n
) == -1)

83 
bad
;

85 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
tha
, 
h 
) == -1)

88 
bad
;

90 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
ça
, 
∂n
) == -1)

93 
bad
;

97 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

99  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_ARP_H
));

100 
bad
:

101 
	`lib√t_pblock_dñëe
(
l
, 
p
);

103 
	}
}

105 
lib√t_±ag_t


106 
	$lib√t_autobuûd_¨p
(
uöt16_t
 
›
, c⁄° 
uöt8_t
 *
sha
, c⁄° uöt8_à*
•a
, c⁄° uöt8_à*
tha
,

107 c⁄° 
uöt8_t
 *
ça
, 
lib√t_t
 *
l
)

109 
uöt16_t
 
hrd
;

111 
l
->
lök_ty≥
)

114 
hrd
 = 
ARPHRD_ETHER
;

117 
hrd
 = 
ARPHRD_IEEE802
;

120 
hrd
 = 0;

121 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

122 "%s(): unsuµ‹ãdÜökÅy≥", 
__func__
);

127  (
	`lib√t_buûd_¨p
(

128 
hrd
,

129 
ETHERTYPE_IP
,

132 
›
,

133 
sha
,

134 
•a
,

135 
tha
,

136 
ça
,

137 
NULL
,

139 
l
,

141 
	}
}

	@/workspaces/libnet/src/libnet_build_bgp.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_bgp4_hódî
(
uöt8_t
 
m¨kî
[
LIBNET_BGP4_MARKER_SIZE
],

37 
uöt16_t
 
Àn
, 
uöt8_t
 
ty≥
, c⁄° uöt8_à*
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

38 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

40 
uöt32_t
 
n
, 
h
;

41 
lib√t_pblock_t
 *
p
;

42 
lib√t_bgp4_hódî_hdr
 
bgp4_hdr
;

44 i‡(
l
 =
NULL
)

49 
n
 = 
LIBNET_BGP4_HEADER_H
 + 
∑ylﬂd_s
;

50 
h
 = 0;

56 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_BGP4_HEADER_H
);

57 i‡(
p
 =
NULL
)

62 
	`mem£t
(&
bgp4_hdr
, 0, (bgp4_hdr));

63 
	`mem˝y
(
bgp4_hdr
.
m¨kî
, m¨kî, 
LIBNET_BGP4_MARKER_SIZE
 * (
uöt8_t
));

64 
bgp4_hdr
.
Àn
 = 
	`ht⁄s
(len);

65 
bgp4_hdr
.
ty≥
 =Åype;

67 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
bgp4_hdr
, 
LIBNET_BGP4_HEADER_H
) == -1)

69 
bad
;

73 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

75  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

76 
LIBNET_PBLOCK_BGP4_HEADER_H
));

77 
bad
:

78 
	`lib√t_pblock_dñëe
(
l
, 
p
);

80 
	}
}

82 
lib√t_±ag_t


83 
	$lib√t_buûd_bgp4_›í
(
uöt8_t
 
vîsi⁄
, 
uöt16_t
 
§c_as
, uöt16_à
hﬁd_time
,

84 
uöt32_t
 
bgp_id
, 
uöt8_t
 
›t_Àn
, c⁄° uöt8_à*
∑ylﬂd
, uöt32_à
∑ylﬂd_s
,

85 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

87 
uöt32_t
 
n
, 
h
;

88 
lib√t_pblock_t
 *
p
;

89 
uöt16_t
 
vÆ
;

91 i‡(
l
 =
NULL
)

96 
n
 = 
LIBNET_BGP4_OPEN_H
 + 
∑ylﬂd_s
;

97 
h
 = 0;

103 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_BGP4_OPEN_H
);

104 i‡(
p
 =
NULL
)

110 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
vîsi⁄
,  (version)) == -1)

112 
bad
;

115 
vÆ
 = 
	`ht⁄s
(
§c_as
);

116 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
vÆ
, (
§c_as
)) == -1)

118 
bad
;

121 
vÆ
 = 
	`ht⁄s
(
hﬁd_time
);

122 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
vÆ
, (
hﬁd_time
)) == -1)

124 
bad
;

127 
n
 = 
	`ht⁄l
(
bgp_id
);

128 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
n
, (
bgp_id
)) == -1)

130 
bad
;

133 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
›t_Àn
, (opt_len)) == -1)

135 
bad
;

139 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

141  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

142 
LIBNET_PBLOCK_BGP4_OPEN_H
));

143 
bad
:

144 
	`lib√t_pblock_dñëe
(
l
, 
p
);

146 
	}
}

148 
lib√t_±ag_t


149 
	$lib√t_buûd_bgp4_upd©e
(
uöt16_t
 
un„asibÀ_π_Àn
, c⁄° 
uöt8_t
 *
wôhdøwn_π
,

150 
uöt16_t
 
tŸÆ_∑th_©å_Àn
, c⁄° 
uöt8_t
 *
∑th_©åibuãs
, uöt16_à
öfo_Àn
,

151 
uöt8_t
 *
ªachabûôy_öfo
, c⁄° uöt8_à*
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

152 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

154 
uöt32_t
 
n
, 
h
;

155 
lib√t_pblock_t
 *
p
;

156 
uöt16_t
 
Àngth
;

158 i‡(
l
 =
NULL
)

164 
n
 = 
LIBNET_BGP4_UPDATE_H
 + 
un„asibÀ_π_Àn
 + 
tŸÆ_∑th_©å_Àn
 +

165 
öfo_Àn
 + 
∑ylﬂd_s
;

168 
h
 = 0;

174 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_BGP4_UPDATE_H
);

175 i‡(
p
 =
NULL
)

181 
Àngth
 = 
	`ht⁄s
(
un„asibÀ_π_Àn
);

182 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
Àngth
,

183  (
un„asibÀ_π_Àn
)) == -1)

185 
bad
;

188 i‡(
un„asibÀ_π_Àn
 && 
wôhdøwn_π
)

190 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
wôhdøwn_π
, 
un„asibÀ_π_Àn
) == -1)

192 
bad
;

196 
Àngth
 = 
	`ht⁄s
(
tŸÆ_∑th_©å_Àn
);

197 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
Àngth
,

198  (
tŸÆ_∑th_©å_Àn
)) == -1)

200 
bad
;

203 i‡(
tŸÆ_∑th_©å_Àn
 && 
∑th_©åibuãs
)

205 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
∑th_©åibuãs
, 
tŸÆ_∑th_©å_Àn
) == -1)

207 
bad
;

211 i‡(
öfo_Àn
 && 
ªachabûôy_öfo
)

213 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
ªachabûôy_öfo
, 
öfo_Àn
) == -1)

215 
bad
;

220 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

222  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

223 
LIBNET_PBLOCK_BGP4_UPDATE_H
));

224 
bad
:

225 
	`lib√t_pblock_dñëe
(
l
, 
p
);

227 
	}
}

229 
lib√t_±ag_t


230 
	$lib√t_buûd_bgp4_nŸifiˇti⁄
(
uöt8_t
 
îr_code
, uöt8_à
îr_subcode
,

231 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

233 
uöt32_t
 
n
, 
h
;

234 
lib√t_pblock_t
 *
p
;

235 
lib√t_bgp4_nŸifiˇti⁄_hdr
 
bgp4_hdr
;

237 i‡(
l
 =
NULL
)

242 
n
 = 
LIBNET_BGP4_NOTIFICATION_H
 + + 
∑ylﬂd_s
;

243 
h
 = 0;

249 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_BGP4_NOTIFICATION_H
);

250 i‡(
p
 =
NULL
)

255 
	`mem£t
(&
bgp4_hdr
, 0, (bgp4_hdr));

256 
bgp4_hdr
.
îr_code
 =Érr_code;

257 
bgp4_hdr
.
îr_subcode
 =Érr_subcode;

259 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
bgp4_hdr
,

260 
LIBNET_BGP4_NOTIFICATION_H
) == -1)

262 
bad
;

266 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

268  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

269 
LIBNET_PBLOCK_BGP4_NOTIFICATION_H
));

270 
bad
:

271 
	`lib√t_pblock_dñëe
(
l
, 
p
);

273 
	}
}

	@/workspaces/libnet/src/libnet_build_cdp.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_cdp
(
uöt8_t
 
vîsi⁄
, uöt8_à
âl
, 
uöt16_t
 
sum
, uöt16_à
ty≥
,

37 
uöt16_t
 
Àn
, c⁄° 
uöt8_t
 *
vÆue
, c⁄° uöt8_à*
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

38 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

40 
uöt32_t
 
n
,
h
;

41 
lib√t_pblock_t
 *
p
;

42 
lib√t_cdp_hdr
 
cdp_hdr
;

44 i‡(
l
 =
NULL
)

49 
n
 = 
LIBNET_CDP_H
 + LIBNET_CDP_H + 
Àn
 + 
∑ylﬂd_s
;

50 
h
 = 
LIBNET_CDP_H
 + LIBNET_CDP_H + 
Àn
 + 
∑ylﬂd_s
;

56 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_CDP_H
);

57 i‡(
p
 =
NULL
)

62 
	`mem£t
(&
cdp_hdr
, 0, (cdp_hdr));

63 
cdp_hdr
.
cdp_vîsi⁄
 = 
vîsi⁄
;

64 
cdp_hdr
.
cdp_âl
 = 
âl
;

65 
cdp_hdr
.
cdp_sum
 = (
sum
 ? 
	`ht⁄s
(sum) : 0);

66 
cdp_hdr
.
cdp_ty≥
 = 
	`ht⁄s
(
ty≥
);

67 
cdp_hdr
.
cdp_Àn
 = 
	`ht⁄s
(
Àn
 + 4);

69 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
cdp_hdr
, 
LIBNET_CDP_H
) == -1)

71 
bad
;

74 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
vÆue
, 
Àn
) == -1)

77 
bad
;

81 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

83 i‡(
sum
 == 0)

90 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

92  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_CDP_H
));

93 
bad
:

94 
	`lib√t_pblock_dñëe
(
l
, 
p
);

96 
	}
}

101 
	$lib√t_buûd_cdp_vÆue
(
uöt16_t
 
ty≥
, uöt16_à
Àn
, 
uöt8_t
 *
vÆue
, 
lib√t_t
 *
l
,

102 
lib√t_±ag_t
 
±ag
)

104 
lib√t_pblock_t
 *
p
;

105 
lib√t_cdp_vÆue_hdr
 
cdp_vÆue_hdr
;

107 i‡(
l
 =
NULL
)

115 
p
 = 
	`lib√t_pblock_föd
(
l
, 
±ag
);

116 i‡(
p
 =
NULL
)

121 i‡(
p
->
ty≥
 !
LIBNET_PBLOCK_CDP_H
)

123 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

128 
	`mem£t
(&
cdp_vÆue_hdr
, 0, (cdp_value_hdr));

129 
cdp_vÆue_hdr
.
cdp_ty≥
 = 
	`ht⁄s
(
ty≥
);

130 
cdp_vÆue_hdr
.
cdp_Àn
 = 
	`ht⁄s
(
Àn
 + 
LIBNET_CDP_VALUE_H
);

132 
ty≥
)

134 
LIBNET_CDP_DEVID
:

136 
LIBNET_CDP_ADDRESS
:

138 
LIBNET_CDP_PORTID
:

140 
LIBNET_CDP_CAPABIL
:

142 
LIBNET_CDP_VERSION
:

144 
LIBNET_CDP_PLATFORM
:

146 
LIBNET_CDP_IPPREFIX
:

152 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
cdp_vÆue_hdr
,

153 
LIBNET_CDP_VALUE_H
) == -1)

158 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
vÆue
, 
Àn
) == -1)

165 
	}
}

	@/workspaces/libnet/src/libnet_build_data.c

33 
	~"comm⁄.h
"

36 
lib√t_±ag_t


37 
	$lib√t_buûd_d©a
(c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
,

38 
lib√t_±ag_t
 
±ag
)

40 
uöt32_t
 
n
, 
h
;

41 
lib√t_pblock_t
 *
p
;

43 i‡(
l
 =
NULL
)

48 
n
 = 
∑ylﬂd_s
;

49 
h
 = 0;

55 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_DATA_H
);

56 i‡(
p
 =
NULL
)

62 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

64  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_DATA_H
));

65 
bad
:

66 
	`lib√t_pblock_dñëe
(
l
, 
p
);

68 
	}
}

	@/workspaces/libnet/src/libnet_build_dhcp.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_dh˝v4
(
uöt8_t
 
›code
, uöt8_à
hty≥
, uöt8_à
hÀn
,

37 
uöt8_t
 
h›cou¡
, 
uöt32_t
 
xid
, 
uöt16_t
 
£cs
, uöt16_à
Êags
,

38 
uöt32_t
 
cù
, uöt32_à
yù
, uöt32_à
sù
, uöt32_à
gù
, c⁄° 
uöt8_t
 *
chaddr
,

39 c⁄° *
¢ame
, c⁄° *
fûe
, c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

40 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

42 
uöt32_t
 
n
, 
h
;

43 
lib√t_pblock_t
 *
p
;

44 
lib√t_dh˝v4_hdr
 
dh˝_hdr
;

46 i‡(
l
 =
NULL
)

51 
n
 = 
LIBNET_DHCPV4_H
 + 
∑ylﬂd_s
;

52 
h
 = 0;

58 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_DHCPV4_H
);

59 i‡(
p
 =
NULL
)

64 
	`mem£t
(&
dh˝_hdr
, 0, (dhcp_hdr));

65 
dh˝_hdr
.
dh˝_›code
 = 
›code
;

66 
dh˝_hdr
.
dh˝_hty≥
 = 
hty≥
;

67 
dh˝_hdr
.
dh˝_hÀn
 = 
hÀn
;

68 
dh˝_hdr
.
dh˝_h›cou¡
 = 
h›cou¡
;

69 
dh˝_hdr
.
dh˝_xid
 = 
	`ht⁄l
(
xid
);

70 
dh˝_hdr
.
dh˝_£cs
 = 
	`ht⁄s
(
£cs
);

71 
dh˝_hdr
.
dh˝_Êags
 = 
	`ht⁄s
(
Êags
);

72 
dh˝_hdr
.
dh˝_cù
 = 
	`ht⁄l
(
cù
);

73 
dh˝_hdr
.
dh˝_yù
 = 
	`ht⁄l
(
yù
);

74 
dh˝_hdr
.
dh˝_sù
 = 
	`ht⁄l
(
sù
);

75 
dh˝_hdr
.
dh˝_gù
 = 
	`ht⁄l
(
gù
);

77 i‡(
chaddr
)

79 
size_t
 
n
 =  (
dh˝_hdr
.
dh˝_chaddr
);

80 i‡(
hÀn
 < 
n
)

81 
n
 = 
hÀn
;

82 
	`mem˝y
(
dh˝_hdr
.
dh˝_chaddr
, 
chaddr
, 
n
);

84 i‡(
¢ame
)

86 
	`°∫˝y
(
dh˝_hdr
.
dh˝_¢ame
, 
¢ame
,  (dhcp_hdr.dhcp_sname) - 1);

88 i‡(
fûe
)

90 
	`°∫˝y
(
dh˝_hdr
.
dh˝_fûe
, 
fûe
,  (dhcp_hdr.dhcp_file) - 1);

92 
dh˝_hdr
.
dh˝_magic
 = 
	`ht⁄l
(
DHCP_MAGIC
);

94 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
dh˝_hdr
, 
LIBNET_DHCPV4_H
) == -1)

96 
bad
;

99 i‡(
∑ylﬂd_s
 && !
∑ylﬂd
)

101 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

102 "%s():Öaylﬂd inc⁄si°ícy", 
__func__
);

103 
bad
;

106 i‡(
∑ylﬂd_s
)

108 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
∑ylﬂd
, 
∑ylﬂd_s
) == -1)

110 
bad
;

114  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

115 
LIBNET_PBLOCK_DHCPV4_H
));

116 
bad
:

117 
	`lib√t_pblock_dñëe
(
l
, 
p
);

119 
	}
}

121 
lib√t_±ag_t


122 
	$lib√t_buûd_boŸpv4
(
uöt8_t
 
›code
, uöt8_à
hty≥
, uöt8_à
hÀn
,

123 
uöt8_t
 
h›cou¡
, 
uöt32_t
 
xid
, 
uöt16_t
 
£cs
, uöt16_à
Êags
,

124 
uöt32_t
 
cù
, uöt32_à
yù
, uöt32_à
sù
, uöt32_à
gù
, c⁄° 
uöt8_t
 *
chaddr
,

125 c⁄° *
¢ame
, c⁄° *
fûe
, c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

126 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

128  (
	`lib√t_buûd_dh˝v4
(
›code
, 
hty≥
, 
hÀn
, 
h›cou¡
, 
xid
, 
£cs
,

129 
Êags
, 
cù
, 
yù
, 
sù
, 
gù
, 
chaddr
, 
¢ame
, 
fûe
, 
∑ylﬂd
, 
∑ylﬂd_s
,

130 
l
, 
±ag
));

131 
	}
}

	@/workspaces/libnet/src/libnet_build_dns.c

33 
	~"comm⁄.h
"

36 
lib√t_±ag_t


37 
	$lib√t_buûd_dnsv4
(
uöt16_t
 
h_Àn
, uöt16_à
id
, uöt16_à
Êags
,

38 
uöt16_t
 
num_q
, uöt16_à
num_™ws_º
, uöt16_à
num_auth_º
,

39 
uöt16_t
 
num_addi_º
, c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

40 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

43 
uöt32_t
 
n
, 
h
;

44 
uöt32_t
 
off£t
;

45 
lib√t_pblock_t
 *
p
;

46 
lib√t_dnsv4_hdr
 
dns_hdr
;

48 i‡(
l
 =
NULL
)

53 i‡(
h_Àn
 !
LIBNET_UDP_DNSV4_H
 && h_À¿!
LIBNET_TCP_DNSV4_H
)

55 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

56 "%s(): invÆid hódîÜígth: %d", 
__func__
, 
h_Àn
);

59 
off£t
 = (
h_Àn
 =
LIBNET_UDP_DNSV4_H
 ? (
dns_hdr
.h_len) : 0);

60 
n
 = 
h_Àn
 + 
∑ylﬂd_s
;

61 
h
 = 0;

67 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_DNSV4_H
);

68 i‡(
p
 =
NULL
)

79 
	`mem£t
(&
dns_hdr
, 0, (dns_hdr));

80 
dns_hdr
.
h_Àn
 = 
	`ht⁄s
((
uöt16_t
)(
n
 -  (dns_hdr.h_len)));

81 
dns_hdr
.
id
 = 
	`ht⁄s
(id);

82 
dns_hdr
.
Êags
 = 
	`ht⁄s
(flags);

83 
dns_hdr
.
num_q
 = 
	`ht⁄s
(num_q);

84 
dns_hdr
.
num_™sw_º
 = 
	`ht⁄s
(
num_™ws_º
);

85 
dns_hdr
.
num_auth_º
 = 
	`ht⁄s
(num_auth_rr);

86 
dns_hdr
.
num_addi_º
 = 
	`ht⁄s
(num_addi_rr);

94 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, ((
uöt8_t
 *)&
dns_hdr
Ë+ 
off£t
, 
h_Àn
) == -1)

96 
bad
;

100 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

102  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_DNSV4_H
));

103 
bad
:

104 
	`lib√t_pblock_dñëe
(
l
, 
p
);

106 
	}
}

	@/workspaces/libnet/src/libnet_build_ethernet.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_ëhî√t
(c⁄° 
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, 
uöt16_t
 
ty≥
,

37 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

39 
uöt32_t
 
n
, 
h
;

40 
lib√t_pblock_t
 *
p
;

41 
lib√t_ëhî√t_hdr
 
ëh_hdr
;

43 i‡(
l
 =
NULL
)

49 i‡(
l
->
öje˘i⁄_ty≥
 !
LIBNET_LINK
 &&

50 !(((
l
->
öje˘i⁄_ty≥
Ë& 
LIBNET_ADV_MASK
)))

52 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

54 
__func__
);

55 
p
 = 
NULL
;

56 
bad
;

59 
n
 = 
LIBNET_ETH_H
 + 
∑ylﬂd_s
;

60 
h
 = 0;

66 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_ETH_H
);

67 i‡(
p
 =
NULL
)

72 
	`mem£t
(&
ëh_hdr
, 0, (eth_hdr));

73 
	`mem˝y
(
ëh_hdr
.
ëhî_dho°
, 
d°
, 
ETHER_ADDR_LEN
);

74 
	`mem˝y
(
ëh_hdr
.
ëhî_sho°
, 
§c
, 
ETHER_ADDR_LEN
);

75 
ëh_hdr
.
ëhî_ty≥
 = 
	`ht⁄s
(
ty≥
);

77 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
ëh_hdr
, 
LIBNET_ETH_H
) == -1)

79 
bad
;

83 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

85  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_ETH_H
));

86 
bad
:

87 
	`lib√t_pblock_dñëe
(
l
, 
p
);

89 
	}
}

92 
lib√t_±ag_t


93 
	$lib√t_autobuûd_ëhî√t
(c⁄° 
uöt8_t
 *
d°
, 
uöt16_t
 
ty≥
, 
lib√t_t
 *
l
)

95 
uöt32_t
 
n
, 
h
;

96 
lib√t_ëhî_addr
 *
§c
;

97 
lib√t_pblock_t
 *
p
;

98 
lib√t_±ag_t
 
±ag
;

99 
lib√t_ëhî√t_hdr
 
ëh_hdr
;

101 i‡(
l
 =
NULL
)

107 i‡(
l
->
öje˘i⁄_ty≥
 !
LIBNET_LINK
 &&

108 !(((
l
->
öje˘i⁄_ty≥
Ë& 
LIBNET_ADV_MASK
)))

110 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

113 
p
 = 
NULL
;

114 
bad
;

117 
n
 = 
LIBNET_ETH_H
;

118 
h
 = 0;

119 
±ag
 = 
LIBNET_PTAG_INITIALIZER
;

120 
§c
 = 
	`lib√t_gë_hwaddr
(
l
);

121 i‡(
§c
 =
NULL
)

130 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_ETH_H
);

131 i‡(
p
 =
NULL
)

136 
	`mem£t
(&
ëh_hdr
, 0, (eth_hdr));

137 
	`mem˝y
(
ëh_hdr
.
ëhî_dho°
, 
d°
, 
ETHER_ADDR_LEN
);

138 
	`mem˝y
(
ëh_hdr
.
ëhî_sho°
, 
§c
, 
ETHER_ADDR_LEN
);

139 
ëh_hdr
.
ëhî_ty≥
 = 
	`ht⁄s
(
ty≥
);

141 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
ëh_hdr
, 
LIBNET_ETH_H
) == -1)

143 
bad
;

146  (
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_ETH_H
));

147 
bad
:

148 
	`lib√t_pblock_dñëe
(
l
, 
p
);

150 
	}
}

	@/workspaces/libnet/src/libnet_build_fddi.c

32 
	~"comm⁄.h
"

34 
lib√t_±ag_t


35 
	$lib√t_buûd_fddi
(
uöt8_t
 
fc
, c⁄° uöt8_à*
d°
, c⁄° uöt8_à*
§c
, uöt8_à
dßp
,

36 
uöt8_t
 
sßp
, uöt8_à
cf
, c⁄° uöt8_à*
‹g
, 
uöt16_t
 
ty≥
, c⁄° uöt8_à*
∑ylﬂd
,

37 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

39 
uöt32_t
 
n
, 
h
;

40 
uöt16_t
 
¥Ÿocﬁ_ty≥
;

41 
lib√t_pblock_t
 *
p
;

42 
lib√t_fddi_hdr
 
fddi_hdr
;

44 i‡(
l
 =
NULL
)

50 i‡(
l
->
öje˘i⁄_ty≥
 !
LIBNET_LINK
 &&

51 !(((
l
->
öje˘i⁄_ty≥
Ë& 
LIBNET_ADV_MASK
)))

53 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

55 
__func__
);

56 
p
 = 
NULL
;

57 
bad
;

60 
n
 = 
LIBNET_FDDI_H
 + 
∑ylﬂd_s
;

61 
h
 = 0;

67 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_FDDI_H
);

68 i‡(
p
 =
NULL
)

73 
	`mem£t
(&
fddi_hdr
, 0, (fddi_hdr));

74 
fddi_hdr
.
fddi_‰ame_c⁄åﬁ
 = 
fc
;

75 
	`mem˝y
(
fddi_hdr
.
fddi_dho°
, 
d°
, 
FDDI_ADDR_LEN
);

76 
	`mem˝y
(
fddi_hdr
.
fddi_sho°
, 
§c
, 
FDDI_ADDR_LEN
);

77 
fddi_hdr
.
fddi_Œc_dßp
 = 
dßp
;

78 
fddi_hdr
.
fddi_Œc_sßp
 = 
sßp
;

79 
fddi_hdr
.
fddi_Œc_c⁄åﬁ_fõld
 = 
cf
;

80 
	`mem˝y
(&
fddi_hdr
.
fddi_Œc_‹g_code
, 
‹g
, 
LIBNET_ORG_CODE_SIZE
);

83 
¥Ÿocﬁ_ty≥
 = 
	`ht⁄s
(
ty≥
);

84 
	`mem˝y
(&
fddi_hdr
.
fddi_ty≥
, &
¥Ÿocﬁ_ty≥
, (
öt16_t
));

86 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
fddi_hdr
, 
LIBNET_FDDI_H
) == -1)

88 
bad
;

92 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

94  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_FDDI_H
));

95 
bad
:

96 
	`lib√t_pblock_dñëe
(
l
, 
p
);

98 
	}
}

101 
lib√t_±ag_t


102 
	$lib√t_autobuûd_fddi
(
uöt8_t
 
fc
, c⁄° uöt8_à*
d°
, uöt8_à
dßp
, uöt8_à
sßp
,

103 
uöt8_t
 
cf
, c⁄° uöt8_à*
‹g
, 
uöt16_t
 
ty≥
, 
lib√t_t
 *
l
)

105 
uöt32_t
 
n
, 
h
;

106 
uöt16_t
 
¥Ÿocﬁ_ty≥
;

107 
lib√t_fddi_addr
 *
§c
;

108 
lib√t_pblock_t
 *
p
;

109 
lib√t_±ag_t
 
±ag
;

110 
lib√t_fddi_hdr
 
fddi_hdr
;

112 i‡(
l
 =
NULL
)

118 i‡(
l
->
öje˘i⁄_ty≥
 !
LIBNET_LINK
 &&

119 !(((
l
->
öje˘i⁄_ty≥
Ë& 
LIBNET_ADV_MASK
)))

121 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

123 
__func__
);

124 
p
 = 
NULL
;

125 
bad
;

128 
n
 = 
LIBNET_FDDI_H
;

129 
h
 = 0;

130 
±ag
 = 
LIBNET_PTAG_INITIALIZER
;

133 
§c
 = (
lib√t_fddi_addr
 *Ë
	`lib√t_gë_hwaddr
(
l
);

134 i‡(
§c
 =
NULL
)

140 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_FDDI_H
);

141 i‡(
p
 =
NULL
)

146 
	`mem£t
(&
fddi_hdr
, 0, (fddi_hdr));

147 
fddi_hdr
.
fddi_‰ame_c⁄åﬁ
 = 
fc
;

148 
	`mem˝y
(
fddi_hdr
.
fddi_dho°
, 
d°
, 
FDDI_ADDR_LEN
);

149 
	`mem˝y
(
fddi_hdr
.
fddi_sho°
, 
§c
, 
FDDI_ADDR_LEN
);

150 
fddi_hdr
.
fddi_Œc_dßp
 = 
dßp
;

151 
fddi_hdr
.
fddi_Œc_sßp
 = 
sßp
;

152 
fddi_hdr
.
fddi_Œc_c⁄åﬁ_fõld
 = 
cf
;

153 
	`mem˝y
(&
fddi_hdr
.
fddi_Œc_‹g_code
, 
‹g
, 
LIBNET_ORG_CODE_SIZE
);

156 
¥Ÿocﬁ_ty≥
 = 
	`ht⁄s
(
ty≥
);

157 
	`mem˝y
(&
fddi_hdr
.
fddi_ty≥
, &
¥Ÿocﬁ_ty≥
, (
öt16_t
));

159 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
fddi_hdr
, 
LIBNET_FDDI_H
) == -1)

161 
bad
;

164  (
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_FDDI_H
));

165 
bad
:

166 
	`lib√t_pblock_dñëe
(
l
, 
p
);

168 
	}
}

	@/workspaces/libnet/src/libnet_build_gre.c

31 
	~"comm⁄.h
"

105 
	$__lib√t_¥öt_gª_Êags_vî
(
uöt16_t
 
fv
)

107 
	`¥ötf
("version = %d (%d) -> ",

108 
fv
 & 
GRE_VERSION_MASK
, 
	`lib√t_gëgª_Àngth
(fv));

109 i‡(
fv
 & 
GRE_CSUM
)

111 
	`¥ötf
("CSUM ");

113 i‡(
fv
 & 
GRE_ROUTING
)

115 
	`¥ötf
("ROUTING ");

117 i‡(
fv
 & 
GRE_KEY
)

119 
	`¥ötf
("KEY ");

121 i‡(
fv
 & 
GRE_SEQ
)

123 
	`¥ötf
("SEQ ");

125 i‡(
fv
 & 
GRE_ACK
)

127 
	`¥ötf
("ACK ");

129 
	`¥ötf
("\n");

130 
	}
}

134 
uöt32_t


135 
	$lib√t_gëgª_Àngth
(
uöt16_t
 
fv
)

138 
uöt32_t
 
n
 = 
LIBNET_GRE_H
;

145 i‡((!(
fv
 & 
GRE_VERSION_MASK
Ë&& (fv & (
GRE_CSUM
|
GRE_ROUTING
))) ||

146 (
fv
 & 
GRE_VERSION_MASK
) )

148 
n
 +–((
lib√t_gª_hdr
 *)0)->
gª_sum
) +

149 –((
lib√t_gª_hdr
 *)0)->
gª_off£t
);

152 i‡((!(
fv
 & 
GRE_VERSION_MASK
Ë&& (fv & 
GRE_KEY
)) ||

153 –(
fv
 & 
GRE_VERSION_MASK
Ë&& (fv & 
GRE_SEQ
)) )

155 
n
 +–((
lib√t_gª_hdr
 *)0)->
gª_key
);

158 i‡((!(
fv
 & 
GRE_VERSION_MASK
Ë&& (fv & 
GRE_SEQ
)) ||

159 –(
fv
 & 
GRE_VERSION_MASK
Ë&& (fv & 
GRE_ACK
)) )

161 
n
 +–((
lib√t_gª_hdr
 *)0)->
gª_£q
 );

164  (
n
);

165 
	}
}

167 
lib√t_±ag_t


168 
	$lib√t_buûd_gª
(
uöt16_t
 
fv
, uöt16_à
ty≥
, uöt16_à
sum
,

169 
uöt16_t
 
off£t
, 
uöt32_t
 
key
, uöt32_à
£q
, uöt16_à
Àn
,

170 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

172 
uöt32_t
 
n
;

173 
lib√t_pblock_t
 *
p
;

174 
lib√t_gª_hdr
 
gª_hdr
;

176 i‡(
l
 =
NULL
)

181 
n
 = 
	`lib√t_gëgª_Àngth
(
fv
Ë+ 
∑ylﬂd_s
;

187 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_GRE_H
);

188 i‡(
p
 =
NULL
)

193 
gª_hdr
.
Êags_vî
 = 
	`ht⁄s
(
fv
);

194 
gª_hdr
.
ty≥
 = 
	`ht⁄s
(type);

195 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
gª_hdr
, 
LIBNET_GRE_H
) == -1)

198 
bad
;

201 i‡((!(
fv
 & 
GRE_VERSION_MASK
Ë&& (fv & (
GRE_CSUM
|
GRE_ROUTING
))) ||

202 (
fv
 & 
GRE_VERSION_MASK
))

204 
sum
 = 
	`ht⁄s
(sum);

205 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
*)&
sum
,

206 (
gª_hdr
.
gª_sum
)) == -1)

209 
bad
;

211 
off£t
 = 
	`ht⁄s
(offset);

212 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
*)&
off£t
,

213 (
gª_hdr
.
gª_off£t
)) == -1)

216 
bad
;

220 i‡((!(
fv
 & 
GRE_VERSION_MASK
Ë&& (fv & 
GRE_KEY
)) ||

221 –(
fv
 & 
GRE_VERSION_MASK
Ë&& (fv & 
GRE_SEQ
)) )

223 
key
 = 
	`ht⁄l
(key);

224 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
*)&
key
,

225 (
gª_hdr
.
gª_key
)) == -1)

228 
bad
;

232 i‡((!(
fv
 & 
GRE_VERSION_MASK
Ë&& (fv & 
GRE_SEQ
)) ||

233 –(
fv
 & 
GRE_VERSION_MASK
Ë&& (fv & 
GRE_ACK
)) )

235 
£q
 = 
	`ht⁄l
(seq);

236 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
*)&
£q
,

237 (
gª_hdr
.
gª_£q
)) == -1)

240 
bad
;

245 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

247 i‡–(
fv
 & 
GRE_CSUM
Ë&& (!
sum
) )

249 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

252  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
Àn
, 
LIBNET_PBLOCK_GRE_H
));

254 
bad
:

255 
	`lib√t_pblock_dñëe
(
l
, 
p
);

257 
	}
}

259 
lib√t_±ag_t


260 
	$lib√t_buûd_egª
(
uöt16_t
 
fv
, uöt16_à
ty≥
, uöt16_à
sum
,

261 
uöt16_t
 
off£t
, 
uöt32_t
 
key
, uöt32_à
£q
, uöt16_à
Àn
,

262 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

264  (
	`lib√t_buûd_gª
(
fv
, 
ty≥
, 
sum
, 
off£t
, 
key
, 
£q
, 
Àn
,

265 
∑ylﬂd
, 
∑ylﬂd_s
, 
l
, 
±ag
));

266 
	}
}

286 
lib√t_±ag_t


287 
	$lib√t_buûd_gª_§e
(
uöt16_t
 
af
, 
uöt8_t
 
off£t
, uöt8_à
Àngth
,

288 
uöt8_t
 *
routög
, c⁄° uöt8_à*
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
,

289 
lib√t_±ag_t
 
±ag
)

291 
uöt32_t
 
n
;

292 
lib√t_pblock_t
 *
p
;

293 
lib√t_gª_§e_hdr
 
§e_hdr
;

295 i‡(
l
 =
NULL
)

300 
n
 = 
LIBNET_GRE_SRE_H
 + 
Àngth
 + 
∑ylﬂd_s
;

306 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_GRE_SRE_H
);

307 i‡(
p
 =
NULL
)

311 
§e_hdr
.
af
 = 
	`ht⁄s
(af);

312 
§e_hdr
.
§e_off£t
 = 
off£t
;

313 
§e_hdr
.
§e_Àngth
 = 
Àngth
;

314 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
§e_hdr
, 
LIBNET_GRE_SRE_H
) == -1)

317 
bad
;

320 i‡((
routög
 && !
Àngth
) || (!routing &&Üength))

322 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

323 "%s():Ñoutög inc⁄si°ícy", 
__func__
);

324 
bad
;

327 i‡(
routög
 && 
Àngth
)

329 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
routög
, 
Àngth
) == -1)

332 
bad
;

337 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

339  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 0,

340 
LIBNET_PBLOCK_GRE_SRE_H
));

342 
bad
:

343 
	`lib√t_pblock_dñëe
(
l
, 
p
);

346 
	}
}

348 
lib√t_±ag_t


349 
	$lib√t_buûd_gª_œ°_§e
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

351 
uöt32_t
 
n
, 
zîo
 = 0;

352 
lib√t_pblock_t
 *
p
;

354 i‡(
l
 =
NULL
)

359 
n
 = 
LIBNET_GRE_SRE_H
;

365 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_GRE_H
);

366 i‡(
p
 =
NULL
)

371 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
zîo
, 
LIBNET_GRE_SRE_H
) == -1)

374 
bad
;

377  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 0,

378 
LIBNET_PBLOCK_GRE_SRE_H
));

380 
bad
:

381 
	`lib√t_pblock_dñëe
(
l
, 
p
);

384 
	}
}

	@/workspaces/libnet/src/libnet_build_hsrp.c

32 
	~"comm⁄.h
"

34 
lib√t_±ag_t


35 
	$lib√t_buûd_h§p
(
uöt8_t
 
vîsi⁄
, uöt8_à
›code
, uöt8_à
°©e
,

36 
uöt8_t
 
hñlo_time
, uöt8_à
hﬁd_time
, uöt8_à
¥i‹ôy
, uöt8_à
group
,

37 
uöt8_t
 
ª£rved
, uöt8_à
authd©a
[
HSRP_AUTHDATA_LENGTH
], 
uöt32_t
 
vútuÆ_ù
,

38 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

40 
lib√t_pblock_t
 *
p
;

41 
lib√t_h§p_hdr
 
h§p_hdr
;

43 i‡(
l
 =
NULL
)

52 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
LIBNET_HSRP_H
 + 
∑ylﬂd_s
, 
LIBNET_PBLOCK_HSRP_H
);

53 i‡(
p
 =
NULL
)

58 
	`mem£t
(&
h§p_hdr
, 0, (hsrp_hdr));

59 
h§p_hdr
.
vîsi⁄
 = version;

60 
h§p_hdr
.
›code
 = opcode;

61 
h§p_hdr
.
°©e
 = state;

62 
h§p_hdr
.
hñlo_time
 = hello_time;

63 
h§p_hdr
.
hﬁd_time
 = hold_time;

64 
h§p_hdr
.
¥i‹ôy
 =Öriority;

65 
h§p_hdr
.
group
 = group;

66 
h§p_hdr
.
ª£rved
 =Ñeserved;

67 
	`mem˝y
(
h§p_hdr
.
authd©a
,áuthd©a, 
HSRP_AUTHDATA_LENGTH
*(
uöt8_t
));

68 
h§p_hdr
.
vútuÆ_ù
 = virtual_ip;

70 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
h§p_hdr
, 
LIBNET_HSRP_H
) == -1)

72 
bad
;

75 i‡(
∑ylﬂd_s
 && !
∑ylﬂd
)

77 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

78 "%s():Öaylﬂd inc⁄si°ícy", 
__func__
);

79 
bad
;

82 i‡(
∑ylﬂd_s
)

84 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
∑ylﬂd
, 
∑ylﬂd_s
) == -1)

86 
bad
;

90  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 0, 
LIBNET_PBLOCK_HSRP_H
));

91 
bad
:

92 
	`lib√t_pblock_dñëe
(
l
, 
p
);

94 
	}
}

	@/workspaces/libnet/src/libnet_build_icmp.c

33 
	~"comm⁄.h
"

35 
	~<as£π.h
>

38 
	#LIBNET_BUILD_ICMP_ERR_FINISH
(
Àn
) \

41 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
icmp_hdr
, 
Àn
) == -1) \

43 
bad
; \

46 i‡(
∑ylﬂd_s
 && !
∑ylﬂd
) \

48 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, \

49 "%s():Öaylﬂd inc⁄si°ícy", 
__func__
); \

50 
bad
; \

53 i‡(
∑ylﬂd_s
) \

55 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
∑ylﬂd
, 
∑ylﬂd_s
) == -1) \

57 
bad
; \

61 i‡(
sum
 == 0) \

63 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
); \

65 } 0)

	)

67 
lib√t_±ag_t


68 
	$lib√t_buûd_icmpv4_echo
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

69 
uöt16_t
 
id
, uöt16_à
£q
, c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

70 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

72 
uöt32_t
 
n
, 
h
;

73 
lib√t_pblock_t
 *
p
;

74 
lib√t_icmpv4_hdr
 
icmp_hdr
;

76 i‡(
l
 =
NULL
)

81 
n
 = 
LIBNET_ICMPV4_ECHO_H
 + 
∑ylﬂd_s
;

82 
h
 = 
LIBNET_ICMPV4_ECHO_H
 + 
∑ylﬂd_s
;

88 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_ICMPV4_ECHO_H
);

89 i‡(
p
 =
NULL
)

94 
	`mem£t
(&
icmp_hdr
, 0, (icmp_hdr));

95 
icmp_hdr
.
icmp_ty≥
 = 
ty≥
;

96 
icmp_hdr
.
icmp_code
 = 
code
;

97 
icmp_hdr
.
icmp_sum
 = (
sum
 ? 
	`ht⁄s
(sum) : 0);

98 
icmp_hdr
.
icmp_id
 = 
	`ht⁄s
(
id
);

99 
icmp_hdr
.
icmp_£q
 = 
	`ht⁄s
(
£q
);

101 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
icmp_hdr
, 
LIBNET_ICMPV4_ECHO_H
) == -1)

103 
bad
;

107 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

109 i‡(
sum
 == 0)

116 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

118  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

119 
LIBNET_PBLOCK_ICMPV4_ECHO_H
));

120 
bad
:

121 
	`lib√t_pblock_dñëe
(
l
, 
p
);

123 
	}
}

125 
lib√t_±ag_t


126 
	$lib√t_buûd_icmpv4_mask
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

127 
uöt16_t
 
id
, uöt16_à
£q
, 
uöt32_t
 
mask
, c⁄° 
uöt8_t
 *
∑ylﬂd
,

128 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

130 
uöt32_t
 
n
, 
h
;

131 
lib√t_pblock_t
 *
p
;

132 
lib√t_icmpv4_hdr
 
icmp_hdr
;

134 i‡(
l
 =
NULL
)

139 
n
 = 
LIBNET_ICMPV4_MASK_H
 + 
∑ylﬂd_s
;

140 
h
 = 
LIBNET_ICMPV4_MASK_H
 + 
∑ylﬂd_s
;

146 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_ICMPV4_MASK_H
);

147 i‡(
p
 =
NULL
)

152 
	`mem£t
(&
icmp_hdr
, 0, (icmp_hdr));

153 
icmp_hdr
.
icmp_ty≥
 = 
ty≥
;

154 
icmp_hdr
.
icmp_code
 = 
code
;

155 
icmp_hdr
.
icmp_sum
 = (
sum
 ? 
	`ht⁄s
(sum) : 0);

156 
icmp_hdr
.
icmp_id
 = 
	`ht⁄s
(
id
);

157 
icmp_hdr
.
icmp_£q
 = 
	`ht⁄s
(
£q
);

158 
icmp_hdr
.
icmp_mask
 = 
	`ht⁄l
(
mask
);

160 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
icmp_hdr
,

161 
LIBNET_ICMPV4_MASK_H
) == -1)

163 
bad
;

167 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

169 i‡(
sum
 == 0)

176 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

178  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

179 
LIBNET_PBLOCK_ICMPV4_MASK_H
));

180 
bad
:

181 
	`lib√t_pblock_dñëe
(
l
, 
p
);

183 
	}
}

185 
lib√t_±ag_t


186 
	$lib√t_buûd_icmpv4_time°amp
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

187 
uöt16_t
 
id
, uöt16_à
£q
, 
uöt32_t
 
Ÿime
, uöt32_à
πime
, uöt32_à
âime
,

188 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

190 
uöt32_t
 
n
, 
h
;

191 
lib√t_pblock_t
 *
p
;

192 
lib√t_icmpv4_hdr
 
icmp_hdr
;

194 i‡(
l
 =
NULL
)

199 
n
 = 
LIBNET_ICMPV4_TS_H
 + 
∑ylﬂd_s
;

200 
h
 = 
LIBNET_ICMPV4_TS_H
 + 
∑ylﬂd_s
;

206 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_ICMPV4_TS_H
);

207 i‡(
p
 =
NULL
)

212 
	`mem£t
(&
icmp_hdr
, 0, (icmp_hdr));

213 
icmp_hdr
.
icmp_ty≥
 = 
ty≥
;

214 
icmp_hdr
.
icmp_code
 = 
code
;

215 
icmp_hdr
.
icmp_sum
 = (
sum
 ? 
	`ht⁄s
(sum) : 0);

216 
icmp_hdr
.
icmp_id
 = 
	`ht⁄s
(
id
);

217 
icmp_hdr
.
icmp_£q
 = 
	`ht⁄s
(
£q
);

218 
icmp_hdr
.
icmp_Ÿime
 = 
	`ht⁄l
(
Ÿime
);

219 
icmp_hdr
.
icmp_πime
 = 
	`ht⁄l
(
πime
);

220 
icmp_hdr
.
icmp_âime
 = 
	`ht⁄l
(
âime
);

222 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
icmp_hdr
,

223 
LIBNET_ICMPV4_TS_H
) == -1)

225 
bad
;

229 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

231 i‡(
sum
 == 0)

238 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

240  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

241 
LIBNET_PBLOCK_ICMPV4_TS_H
));

242 
bad
:

243 
	`lib√t_pblock_dñëe
(
l
, 
p
);

245 
	}
}

247 
lib√t_±ag_t


248 
	$lib√t_buûd_icmpv4_uƒóch
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

249 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

251 
uöt32_t
 
n
, 
h
;

252 
lib√t_pblock_t
 *
p
;

253 
lib√t_icmpv4_hdr
 
icmp_hdr
;

255 i‡(
l
 =
NULL
)

259 
n
 = 
LIBNET_ICMPV4_UNREACH_H
 + 
∑ylﬂd_s
;

266 
h
 = 
LIBNET_ICMPV4_UNREACH_H
 + 
∑ylﬂd_s
 + 
l
->
tŸÆ_size
;

272 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_ICMPV4_UNREACH_H
);

273 i‡(
p
 =
NULL
)

278 
	`mem£t
(&
icmp_hdr
, 0, (icmp_hdr));

279 
icmp_hdr
.
icmp_ty≥
 = 
ty≥
;

280 
icmp_hdr
.
icmp_code
 = 
code
;

281 
icmp_hdr
.
icmp_sum
 = (
sum
 ? 
	`ht⁄s
(sum) : 0);

282 
icmp_hdr
.
icmp_id
 = 0;

283 
icmp_hdr
.
icmp_£q
 = 0;

285 
	`LIBNET_BUILD_ICMP_ERR_FINISH
(
LIBNET_ICMPV4_UNREACH_H
);

287  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

288 
LIBNET_PBLOCK_ICMPV4_UNREACH_H
));

289 
bad
:

290 
	`lib√t_pblock_dñëe
(
l
, 
p
);

292 
	}
}

294 
lib√t_±ag_t


295 
	$lib√t_buûd_icmpv4_timìx˚ed
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

296 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

298 
uöt32_t
 
n
, 
h
;

299 
lib√t_pblock_t
 *
p
;

300 
lib√t_icmpv4_hdr
 
icmp_hdr
;

302 i‡(
l
 =
NULL
)

308 
n
 = 
LIBNET_ICMPV4_TIMXCEED_H
 + 
∑ylﬂd_s
;

314 
h
 = 
LIBNET_ICMPV4_TIMXCEED_H
 + 
∑ylﬂd_s
 + 
l
->
tŸÆ_size
;

320 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_ICMPV4_TIMXCEED_H
);

321 i‡(
p
 =
NULL
)

326 
	`mem£t
(&
icmp_hdr
, 0, (icmp_hdr));

327 
icmp_hdr
.
icmp_ty≥
 = 
ty≥
;

328 
icmp_hdr
.
icmp_code
 = 
code
;

329 
icmp_hdr
.
icmp_sum
 = (
sum
 ? 
	`ht⁄s
(sum) : 0);

330 
icmp_hdr
.
icmp_id
 = 0;

331 
icmp_hdr
.
icmp_£q
 = 0;

333 
	`LIBNET_BUILD_ICMP_ERR_FINISH
(
LIBNET_ICMPV4_TIMXCEED_H
);

335  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

336 
LIBNET_PBLOCK_ICMPV4_TIMXCEED_H
));

337 
bad
:

338 
	`lib√t_pblock_dñëe
(
l
, 
p
);

340 
	}
}

342 
lib√t_±ag_t


343 
	$lib√t_buûd_icmpv4_ªdúe˘
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

344 
uöt32_t
 
g©eway
, c⁄° 
uöt8_t
 *
∑ylﬂd
, uöt32_à
∑ylﬂd_s
, 
lib√t_t
 *
l
,

345 
lib√t_±ag_t
 
±ag
)

348 
uöt32_t
 
n
, 
h
;

349 
lib√t_pblock_t
 *
p
;

350 
lib√t_icmpv4_hdr
 
icmp_hdr
;

352 i‡(
l
 =
NULL
)

357 
n
 = 
LIBNET_ICMPV4_REDIRECT_H
 + 
∑ylﬂd_s
;

363 
h
 = 
LIBNET_ICMPV4_REDIRECT_H
 + 
∑ylﬂd_s
 + 
l
->
tŸÆ_size
;

369 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_ICMPV4_REDIRECT_H
);

370 i‡(
p
 =
NULL
)

375 
	`mem£t
(&
icmp_hdr
, 0, (icmp_hdr));

376 
icmp_hdr
.
icmp_ty≥
 = 
ty≥
;

377 
icmp_hdr
.
icmp_code
 = 
code
;

378 
icmp_hdr
.
icmp_sum
 = (
sum
 ? 
	`ht⁄s
(sum) : 0);

379 
icmp_hdr
.
hun
.
g©eway
 = gateway;

381 
	`LIBNET_BUILD_ICMP_ERR_FINISH
(
LIBNET_ICMPV4_REDIRECT_H
);

383  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

384 
LIBNET_PBLOCK_ICMPV4_REDIRECT_H
));

385 
bad
:

386 
	`lib√t_pblock_dñëe
(
l
, 
p
);

388 
	}
}

391 
lib√t_±ag_t


392 
	$lib√t_buûd_icmpv6_comm⁄
(

393 
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

394 c⁄° * 
•ecific
, 
uöt32_t
 
•ecific_s
, 
uöt8_t
 
pblock_ty≥
,

395 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

396 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag


399 
uöt32_t
 
n
;

400 
lib√t_pblock_t
 *
p
;

401 
lib√t_icmpv6_hdr
 
icmp_hdr
;

403 i‡(
l
 =
NULL
)

408 
n
 = 
LIBNET_ICMPV6_COMMON_H
 + 
•ecific_s
 + 
∑ylﬂd_s
;

410 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
pblock_ty≥
);

412 i‡(
p
 =
NULL
)

417 
	`mem£t
(&
icmp_hdr
, 0, (icmp_hdr));

418 
icmp_hdr
.
icmp_ty≥
 = 
ty≥
;

419 
icmp_hdr
.
icmp_code
 = 
code
;

420 
icmp_hdr
.
icmp_sum
 = 
	`ht⁄s
(
sum
);

422 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
icmp_hdr
, 
LIBNET_ICMPV6_COMMON_H
) < 0)

424 
bad
;

427 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
•ecific
, 
•ecific_s
) < 0)

429 
bad
;

432 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
∑ylﬂd
, 
∑ylﬂd_s
) < 0)

434 
bad
;

437 i‡(
sum
 == 0)

439 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

442  
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 0, 
pblock_ty≥
);

444 
bad
:

445 
	`lib√t_pblock_dñëe
(
l
, 
p
);

448 
	}
}

450 
lib√t_±ag_t
 
	$lib√t_buûd_icmpv6
(
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

451 
uöt8_t
* 
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

452 
lib√t_t
* 
l
, 
lib√t_±ag_t
 
±ag
)

454  
	`lib√t_buûd_icmpv6_comm⁄
(

455 
ty≥
, 
code
, 
sum
,

456 
NULL
, 0, 
LIBNET_PBLOCK_ICMPV6_UNREACH_H
,

457 
∑ylﬂd
, 
∑ylﬂd_s
,

458 
l
, 
±ag
);

459 
	}
}

461 
lib√t_±ag_t


462 
	$lib√t_buûd_icmpv6_uƒóch
(

463 
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

464 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

465 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag


468 
lib√t_icmpv6_uƒóch
 
•ecific
;

470 
	`mem£t
(&
•ecific
, 0, (specific));

472  
	`lib√t_buûd_icmpv6_comm⁄
(

473 
ty≥
, 
code
, 
sum
,

474 &
•ecific
, (•ecific), 
LIBNET_PBLOCK_ICMPV6_UNREACH_H
,

475 
∑ylﬂd
, 
∑ylﬂd_s
,

476 
l
, 
±ag
);

477 
	}
}

479 
lib√t_±ag_t


480 
	$lib√t_buûd_icmpv6_echo
(

481 
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

482 
uöt16_t
 
id
, uöt16_à
£q
,

483 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

484 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag


487 
lib√t_icmpv6_echo
 
•ecific
;

489 
	`mem£t
(&
•ecific
, 0, (specific));

490 
•ecific
.
id
 = 
	`ht⁄s
(id);

491 
•ecific
.
£q
 = 
	`ht⁄s
(seq);

493  
	`lib√t_buûd_icmpv6_comm⁄
(

494 
ty≥
, 
code
, 
sum
,

495 &
•ecific
, (•ecific), 
LIBNET_PBLOCK_ICMPV6_ECHO_H
,

496 
∑ylﬂd
, 
∑ylﬂd_s
,

497 
l
, 
±ag
);

498 
	}
}

501 
lib√t_±ag_t
 
	$lib√t_buûd_icmpv6_ndp_nsﬁ
(

502 
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

503 
lib√t_ö6_addr
 
èrgë
,

504 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

505 
lib√t_t
* 
l
, 
lib√t_±ag_t
 
±ag
)

507 
lib√t_icmpv6_ndp_nsﬁ
 
•ecific
;

509 
	`mem£t
(&
•ecific
, 0, (specific));

510 
•ecific
.
ª£rved
 = 0;

511 
•ecific
.
èrgë_addr
 = 
èrgë
;

513  
	`lib√t_buûd_icmpv6_comm⁄
(

514 
ty≥
, 
code
, 
sum
,

515 &
•ecific
, (•ecific), 
LIBNET_PBLOCK_ICMPV6_NDP_NSOL_H
,

516 
∑ylﬂd
, 
∑ylﬂd_s
,

517 
l
, 
±ag
);

518 
	}
}

521 
lib√t_±ag_t
 
	$lib√t_buûd_icmpv6_ndp_«dv
(

522 
uöt8_t
 
ty≥
, uöt8_à
code
, 
uöt16_t
 
sum
,

523 
uöt32_t
 
Êags
, 
lib√t_ö6_addr
 
èrgë
,

524 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

525 
lib√t_t
* 
l
, 
lib√t_±ag_t
 
±ag
)

528 
lib√t_icmpv6_ndp_«dv
 
•ecific
;

530 
	`mem£t
(&
•ecific
, 0, (specific));

531 
•ecific
.
Êags
 = 
	`ht⁄l
(flags);

532 
•ecific
.
èrgë_addr
 = 
èrgë
;

534  
	`lib√t_buûd_icmpv6_comm⁄
(

535 
ty≥
, 
code
, 
sum
,

536 &
•ecific
, (•ecific), 
LIBNET_PBLOCK_ICMPV6_NDP_NADV_H
,

537 
∑ylﬂd
, 
∑ylﬂd_s
,

538 
l
, 
±ag
);

539 
	}
}

541 
lib√t_±ag_t
 
	$lib√t_buûd_icmpv6_ndp_›t
(

542 
uöt8_t
 
ty≥
, uöt8_t* 
›ti⁄
, 
uöt32_t
 
›ti⁄_s
,

543 
lib√t_t
* 
l
, 
lib√t_±ag_t
 
±ag
)

545 
lib√t_icmpv6_ndp_›t
 
›t
;

546 
uöt32_t
 
n
;

547 
uöt8_t
 
∑d
[8] = { 0 };

548 
uöt32_t
 
∑d_s
 = 0;

549 
lib√t_pblock_t
* 
p
;

551 if(
l
 =
NULL
)

554 if(!
›ti⁄
)

555 
›ti⁄_s
 = 0;

558 
n
 = (
›t
Ë+ 
›ti⁄_s
;

560 if(
n
 % 8)

562 
n
 += 8 - (n % 8);

565 if(
n
 > (0xff * 8))

570 
∑d_s
 = 
n
 - 
›ti⁄_s
 - (
›t
);

572 
	`as£π
((
n
 % 8) == 0);

573 
	`as£π
(
∑d_s
 < (
∑d
));

575 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_ICMPV6_NDP_OPT_H
);

576 if(
p
 =
NULL
)

579 
	`mem£t
(&
›t
, 0, (opt));

580 
›t
.
ty≥
 =Åype;

581 
›t
.
Àn
 = 
n
 / 8;

583 if(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, &
›t
, (opt)) == -1)

584 
bad
;

586 if(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
›ti⁄
, 
›ti⁄_s
) == -1)

587 
bad
;

589 if(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
∑d
, 
∑d_s
) == -1)

590 
bad
;

592  
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
n
, 
LIBNET_PBLOCK_ICMPV6_NDP_OPT_H
);

594 
bad
:

595 
	`lib√t_pblock_dñëe
(
l
, 
p
);

597 
	}
}

	@/workspaces/libnet/src/libnet_build_igmp.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_igmp
(
uöt8_t
 
ty≥
, uöt8_à
ª£rved
, 
uöt16_t
 
sum
, 
uöt32_t
 
ù
,

37 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

39 
uöt32_t
 
n
, 
h
;

40 
lib√t_pblock_t
 *
p
;

41 
lib√t_igmp_hdr
 
igmp_hdr
;

43 i‡(
l
 =
NULL
)

48 
n
 = 
LIBNET_IGMP_H
 + 
∑ylﬂd_s
;

49 
h
 = 
LIBNET_IGMP_H
;

55 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_IGMP_H
);

56 i‡(
p
 =
NULL
)

61 
	`mem£t
(&
igmp_hdr
, 0, (igmp_hdr));

62 
igmp_hdr
.
igmp_ty≥
 = 
ty≥
;

63 
igmp_hdr
.
igmp_code
 = 
ª£rved
;

64 
igmp_hdr
.
igmp_sum
 = (
sum
 ? 
	`ht⁄s
(sum) : 0);

65 
igmp_hdr
.
igmp_group
.
s_addr
 = 
ù
;

67 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
igmp_hdr
, 
LIBNET_IGMP_H
) == -1)

69 
bad
;

73 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

75 i‡(
sum
 == 0)

82 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

85  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_IGMP_H
));

86 
bad
:

87 
	`lib√t_pblock_dñëe
(
l
, 
p
);

89 
	}
}

	@/workspaces/libnet/src/libnet_build_ip.c

33 
	~"comm⁄.h
"

36 
lib√t_±ag_t


37 
	$lib√t_buûd_ùv4
(
uöt16_t
 
ù_Àn
, 
uöt8_t
 
tos
, uöt16_à
id
, uöt16_à
‰ag
,

38 
uöt8_t
 
âl
, uöt8_à
¥Ÿ
, 
uöt16_t
 
sum
, 
uöt32_t
 
§c
, uöt32_à
d°
,

39 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

41 
uöt32_t
 
n
 = 
LIBNET_IPV4_H
;

42 
lib√t_pblock_t
 *
p
, *
p_d©a
, *
p_ãmp
;

43 
lib√t_ùv4_hdr
 
ù_hdr
;

44 
lib√t_±ag_t
 
±ag_d©a
 = 0;

45 
lib√t_±ag_t
 
±ag_hﬁd
;

47 i‡(
l
 =
NULL
)

56 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_IPV4_H
);

57 i‡(
p
 =
NULL
)

62 
	`mem£t
(&
ù_hdr
, 0, (ip_hdr));

63 
ù_hdr
.
ù_v
 = 4;

64 
ù_hdr
.
ù_hl
 = 5;

67 i‡(
p
->
¥ev
)

69 i‡(
p
->
¥ev
->
ty≥
 =
LIBNET_PBLOCK_IPO_H
)

75 
ù_hdr
.
ù_hl
 +
p
->
¥ev
->
b_Àn
 / 4;

83 
ù_hdr
.
ù_tos
 = 
tos
;

84 
ù_hdr
.
ù_Àn
 = 
	`ht⁄s
(ip_len);

85 
ù_hdr
.
ù_id
 = 
	`ht⁄s
(
id
);

86 
ù_hdr
.
ù_off
 = 
	`ht⁄s
(
‰ag
);

87 
ù_hdr
.
ù_âl
 = 
âl
;

88 
ù_hdr
.
ù_p
 = 
¥Ÿ
;

89 
ù_hdr
.
ù_sum
 = (
sum
 ? 
	`ht⁄s
(sum) : 0);

90 
ù_hdr
.
ù_§c
.
s_addr
 = 
§c
;

91 
ù_hdr
.
ù_d°
.
s_addr
 = 
d°
;

93 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
ù_hdr
, 
LIBNET_IPV4_H
) == -1)

95 
bad
;

99 
±ag_hﬁd
 = 
±ag
;

101 i‡(
±ag
 =
LIBNET_PTAG_INITIALIZER
)

103 
±ag
 = 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
LIBNET_IPV4_H
, 
LIBNET_PBLOCK_IPV4_H
);

111 i‡(
±ag_hﬁd
 && 
p
->
¥ev
)

113 
p_ãmp
 = 
p
->
¥ev
;

114 
p_ãmp
->
¥ev
 &&

115 (
p_ãmp
->
ty≥
 !
LIBNET_PBLOCK_IPDATA
) &&

116 (
p_ãmp
->
ty≥
 !
LIBNET_PBLOCK_IPV4_H
))

118 
p_ãmp
 =Ö_ãmp->
¥ev
;

121 i‡(
p_ãmp
->
ty≥
 =
LIBNET_PBLOCK_IPDATA
)

123 
±ag_d©a
 = 
p_ãmp
->
±ag
;

127 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

128 "%s(): IPv4 d©®pblockÇŸ found", 
__func__
);

132 i‡(
∑ylﬂd_s
 && !
∑ylﬂd
)

134 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

135 "%s():Öaylﬂd inc⁄si°ícy", 
__func__
);

136 
bad
;

139 i‡(
∑ylﬂd_s
)

153 
p_d©a
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag_d©a
, 
∑ylﬂd_s
,

154 
LIBNET_PBLOCK_IPDATA
);

155 i‡(
p_d©a
 =
NULL
)

160 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p_d©a
, 
∑ylﬂd
, 
∑ylﬂd_s
) == -1)

162 
bad
;

165 i‡(
±ag_d©a
 =
LIBNET_PTAG_INITIALIZER
)

168 i‡(
p_d©a
->
¥ev
->
ty≥
 =
LIBNET_PBLOCK_IPV4_H
)

170 
	`lib√t_pblock_upd©e
(
l
, 
p_d©a
, 
∑ylﬂd_s
,

171 
LIBNET_PBLOCK_IPDATA
);

173 
	`lib√t_pblock_sw≠
(
l
, 
p
->
±ag
, 
p_d©a
->ptag);

183 
p_d©a
->
ty≥
 = 
LIBNET_PBLOCK_IPDATA
;

184 
p_d©a
->
±ag
 = ++(
l
->
±ag_°©e
);

185 
p_d©a
->
h_Àn
 = 
∑ylﬂd_s
;

188 
p_ãmp
 = 
l
->
¥Ÿocﬁ_blocks
;

189 
p_ãmp
->
ty≥
 =
LIBNET_PBLOCK_IPV4_H
 ||

190 
p_ãmp
->
ty≥
 =
LIBNET_PBLOCK_IPO_H
;

191 
p_ãmp
 =Ö_ãmp->
√xt
)

193 
	`lib√t_pblock_ö£π_bef‹e
(
l
, 
p_ãmp
->
±ag
, 
p_d©a
->ptag);

198 
l
->
pblock_íd
->
√xt
 = 
NULL
;

201 i‡(
p_d©a
->
¥ev
 &&Ö_d©a->¥ev->
ty≥
 =
LIBNET_PBLOCK_IPO_H
)

203 
	`lib√t_pblock_sw≠
(
l
, 
p_d©a
->
¥ev
->
±ag
,Ö_data->ptag);

209 
p_d©a
 = 
	`lib√t_pblock_föd
(
l
, 
±ag_d©a
);

210 i‡(
p_d©a
)

212 
	`lib√t_pblock_dñëe
(
l
, 
p_d©a
);

220 
	`mem£t
(
l
->
îr_buf
, 0,  (l->err_buf));

223 i‡(
sum
 == 0)

230 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

233  (
±ag
);

234 
bad
:

235 
	`lib√t_pblock_dñëe
(
l
, 
p
);

237 
	}
}

239 
lib√t_±ag_t


240 
	$lib√t_autobuûd_ùv4
(
uöt16_t
 
Àn
, 
uöt8_t
 
¥Ÿ
, 
uöt32_t
 
d°
, 
lib√t_t
 *
l
)

242 
uöt32_t
 
n
, 
i
, 
j
, 
§c
;

243 
uöt16_t
 
h
;

244 
lib√t_pblock_t
 *
p
;

245 
lib√t_±ag_t
 
±ag
;

246 
lib√t_ùv4_hdr
 
ù_hdr
;

248 i‡(
l
 =
NULL
)

253 
n
 = 
LIBNET_IPV4_H
;

254 
h
 = 
Àn
;

255 
±ag
 = 
LIBNET_PTAG_INITIALIZER
;

256 
§c
 = 
	`lib√t_gë_ùaddr4
(
l
);

257 i‡(
§c
 =
UINT32_MAX
)

266 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_IPV4_H
);

267 i‡(
p
 =
NULL
)

272 
	`mem£t
(&
ù_hdr
, 0, (ip_hdr));

273 
ù_hdr
.
ù_v
 = 4;

274 
ù_hdr
.
ù_hl
 = 5;

277 i‡(
p
->
¥ev
)

279 i‡(
p
->
¥ev
->
ty≥
 =
LIBNET_PBLOCK_IPO_H
)

285 
i
 = 0, 
j
 = 0; i < 
p
->
¥ev
->
b_Àn
; i++)

287 (
i
 % 4Ë? 
j
 : j++;

289 
ù_hdr
.
ù_hl
 +
j
;

293 
ù_hdr
.
ù_tos
 = 0;

294 
ù_hdr
.
ù_Àn
 = 
	`ht⁄s
(
h
);

295 
ù_hdr
.
ù_id
 = 
	`ht⁄s
((
l
->
±ag_°©e
) & 0x0000ffff);

296 
ù_hdr
.
ù_off
 = 0;

297 
ù_hdr
.
ù_âl
 = 64;

298 
ù_hdr
.
ù_p
 = 
¥Ÿ
;

299 
ù_hdr
.
ù_sum
 = 0;

300 
ù_hdr
.
ù_§c
.
s_addr
 = 
§c
;

301 
ù_hdr
.
ù_d°
.
s_addr
 = 
d°
;

303 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
ù_hdr
, 
LIBNET_IPV4_H
) == -1)

305 
bad
;

308 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

309 
±ag
 = 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
LIBNET_IPV4_H
, 
LIBNET_PBLOCK_IPV4_H
);

311  (
±ag
);

313 
bad
:

314 
	`lib√t_pblock_dñëe
(
l
, 
p
);

316 
	}
}

318 
lib√t_±ag_t


319 
	$lib√t_buûd_ùv4_›ti⁄s
(c⁄° 
uöt8_t
 *
›ti⁄s
, 
uöt32_t
 
›ti⁄s_s
, 
lib√t_t
 *
l
,

320 
lib√t_±ag_t
 
±ag
)

322 
›ti⁄s_size_ö¸ó£
 = 0;

323 
uöt32_t
 
adj_size
;

324 
lib√t_pblock_t
 *
p
, *
p_ãmp
;

325 
lib√t_ùv4_hdr
 *
ù_hdr
;

327 i‡(
l
 =
NULL
)

333 i‡(
›ti⁄s_s
 > 
LIBNET_MAXOPTION_SIZE
)

335 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

336 "%s(): o±i⁄†li° i†toÿœrgê%d", 
__func__
, 
›ti⁄s_s
);

340 
adj_size
 = 
›ti⁄s_s
;

341 i‡(
adj_size
 % 4)

344 
adj_size
 +4 - (
›ti⁄s_s
 % 4);

348 i‡(
±ag
)

350 
p_ãmp
 = 
	`lib√t_pblock_föd
(
l
, 
±ag
);

351 i‡(
p_ãmp
)

353 
›ti⁄s_size_ö¸ó£
 = 
adj_size
 - 
p_ãmp
->
b_Àn
;

365 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
adj_size
, 
LIBNET_PBLOCK_IPO_H
);

366 i‡(
p
 =
NULL
)

372 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
›ti⁄s
, 
›ti⁄s_s
) == -1)

374 
bad
;

378 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
*)"\0\0\0", 
adj_size
 - 
›ti⁄s_s
) == -1)

380 
bad
;

383 i‡(
±ag
 && 
p
->
√xt
)

385 
p_ãmp
 = 
p
->
√xt
;

388 i‡(
p_ãmp
->
ty≥
 =
LIBNET_PBLOCK_IPV4_H
)

390 
ù_hdr
 = (
lib√t_ùv4_hdr
 *Ë
p_ãmp
->
buf
;

391 
ù_hdr
->
ù_hl
 = 5 + 
adj_size
 / 4;

392 
ù_hdr
->
ù_Àn
 = 
	`ht⁄s
(
	`¡ohs
(ù_hdr->ù_ÀnË+ 
›ti⁄s_size_ö¸ó£
);

394 
p_ãmp
->
h_Àn
 = 
ù_hdr
->
ù_hl
 * 4;

398  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
adj_size
,

399 
LIBNET_PBLOCK_IPO_H
));

400 
bad
:

401 
	`lib√t_pblock_dñëe
(
l
, 
p
);

403 
	}
}

405 
lib√t_±ag_t


406 
	$lib√t_buûd_ùv6
(
uöt8_t
 
tc
, 
uöt32_t
 
Ê
, 
uöt16_t
 
Àn
, uöt8_à
nh
,

407 
uöt8_t
 
hl
, 
lib√t_ö6_addr
 
§c
, lib√t_ö6_add∏
d°
,

408 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

410 
uöt32_t
 
n
;

411 
lib√t_pblock_t
 *
p
;

412 
lib√t_ùv6_hdr
 
ù_hdr
;

414 i‡(
l
 =
NULL
)

419 
n
 = 
LIBNET_IPV6_H
 + 
∑ylﬂd_s
;

421 i‡(
LIBNET_IPV6_H
 + 
∑ylﬂd_s
 > 
IP_MAXPACKET
)

423 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

424 "%s(): IPÖackëÅoÿœrge", 
__func__
);

432 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_IPV6_H
);

433 i‡(
p
 =
NULL
)

438 
	`mem£t
(&
ù_hdr
, 0, (ip_hdr));

439 
ù_hdr
.
ù_Êags
[0] = (0x06 << 4Ë| ((
tc
 & 0xF0) >> 4);

440 
ù_hdr
.
ù_Êags
[1] = ((
tc
 & 0x0FË<< 4Ë| ((
Ê
 & 0xF0000) >> 16);

441 
ù_hdr
.
ù_Êags
[2] = (
Ê
 & 0x0FF00) >> 8;

442 
ù_hdr
.
ù_Êags
[3] = 
Ê
 & 0x000FF;

443 
ù_hdr
.
ù_Àn
 = 
	`ht⁄s
(
Àn
);

444 
ù_hdr
.
ù_nh
 = 
nh
;

445 
ù_hdr
.
ù_hl
 = 
hl
;

446 
ù_hdr
.
ù_§c
 = 
§c
;

447 
ù_hdr
.
ù_d°
 = 
d°
;

449 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
ù_hdr
, 
LIBNET_IPV6_H
) == -1)

451 
bad
;

455 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

458 
±ag
 =Öèg ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
LIBNET_IPV6_H
,

459 
LIBNET_PBLOCK_IPV6_H
);

461  
±ag
;

463 
bad
:

464 
	`lib√t_pblock_dñëe
(
l
, 
p
);

466 
	}
}

468 
lib√t_±ag_t


469 
	$lib√t_buûd_ùv6_‰ag
(
uöt8_t
 
nh
, uöt8_à
ª£rved
, 
uöt16_t
 
‰ag
,

470 
uöt32_t
 
id
, c⁄° 
uöt8_t
 *
∑ylﬂd
, uöt32_à
∑ylﬂd_s
, 
lib√t_t
 *
l
,

471 
lib√t_±ag_t
 
±ag
)

473 
uöt32_t
 
n
;

474 
uöt16_t
 
h
;

475 
lib√t_pblock_t
 *
p
;

476 
lib√t_ùv6_‰ag_hdr
 
ùv6_‰ag_hdr
;

478 i‡(
l
 =
NULL
)

483 
n
 = 
LIBNET_IPV6_FRAG_H
 + 
∑ylﬂd_s
;

484 
h
 = 0;

486 i‡(
LIBNET_IPV6_FRAG_H
 + 
∑ylﬂd_s
 > 
IP_MAXPACKET
)

488 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

489 "%s(): IPÖackëÅoÿœrge", 
__func__
);

497 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_IPV6_FRAG_H
);

498 i‡(
p
 =
NULL
)

503 
	`mem£t
(&
ùv6_‰ag_hdr
, 0 , (ipv6_frag_hdr));

504 
ùv6_‰ag_hdr
.
ù_nh
 = 
nh
;

505 
ùv6_‰ag_hdr
.
ù_ª£rved
 = 
ª£rved
;

506 
ùv6_‰ag_hdr
.
ù_‰ag
 = 
‰ag
;

507 
ùv6_‰ag_hdr
.
ù_id
 = 
id
;

512 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
ùv6_‰ag_hdr
,

513 
LIBNET_IPV6_FRAG_H
) == -1)

515 
bad
;

519 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

526  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

527 
LIBNET_PBLOCK_IPV6_FRAG_H
));

528 
bad
:

529 
	`lib√t_pblock_dñëe
(
l
, 
p
);

531 
	}
}

533 
lib√t_±ag_t


534 
	$lib√t_buûd_ùv6_routög
(
uöt8_t
 
nh
, uöt8_à
Àn
, uöt8_à
πy≥
,

535 
uöt8_t
 
£gmíts
, c⁄° uöt8_à*
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
,

536 
lib√t_±ag_t
 
±ag
)

538 
uöt32_t
 
n
;

539 
uöt16_t
 
h
;

540 
lib√t_pblock_t
 *
p
;

541 
lib√t_ùv6_routög_hdr
 
ùv6_routög_hdr
;

543 i‡(
l
 =
NULL
)

551 
n
 = 
LIBNET_IPV6_ROUTING_H
 + 
∑ylﬂd_s
;

552 
h
 = 0;

554 i‡(
LIBNET_IPV6_ROUTING_H
 + 
∑ylﬂd_s
 > 
IP_MAXPACKET
)

556 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

557 "%s(): IPÖackëÅoÿœrge", 
__func__
);

565 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_IPV6_ROUTING_H
);

566 i‡(
p
 =
NULL
)

571 
	`mem£t
(&
ùv6_routög_hdr
, 0 , (ipv6_routing_hdr));

572 
ùv6_routög_hdr
.
ù_nh
 = 
nh
;

573 
ùv6_routög_hdr
.
ù_Àn
 = 
Àn
;

574 
ùv6_routög_hdr
.
ù_πy≥
 = 
πy≥
;

575 
ùv6_routög_hdr
.
ù_£gmíts
 = 
£gmíts
;

580 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
ùv6_routög_hdr
,

581 
LIBNET_IPV6_ROUTING_H
) == -1)

583 
bad
;

587 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

594  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

595 
LIBNET_PBLOCK_IPV6_ROUTING_H
));

596 
bad
:

597 
	`lib√t_pblock_dñëe
(
l
, 
p
);

599 
	}
}

601 
lib√t_±ag_t


602 
	$lib√t_buûd_ùv6_de°›ts
(
uöt8_t
 
nh
, uöt8_à
Àn
, c⁄° uöt8_à*
∑ylﬂd
,

603 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

605 
uöt32_t
 
n
;

606 
uöt16_t
 
h
;

607 
lib√t_pblock_t
 *
p
;

608 
lib√t_ùv6_de°›ts_hdr
 
ùv6_de°›ts_hdr
;

610 i‡(
l
 =
NULL
)

618 
n
 = 
LIBNET_IPV6_DESTOPTS_H
 + 
∑ylﬂd_s
;

619 
h
 = 0;

621 i‡(
LIBNET_IPV6_DESTOPTS_H
 + 
∑ylﬂd_s
 > 
IP_MAXPACKET
)

623 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

624 "%s(): IPÖackëÅoÿœrge", 
__func__
);

632 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_IPV6_DESTOPTS_H
);

633 i‡(
p
 =
NULL
)

638 
	`mem£t
(&
ùv6_de°›ts_hdr
, 0 , (ipv6_destopts_hdr));

639 
ùv6_de°›ts_hdr
.
ù_nh
 = 
nh
;

640 
ùv6_de°›ts_hdr
.
ù_Àn
 = 
Àn
;

645 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
ùv6_de°›ts_hdr
,

646 
LIBNET_IPV6_DESTOPTS_H
) == -1)

648 
bad
;

652 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

659  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

660 
LIBNET_PBLOCK_IPV6_DESTOPTS_H
));

661 
bad
:

662 
	`lib√t_pblock_dñëe
(
l
, 
p
);

664 
	}
}

666 
lib√t_±ag_t


667 
	$lib√t_buûd_ùv6_hbh›ts
(
uöt8_t
 
nh
, uöt8_à
Àn
, c⁄° uöt8_à*
∑ylﬂd
,

668 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

670 
uöt32_t
 
n
;

671 
uöt16_t
 
h
;

672 
lib√t_pblock_t
 *
p
;

673 
lib√t_ùv6_hbh›ts_hdr
 
ùv6_hbh›ts_hdr
;

675 i‡(
l
 =
NULL
)

683 
n
 = 
LIBNET_IPV6_HBHOPTS_H
 + 
∑ylﬂd_s
;

684 
h
 = 0;

686 i‡(
LIBNET_IPV6_HBHOPTS_H
 + 
∑ylﬂd_s
 > 
IP_MAXPACKET
)

688 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

689 "%s(): IPÖackëÅoÿœrge", 
__func__
);

697 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_IPV6_HBHOPTS_H
);

698 i‡(
p
 =
NULL
)

703 
	`mem£t
(&
ùv6_hbh›ts_hdr
, 0 , (ipv6_hbhopts_hdr));

704 
ùv6_hbh›ts_hdr
.
ù_nh
 = 
nh
;

705 
ùv6_hbh›ts_hdr
.
ù_Àn
 = 
Àn
;

710 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
ùv6_hbh›ts_hdr
,

711 
LIBNET_IPV6_HBHOPTS_H
) == -1)

713 
bad
;

717 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

724  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

725 
LIBNET_PBLOCK_IPV6_HBHOPTS_H
));

726 
bad
:

727 
	`lib√t_pblock_dñëe
(
l
, 
p
);

729 
	}
}

731 
lib√t_±ag_t


732 
	$lib√t_autobuûd_ùv6
(
uöt16_t
 
Àn
, 
uöt8_t
 
nh
, 
lib√t_ö6_addr
 
d°
,

733 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

735 
lib√t_ö6_addr
 
§c
;

737 
§c
 = 
	`lib√t_gë_ùaddr6
(
l
);

739 i‡(
	`lib√t_ö6_is_îr‹
(
§c
))

744  
	`lib√t_buûd_ùv6
(0, 0, 
Àn
, 
nh
, 64, 
§c
, 
d°
, 
NULL
, 0, 
l
, 
±ag
);

745 
	}
}

	@/workspaces/libnet/src/libnet_build_ipsec.c

34 
	~"comm⁄.h
"

36 
lib√t_±ag_t


37 
	$lib√t_buûd_ù£c_e•_hdr
(
uöt32_t
 
•i
, uöt32_à
£q
, uöt32_à
iv
,

38 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

40 
uöt32_t
 
n
, 
h
;

41 
lib√t_pblock_t
 *
p
;

42 
lib√t_e•_hdr
 
e•_hdr
;

44 i‡(
l
 =
NULL
)

49 
n
 = 
LIBNET_IPSEC_ESP_HDR_H
 + 
∑ylﬂd_s
;

50 
h
 = 0;

52 
	`mem£t
(&
e•_hdr
, 0, (esp_hdr));

53 
e•_hdr
.
e•_•i
 = 
	`ht⁄l
(
•i
);

54 
e•_hdr
.
e•_£q
 = 
	`ht⁄l
(
£q
);

55 
e•_hdr
.
e•_iv
 = 
	`ht⁄l
(
iv
);

61 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_IPSEC_ESP_HDR_H
);

62 i‡(
p
 =
NULL
)

67 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
e•_hdr
, 
LIBNET_IPSEC_ESP_HDR_H
) == -1)

69 
bad
;

73 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

75  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

76 
LIBNET_PBLOCK_IPSEC_ESP_HDR_H
));

77 
bad
:

78 
	`lib√t_pblock_dñëe
(
l
, 
p
);

80 
	}
}

83 
lib√t_±ag_t


84 
	$lib√t_buûd_ù£c_e•_·r
(
uöt8_t
 
Àn
, uöt8_à
nh
, 
öt8_t
 *
auth
,

85 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
,

86 
lib√t_±ag_t
 
±ag
)

89 
uöt32_t
 
n
, 
h
;

90 
lib√t_pblock_t
 *
p
;

91 
lib√t_e•_·r
 
e•_·r
;

93 i‡(
l
 =
NULL
)

98 
n
 = 
LIBNET_IPSEC_ESP_FTR_H
 + 
∑ylﬂd_s
;

99 
h
 = 0;

101 
	`mem£t
(&
e•_·r
, 0, (esp_ftr));

102 
e•_·r
.
e•_∑d_Àn
 = 
Àn
;

103 
e•_·r
.
e•_nh
 = 
nh
;

104 
e•_·r
.
e•_auth
 = 
auth
;

110 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_IPSEC_ESP_FTR_H
);

111 i‡(
p
 =
NULL
)

116 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
e•_·r
,

117 
LIBNET_IPSEC_ESP_FTR_H
) == -1)

119 
bad
;

123 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

125  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

126 
LIBNET_PBLOCK_IPSEC_ESP_FTR_H
));

127 
bad
:

128 
	`lib√t_pblock_dñëe
(
l
, 
p
);

130 
	}
}

133 
lib√t_±ag_t


134 
	$lib√t_buûd_ù£c_ah
(
uöt8_t
 
nh
, uöt8_à
Àn
, 
uöt16_t
 
ªs
,

135 
uöt32_t
 
•i
, uöt32_à
£q
, uöt32_à
auth
, c⁄° 
uöt8_t
 *
∑ylﬂd
,

136 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

138 
uöt32_t
 
n
, 
h
;

139 
lib√t_pblock_t
 *
p
;

140 
lib√t_ah_hdr
 
ah_hdr
;

142 i‡(
l
 =
NULL
)

147 
n
 = 
LIBNET_IPSEC_AH_H
 + 
∑ylﬂd_s
;

148 
h
 = 0;

154 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_IPSEC_AH_H
);

155 i‡(
p
 =
NULL
)

160 
	`mem£t
(&
ah_hdr
, 0, (ah_hdr));

161 
ah_hdr
.
ah_nh
 = 
nh
;

162 
ah_hdr
.
ah_Àn
 = 
Àn
;

163 
ah_hdr
.
ah_ªs
 = (
ªs
 ? 
	`ht⁄s
(res) : 0);

164 
ah_hdr
.
ah_•i
 = 
	`ht⁄l
(
•i
);

165 
ah_hdr
.
ah_£q
 = 
	`ht⁄l
(
£q
);

166 
ah_hdr
.
ah_auth
 = 
	`ht⁄l
(
auth
);

168 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
ah_hdr
, 
LIBNET_IPSEC_AH_H
) == -1)

170 
bad
;

174 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

176  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

177 
LIBNET_PBLOCK_IPSEC_AH_H
));

178 
bad
:

179 
	`lib√t_pblock_dñëe
(
l
, 
p
);

181 
	}
}

	@/workspaces/libnet/src/libnet_build_isl.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_i¶
(
uöt8_t
 *
dho°
, uöt8_à
ty≥
, uöt8_à
u£r
,

37 
uöt8_t
 *
sho°
, 
uöt16_t
 
Àn
, c⁄° uöt8_à*
¢≠
, uöt16_à
vid
,

38 
uöt16_t
 
p‹tödex
, uöt16_à
ª£rved
, c⁄° 
uöt8_t
 *
∑ylﬂd
,

39 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

41 
uöt32_t
 
n
;

42 
lib√t_pblock_t
 *
p
;

43 
lib√t_i¶_hdr
 
i¶_hdr
;

45 i‡(
l
 =
NULL
)

50 
n
 = 
LIBNET_ISL_H
 + 
∑ylﬂd_s
;

56 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_ISL_H
);

57 i‡(
p
 =
NULL
)

62 
	`mem£t
(&
i¶_hdr
, 0,  (isl_hdr));

63 
	`mem˝y
(&
i¶_hdr
.
i¶_dho°
, 
dho°
, (isl_hdr.isl_dhost));

64 
i¶_hdr
.
i¶_ty≥
 = 
ty≥
;

65 
i¶_hdr
.
i¶_u£r
 = 
u£r
;

66 
	`mem˝y
(&
i¶_hdr
.
i¶_sho°
, 
sho°
, (isl_hdr.isl_shost));

67 
i¶_hdr
.
i¶_Àn
 = 
	`ht⁄s
(
Àn
);

68 
	`mem˝y
(&
i¶_hdr
.
i¶_¢≠
, 
¢≠
, (isl_hdr.isl_snap));

69 
i¶_hdr
.
i¶_vid
 = 
	`ht⁄s
(
vid
);

70 
i¶_hdr
.
i¶_ödex
 = 
	`ht⁄s
(
p‹tödex
);

71 
i¶_hdr
.
i¶_ª£rved

	`ht⁄s
(
ª£rved
);

73 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
i¶_hdr
, 
LIBNET_ISL_H
) == -1)

75 
bad
;

79 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

82 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

83  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
LIBNET_ISL_H
,

84 
LIBNET_PBLOCK_ISL_H
));

85 
bad
:

86 
	`lib√t_pblock_dñëe
(
l
, 
p
);

88 
	}
}

	@/workspaces/libnet/src/libnet_build_link.c

34 
	~"comm⁄.h
"

36 
lib√t_±ag_t


37 
	$lib√t_buûd_lök
(c⁄° 
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, c⁄° uöt8_à*
oui
, 
uöt16_t
 
ty≥
,

38 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

41 ()
oui
;

42 
uöt8_t
 
‹g
[3] = {0x00, 0x00, 0x00};

43 
l
->
lök_ty≥
)

46 
DLT_EN10MB
:

47  
	`lib√t_buûd_ëhî√t
(
d°
, 
§c
, 
ty≥
, 
∑ylﬂd
, 
∑ylﬂd_s
, 
l
,

48 
±ag
);

49 
DLT_IEEE802
:

50  
	`lib√t_buûd_tokí_rög
(
LIBNET_TOKEN_RING_FRAME
,

51 
LIBNET_TOKEN_RING_LLC_FRAME
, 
d°
, 
§c
, 
LIBNET_SAP_SNAP
,

52 
LIBNET_SAP_SNAP
, 0x03, 
‹g
, 
ty≥
, 
∑ylﬂd
, 
∑ylﬂd_s
,

53 
l
, 
±ag
);

55 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

56 "%s():Üökty≥ %dÇŸ suµ‹ãd", 
__func__
, 
l
->
lök_ty≥
);

58 
	}
}

60 
lib√t_±ag_t


61 
	$lib√t_autobuûd_lök
(c⁄° 
uöt8_t
 *
d°
, c⁄° uöt8_à*
oui
, 
uöt16_t
 
ty≥
, 
lib√t_t
 *
l
)

63 ()
oui
;

64 
uöt8_t
 
‹g
[3] = {0x00, 0x00, 0x00};

65 
l
->
lök_ty≥
)

68 
DLT_EN10MB
:

69  (
	`lib√t_autobuûd_ëhî√t
(
d°
, 
ty≥
, 
l
));

70 
DLT_IEEE802
:

71  (
	`lib√t_autobuûd_tokí_rög
(
LIBNET_TOKEN_RING_FRAME
,

72 
LIBNET_TOKEN_RING_LLC_FRAME
, 
d°
, 
LIBNET_SAP_SNAP
,

73 
LIBNET_SAP_SNAP
, 0x03, 
‹g
, 
TOKEN_RING_TYPE_IP
, 
l
));

75 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

76 "%s():Üökty≥ %dÇŸ suµ‹ãd", 
__func__
, 
l
->
lök_ty≥
);

78 
	}
}

	@/workspaces/libnet/src/libnet_build_lldp.c

1 
	~"comm⁄.h
"

3 
LIBNET_API


4 
lib√t_±ag_t
 
	$lib√t_buûd_Œdp_chassis
(c⁄° 
uöt8_t
 
subty≥
,

5 c⁄° 
uöt8_t
 *
vÆue
,

6 c⁄° 
uöt8_t
 
vÆue_s
,

7 
lib√t_t
 *
l
,

8 
lib√t_±ag_t
 
±ag
)

10 
lib√t_Œdp_hdr
 
hdr
 = { 0 };

11 
uöt16_t
 
ty≥_™d_Àn
;

12 
lib√t_pblock_t
 *
p
;

13 
uöt32_t
 
n
, 
h
;

15 i‡(
l
 =
NULL
)

18 i‡(
vÆue
 =
NULL
)

20 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

21 "%s(): Chassi†ID såög i†NULL", 
__func__
);

25 i‡(
vÆue_s
 == 0)

27 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

28 "%s(): Inc‹ª˘ Chassi†ID såögÜígth", 
__func__
);

33 
n
 = 
h
 = 
LIBNET_LLDP_TLV_HDR_SIZE
 +

34 
LIBNET_LLDP_SUBTYPE_SIZE
 +

35 
vÆue_s
;

37 
	`LIBNET_LLDP_TLV_SET_TYPE
(
hdr
.
év_öfo
, 
LIBNET_LLDP_CHASSIS_ID
);

38 
	`LIBNET_LLDP_TLV_SET_LEN
(
hdr
.
év_öfo
, 
vÆue_s
 + 
LIBNET_LLDP_SUBTYPE_SIZE
);

44 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_LLDP_CHASSIS_H
);

45 i‡(
p
 =
NULL
)

50 
ty≥_™d_Àn
 = 
	`ht⁄s
(
hdr
.
év_öfo
);

51 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, &
ty≥_™d_Àn
, (type_and_len)) == -1)

52 
bad
;

54 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, &
subty≥
, (subtype)) == -1)

55 
bad
;

57 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
vÆue
, 
vÆue_s
) == -1)

58 
bad
;

60  (
±ag
 ?Ötag

61 : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_LLDP_CHASSIS_H
));

62 
bad
:

63 
	`lib√t_pblock_dñëe
(
l
, 
p
);

65 
	}
}

68 
LIBNET_API


69 
lib√t_±ag_t
 
	$lib√t_buûd_Œdp_p‹t
(c⁄° 
uöt8_t
 
subty≥
,

70 c⁄° 
uöt8_t
 *
vÆue
,

71 c⁄° 
uöt8_t
 
vÆue_s
,

72 
lib√t_t
 *
l
,

73 
lib√t_±ag_t
 
±ag
)

75 
lib√t_Œdp_hdr
 
hdr
 = { 0 };

76 
uöt16_t
 
ty≥_™d_Àn
;

77 
lib√t_pblock_t
 *
p
;

78 
uöt32_t
 
n
, 
h
;

80 i‡(
l
 =
NULL
)

83 i‡(
vÆue
 =
NULL
)

85 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

86 "%s(): P‹àID såög i†NULL", 
__func__
);

90 i‡(
vÆue_s
 == 0)

92 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

93 "%s(): Inc‹ª˘ P‹àID såögÜígth", 
__func__
);

98 
n
 = 
h
 = 
LIBNET_LLDP_TLV_HDR_SIZE
 +

99 
LIBNET_LLDP_SUBTYPE_SIZE
 +

100 
vÆue_s
;

102 
	`LIBNET_LLDP_TLV_SET_TYPE
(
hdr
.
év_öfo
, 
LIBNET_LLDP_PORT_ID
);

103 
	`LIBNET_LLDP_TLV_SET_LEN
(
hdr
.
év_öfo
, 
vÆue_s
 + 
LIBNET_LLDP_SUBTYPE_SIZE
);

109 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_LLDP_PORT_H
);

110 i‡(
p
 =
NULL
)

113 
ty≥_™d_Àn
 = 
	`ht⁄s
(
hdr
.
év_öfo
);

114 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, &
ty≥_™d_Àn
, (type_and_len)) == -1)

115 
bad
;

117 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, &
subty≥
, (subtype)) == -1)

118 
bad
;

120 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
vÆue
, 
vÆue_s
) == -1)

121 
bad
;

123 i‡(
±ag
)

124  
±ag
;

126  
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_LLDP_PORT_H
);

127 
bad
:

128 
	`lib√t_pblock_dñëe
(
l
, 
p
);

130 
	}
}

132 
LIBNET_API


133 
lib√t_±ag_t
 
	$lib√t_buûd_Œdp_âl
(c⁄° 
uöt16_t
 
âl
,

134 
lib√t_t
 *
l
,

135 
lib√t_±ag_t
 
±ag
)

137 
lib√t_Œdp_hdr
 
hdr
 = { 0 };

138 
uöt16_t
 
ty≥_™d_Àn
;

139 
lib√t_pblock_t
 *
p
;

140 
uöt32_t
 
n
, 
h
;

142 i‡(
l
 =
NULL
)

145 i‡(
âl
 > 
UINT16_MAX
)

147 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

148 "%s(): Inc‹ª˘ vÆuêo‡âl", 
__func__
);

153 
n
 = 
h
 = 
LIBNET_LLDP_TLV_HDR_SIZE
 +

154 (
uöt16_t
);

156 
	`LIBNET_LLDP_TLV_SET_TYPE
(
hdr
.
év_öfo
, 
LIBNET_LLDP_TTL
);

157 
	`LIBNET_LLDP_TLV_SET_LEN
(
hdr
.
év_öfo
, (
uöt16_t
));

163 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_LLDP_TTL_H
);

164 i‡(
p
 =
NULL
)

167 
ty≥_™d_Àn
 = 
	`ht⁄s
(
hdr
.
év_öfo
);

168 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, &
ty≥_™d_Àn
, (type_and_len)) == -1)

169 
bad
;

171 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, &
âl
, (ttl)) == -1)

172 
bad
;

174 i‡(
±ag
)

175  
±ag
;

177  
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_LLDP_TTL_H
);

178 
bad
:

179 
	`lib√t_pblock_dñëe
(
l
, 
p
);

181 
	}
}

184 
LIBNET_API


185 
lib√t_±ag_t
 
	$lib√t_buûd_Œdp_íd
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

187 
lib√t_Œdp_hdr
 
hdr
 = { 0 };

188 
uöt16_t
 
ty≥_™d_Àn
;

189 
lib√t_pblock_t
 *
p
;

190 
uöt32_t
 
n
, 
h
;

192 i‡(
l
 =
NULL
)

196 
n
 = 
h
 = 
LIBNET_LLDP_TLV_HDR_SIZE
;

198 
	`LIBNET_LLDP_TLV_SET_TYPE
(
hdr
.
év_öfo
, 
LIBNET_LLDP_END_LLDPDU
);

199 
	`LIBNET_LLDP_TLV_SET_LEN
(
hdr
.
év_öfo
, 0);

205 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_LLDP_TTL_H
);

206 i‡(
p
 =
NULL
)

209 
ty≥_™d_Àn
 = 
	`ht⁄s
(
hdr
.
év_öfo
);

210 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, &
ty≥_™d_Àn
, (type_and_len)) == -1)

211 
bad
;

213 i‡(
±ag
)

214  
±ag
;

216  
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_LLDP_TTL_H
);

217 
bad
:

218 
	`lib√t_pblock_dñëe
(
l
, 
p
);

220 
	}
}

222 
LIBNET_API


223 
lib√t_±ag_t
 
	$lib√t_buûd_Œdp_‹g_•ec
(c⁄° 
uöt8_t
 *
vÆue
,

224 c⁄° 
uöt16_t
 
vÆue_s
,

225 
lib√t_t
 *
l
,

226 
lib√t_±ag_t
 
±ag
)

228 
lib√t_Œdp_hdr
 
hdr
 = { 0 };

229 
uöt16_t
 
ty≥_™d_Àn
;

230 
lib√t_pblock_t
 *
p
;

231 
uöt32_t
 
n
, 
h
;

233 i‡(
l
 =
NULL
)

236 i‡(
vÆue
 =
NULL
)

238 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

239 "%s(): Org™iz©i⁄ S≥cifi¯°rög i†NULL", 
__func__
);

243 i‡((
vÆue_s
 < 4) || (value_s > 511))

245 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

246 "%s(): Inc‹ª˘ TLV inf‹m©i⁄ såögÜígth", 
__func__
);

250 
	`LIBNET_LLDP_TLV_SET_TYPE
(
hdr
.
év_öfo
, 
LIBNET_LLDP_ORG_SPEC
);

251 
	`LIBNET_LLDP_TLV_SET_LEN
(
hdr
.
év_öfo
, 
vÆue_s
);

254 
n
 = 
h
 = 
LIBNET_LLDP_TLV_HDR_SIZE
 +

255 
vÆue_s
;

261 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_LLDP_ORG_SPEC_H
);

262 i‡(
p
 =
NULL
)

265 
ty≥_™d_Àn
 = 
	`ht⁄s
(
hdr
.
év_öfo
);

266 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, &
ty≥_™d_Àn
, (type_and_len)) == -1)

267 
bad
;

269 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
vÆue
, 
vÆue_s
) == -1)

270 
bad
;

272 i‡(
±ag
)

273  
±ag
;

275  
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_LLDP_ORG_SPEC_H
);

276 
bad
:

277 
	`lib√t_pblock_dñëe
(
l
, 
p
);

279 
	}
}

	@/workspaces/libnet/src/libnet_build_mpls.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_m∂s
(
uöt32_t
 
œbñ
, 
uöt8_t
 
ex≥rimíèl
, uöt8_à
bos
,

37 
uöt8_t
 
âl
, c⁄° uöt8_à*
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
,

38 
lib√t_±ag_t
 
±ag
)

40 
uöt32_t
 
n
, 
h
;

41 
lib√t_pblock_t
 *
p
;

42 
lib√t_m∂s_hdr
 
m∂s_hdr
;

44 i‡(
l
 =
NULL
)

49 
n
 = 
LIBNET_MPLS_H
 + 
∑ylﬂd_s
;

50 
h
 = 0;

56 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_MPLS_H
);

57 i‡(
p
 =
NULL
)

62 
	`mem£t
(&
m∂s_hdr
, 0, (mpls_hdr));

63 
m∂s_hdr
.
m∂s_Às
 = 
	`ht⁄l
((((
œbñ
 & 0x000fffff) << 12) |

64 ((
ex≥rimíèl
 & 0x07) << 9) |

65 ((
bos
 & 0x01) << 8) |

66 ((
âl
 & 0xff))));

68 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
m∂s_hdr
, 
LIBNET_MPLS_H
) == -1)

70 
bad
;

74 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

83 
l
->
lök_off£t
 += 4;

85  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_MPLS_H
));

86 
bad
:

87 
	`lib√t_pblock_dñëe
(
l
, 
p
);

89 
	}
}

	@/workspaces/libnet/src/libnet_build_ntp.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_¡p
(
uöt8_t
 
À≠_ödiˇt‹
, uöt8_à
vîsi⁄
, uöt8_à
mode
,

37 
uöt8_t
 
°øtum
, uöt8_à
pﬁl
, uöt8_à
¥ecisi⁄
, 
uöt16_t
 
dñay_öt
,

38 
uöt16_t
 
dñay_‰ac
, uöt16_à
di•îsi⁄_öt
, uöt16_à
di•îsi⁄_‰ac
,

39 
uöt32_t
 
ª„ªn˚_id
, uöt32_à
ªf_ts_öt
, uöt32_à
ªf_ts_‰ac
,

40 
uöt32_t
 
‹ig_ts_öt
, uöt32_à
‹ig_ts_‰ac
, uöt32_à
ªc_ts_öt
,

41 
uöt32_t
 
ªc_ts_‰ac
, uöt32_à
xmt_ts_öt
, uöt32_à
xmt_ts_‰ac
,

42 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

44 
uöt32_t
 
n
, 
h
;

45 
lib√t_pblock_t
 *
p
;

46 
lib√t_¡p_hdr
 
¡p_hdr
;

48 i‡(
l
 =
NULL
)

53 
n
 = 
LIBNET_NTP_H
 + 
∑ylﬂd_s
;

54 
h
 = 0;

60 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_NTP_H
);

61 i‡(
p
 =
NULL
)

66 
	`mem£t
(&
¡p_hdr
, 0, (ntp_hdr));

67 
¡p_hdr
.
¡p_li_vn_mode
 = 
	`LIBNET_NTP_DO_LI_VN_MODE
(

68 
À≠_ödiˇt‹
, 
vîsi⁄
, 
mode
);

69 
¡p_hdr
.
¡p_°øtum
 = 
°øtum
;

70 
¡p_hdr
.
¡p_pﬁl
 = 
pﬁl
;

71 
¡p_hdr
.
¡p_¥ecisi⁄
 = 
¥ecisi⁄
;

72 
¡p_hdr
.
¡p_dñay
.
öãgî
 = 
	`ht⁄s
(
dñay_öt
);

73 
¡p_hdr
.
¡p_dñay
.
‰a˘i⁄
 = 
	`ht⁄s
(
dñay_‰ac
);

74 
¡p_hdr
.
¡p_di•îsi⁄
.
öãgî
 = 
	`ht⁄s
(
di•îsi⁄_öt
);

75 
¡p_hdr
.
¡p_di•îsi⁄
.
‰a˘i⁄
 = 
	`ht⁄s
(
di•îsi⁄_‰ac
);

76 
¡p_hdr
.
¡p_ª„ªn˚_id
 = 
	`ht⁄l
(
ª„ªn˚_id
);

77 
¡p_hdr
.
¡p_ªf_ts
.
öãgî
 = 
	`ht⁄l
(
ªf_ts_öt
);

78 
¡p_hdr
.
¡p_ªf_ts
.
‰a˘i⁄
 = 
	`ht⁄l
(
ªf_ts_‰ac
);

79 
¡p_hdr
.
¡p_‹ig_ts
.
öãgî
 = 
	`ht⁄l
(
‹ig_ts_öt
);

80 
¡p_hdr
.
¡p_‹ig_ts
.
‰a˘i⁄
 = 
	`ht⁄l
(
‹ig_ts_‰ac
);

81 
¡p_hdr
.
¡p_ªc_ts
.
öãgî
 = 
	`ht⁄l
(
ªc_ts_öt
);

82 
¡p_hdr
.
¡p_ªc_ts
.
‰a˘i⁄
 = 
	`ht⁄l
(
ªc_ts_‰ac
);

83 
¡p_hdr
.
¡p_xmt_ts
.
öãgî
 = 
	`ht⁄l
(
xmt_ts_öt
);

84 
¡p_hdr
.
¡p_xmt_ts
.
‰a˘i⁄
 = 
	`ht⁄l
(
xmt_ts_‰ac
);

86 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
¡p_hdr
, 
LIBNET_NTP_H
) == -1)

88 
bad
;

92 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

94  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_NTP_H
));

95 
bad
:

96 
	`lib√t_pblock_dñëe
(
l
, 
p
);

98 
	}
}

	@/workspaces/libnet/src/libnet_build_ospf.c

36 
	~"comm⁄.h
"

38 
lib√t_±ag_t


39 
	$lib√t_buûd_o•fv2
(
uöt16_t
 
Àn
, 
uöt8_t
 
ty≥
, 
uöt32_t
 
πr_id
,

40 
uöt32_t
 
¨ó_id
, 
uöt16_t
 
sum
, uöt16_à
auty≥
, c⁄° 
uöt8_t
 *
∑ylﬂd
,

41 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

43 
uöt32_t
 
n
, 
h
;

44 
lib√t_pblock_t
 *
p
;

45 
lib√t_o•f_hdr
 
o•f_hdr
;

47 i‡(
l
 =
NULL
)

52 
n
 = 
LIBNET_OSPF_H
 + 
∑ylﬂd_s
;

53 
h
 = 
LIBNET_OSPF_H
 + 
∑ylﬂd_s
 + 
Àn
;

59 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_OSPF_H
);

60 i‡(
p
 =
NULL
)

65 
	`mem£t
(&
o•f_hdr
, 0, (ospf_hdr));

66 
o•f_hdr
.
o•f_v
 = 2;

67 
o•f_hdr
.
o•f_ty≥
 = 
ty≥
;

68 
o•f_hdr
.
o•f_Àn
 = 
	`ht⁄s
(
h
);

69 
o•f_hdr
.
o•f_πr_id
.
s_addr
 = 
πr_id
;

70 
o•f_hdr
.
o•f_¨ó_id
.
s_addr
 = 
¨ó_id
;

71 
o•f_hdr
.
o•f_sum
 = 
sum
;

72 
o•f_hdr
.
o•f_auth_ty≥
 = 
	`ht⁄s
(
auty≥
);

74 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
o•f_hdr
, 
LIBNET_OSPF_H
) == -1)

76 
bad
;

80 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

82 i‡(
sum
 == 0)

89 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

91  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_OSPF_H
));

92 
bad
:

93 
	`lib√t_pblock_dñëe
(
l
, 
p
);

95 
	}
}

98 
lib√t_±ag_t


99 
	$lib√t_buûd_o•fv2_hñlo
(
uöt32_t
 
√tmask
, 
uöt16_t
 
öãrvÆ
, 
uöt8_t
 
›ts
,

100 
uöt8_t
 
¥i‹ôy
, 
uöt32_t
 
dód_öt
, uöt32_à
des_πr
, uöt32_à
bkup_πr
,

101 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

103  
	`lib√t_buûd_o•fv2_hñlo_√ighb‹
(
√tmask
, 
öãrvÆ
, 
›ts
,

104 
¥i‹ôy
, 
dód_öt
, 
des_πr
, 
bkup_πr
, 0,

105 
∑ylﬂd
, 
∑ylﬂd_s
, 
l
, 
±ag
);

106 
	}
}

108 
lib√t_±ag_t


109 
	$lib√t_buûd_o•fv2_hñlo_√ighb‹
(
uöt32_t
 
√tmask
, 
uöt16_t
 
öãrvÆ
, 
uöt8_t
 
›ts
,

110 
uöt8_t
 
¥i‹ôy
, 
uöt32_t
 
dód_öt
, uöt32_à
des_πr
, uöt32_à
bkup_πr
, uöt32_à
√ighb‹
,

111 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

113 
uöt32_t
 
n
, 
h
;

114 
lib√t_pblock_t
 *
p
;

115 
lib√t_o•f_hñlo_hdr
 
hñlo_hdr
;

117 i‡(
l
 =
NULL
)

122 
n
 = 
LIBNET_OSPF_HELLO_H
 + 
∑ylﬂd_s
;

123 
h
 = 0;

129 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_OSPF_HELLO_H
);

130 i‡(
p
 =
NULL
)

135 
	`mem£t
(&
hñlo_hdr
, 0, (hello_hdr));

136 
hñlo_hdr
.
hñlo_nmask
.
s_addr
 = 
√tmask
;

137 
hñlo_hdr
.
hñlo_öåvl
 = 
	`ht⁄s
(
öãrvÆ
);

138 
hñlo_hdr
.
hñlo_›ts
 = 
›ts
;

139 
hñlo_hdr
.
hñlo_πr_¥i
 = 
¥i‹ôy
;

140 
hñlo_hdr
.
hñlo_dód_ötvl
 = 
	`ht⁄l
(
dód_öt
);

141 
hñlo_hdr
.
hñlo_des_πr
.
s_addr
 = 
des_πr
;

142 
hñlo_hdr
.
hñlo_bkup_πr
.
s_addr
 = 
bkup_πr
;

143 
hñlo_hdr
.
hñlo_nbr
.
s_addr
 = 
	`ht⁄l
(
√ighb‹
);

145 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
hñlo_hdr
, 
LIBNET_OSPF_HELLO_H
) == -1)

147 
bad
;

151 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

153  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

154 
LIBNET_PBLOCK_OSPF_HELLO_H
));

155 
bad
:

156 
	`lib√t_pblock_dñëe
(
l
, 
p
);

158 
	}
}

160 
lib√t_±ag_t


161 
	$lib√t_buûd_o•fv2_dbd
(
uöt16_t
 
dgøm_Àn
, 
uöt8_t
 
›ts
, uöt8_à
ty≥
,

162 
uöt32_t
 
£qnum
, c⁄° 
uöt8_t
 *
∑ylﬂd
, uöt32_à
∑ylﬂd_s
, 
lib√t_t
 *
l
,

163 
lib√t_±ag_t
 
±ag
)

165 
uöt32_t
 
n
, 
h
;

166 
lib√t_pblock_t
 *
p
;

167 
lib√t_dbd_hdr
 
dbd_hdr
;

169 i‡(
l
 =
NULL
)

174 
n
 = 
LIBNET_OSPF_DBD_H
 + 
∑ylﬂd_s
;

175 
h
 = 0;

181 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_OSPF_DBD_H
);

182 i‡(
p
 =
NULL
)

187 
	`mem£t
(&
dbd_hdr
, 0, (dbd_hdr));

188 
dbd_hdr
.
dbd_mtu_Àn
 = 
	`ht⁄s
(
dgøm_Àn
);

189 
dbd_hdr
.
dbd_›ts
 = 
›ts
;

190 
dbd_hdr
.
dbd_ty≥
 = 
ty≥
;

191 
dbd_hdr
.
dbd_£q
 = 
	`ht⁄l
(
£qnum
);

193 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
dbd_hdr
,

194 
LIBNET_OSPF_DBD_H
) == -1)

196 
bad
;

200 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

202  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

203 
LIBNET_PBLOCK_OSPF_DBD_H
));

204 
bad
:

205 
	`lib√t_pblock_dñëe
(
l
, 
p
);

207 
	}
}

210 
lib√t_±ag_t


211 
	$lib√t_buûd_o•fv2_l§
(
uöt32_t
 
ty≥
, uöt32_à
lsid
, uöt32_à
advπr
,

212 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

214 
uöt32_t
 
n
, 
h
;

215 
lib√t_pblock_t
 *
p
;

216 
lib√t_l§_hdr
 
l§_hdr
;

218 i‡(
l
 =
NULL
)

223 
n
 = 
LIBNET_OSPF_LSR_H
 + 
∑ylﬂd_s
;

224 
h
 = 0;

230 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_OSPF_LSR_H
);

231 i‡(
p
 =
NULL
)

236 
	`mem£t
(&
l§_hdr
, 0, (lsr_hdr));

237 
l§_hdr
.
l§_ty≥
 = 
	`ht⁄l
(
ty≥
);

238 
l§_hdr
.
l§_lsid
 = 
	`ht⁄l
(
lsid
);

239 
l§_hdr
.
l§_adπr
.
s_addr
 = 
	`ht⁄l
(
advπr
);

241 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
l§_hdr
,

242 
LIBNET_OSPF_LSR_H
) == -1)

244 
bad
;

248 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

250  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

251 
LIBNET_PBLOCK_OSPF_LSR_H
));

252 
bad
:

253 
	`lib√t_pblock_dñëe
(
l
, 
p
);

255 
	}
}

258 
lib√t_±ag_t


259 
	$lib√t_buûd_o•fv2_lsu
(
uöt32_t
 
num
, c⁄° 
uöt8_t
 *
∑ylﬂd
, uöt32_à
∑ylﬂd_s
,

260 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

262 
uöt32_t
 
n
, 
h
;

263 
lib√t_pblock_t
 *
p
;

264 
lib√t_lsu_hdr
 
lh_hdr
;

266 i‡(
l
 =
NULL
)

271 
n
 = 
LIBNET_OSPF_LSU_H
 + 
∑ylﬂd_s
;

272 
h
 = 0;

278 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_OSPF_LSU_H
);

279 i‡(
p
 =
NULL
)

284 
	`mem£t
(&
lh_hdr
, 0, (lh_hdr));

285 
lh_hdr
.
lsu_num
 = 
	`ht⁄l
(
num
);

287 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
lh_hdr
, 
LIBNET_OSPF_LSU_H
) == -1)

289 
bad
;

293 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

295  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

296 
LIBNET_PBLOCK_OSPF_LSU_H
));

297 
bad
:

298 
	`lib√t_pblock_dñëe
(
l
, 
p
);

300 
	}
}

303 
lib√t_±ag_t


304 
	$lib√t_buûd_o•fv2_lß
(
uöt16_t
 
age
, 
uöt8_t
 
›ts
, uöt8_à
ty≥
, 
uöt32_t
 
lsid
,

305 
uöt32_t
 
advπr
, uöt32_à
£qnum
, 
uöt16_t
 
sum
, uöt16_à
Àn
,

306 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

308 
uöt32_t
 
n
, 
h
;

309 
lib√t_pblock_t
 *
p
;

310 
lib√t_lß_hdr
 
lß_hdr
;

312 i‡(
l
 =
NULL
)

317 
n
 = 
LIBNET_OSPF_LSA_H
 + 
∑ylﬂd_s
;

318 
h
 = 
Àn
 + 
∑ylﬂd_s
;

324 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_OSPF_LSA_H
);

325 i‡(
p
 =
NULL
)

330 
	`mem£t
(&
lß_hdr
, 0, (lsa_hdr));

331 
lß_hdr
.
lß_age
 = 
	`ht⁄s
(
age
);

332 
lß_hdr
.
lß_›ts
 = 
›ts
;

333 
lß_hdr
.
lß_ty≥
 = 
ty≥
;

334 
lß_hdr
.
lß_id
 = 
	`ht⁄l
(
lsid
);

335 
lß_hdr
.
lß_adv
.
s_addr
 = 
	`ht⁄l
(
advπr
);

336 
lß_hdr
.
lß_£q
 = 
	`ht⁄l
(
£qnum
);

337 
lß_hdr
.
lß_sum
 = 
sum
;

338 
lß_hdr
.
lß_Àn
 = 
	`ht⁄s
(
h
);

340 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
lß_hdr
,

341 
LIBNET_OSPF_LSA_H
) == -1)

343 
bad
;

347 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

349 i‡(
sum
 == 0)

356 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

358  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

359 
LIBNET_PBLOCK_OSPF_LSA_H
));

360 
bad
:

361 
	`lib√t_pblock_dñëe
(
l
, 
p
);

363 
	}
}

366 
lib√t_±ag_t


367 
	$lib√t_buûd_o•fv2_lß_πr
(
uöt16_t
 
Êags
, uöt16_à
num
, 
uöt32_t
 
id
,

368 
uöt32_t
 
d©a
, 
uöt8_t
 
ty≥
, uöt8_à
tos
, 
uöt16_t
 
mëric
,

369 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

371 
uöt32_t
 
n
, 
h
;

372 
lib√t_pblock_t
 *
p
;

373 
lib√t_πr_lß_hdr
 
πr_lß_hdr
;

375 i‡(
l
 =
NULL
)

380 
n
 = 
LIBNET_OSPF_LS_RTR_H
 + 
∑ylﬂd_s
;

381 
h
 = 0;

387 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_LS_RTR_H
);

388 i‡(
p
 =
NULL
)

393 
	`mem£t
(&
πr_lß_hdr
, 0, (rtr_lsa_hdr));

394 
πr_lß_hdr
.
πr_Êags
 = 
	`ht⁄s
(
Êags
);

395 
πr_lß_hdr
.
πr_num
 = 
	`ht⁄s
(
num
);

396 
πr_lß_hdr
.
πr_lök_id
 = 
	`ht⁄l
(
id
);

397 
πr_lß_hdr
.
πr_lök_d©a
 = 
	`ht⁄l
(
d©a
);

398 
πr_lß_hdr
.
πr_ty≥
 = 
ty≥
;

399 
πr_lß_hdr
.
πr_tos_num
 = 
tos
;

400 
πr_lß_hdr
.
πr_mëric
 = 
	`ht⁄s
(
mëric
);

402 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
πr_lß_hdr
,

403 
LIBNET_OSPF_LS_RTR_H
) == -1)

405 
bad
;

409 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

411  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

412 
LIBNET_PBLOCK_LS_RTR_H
));

413 
bad
:

414 
	`lib√t_pblock_dñëe
(
l
, 
p
);

416 
	}
}

419 
lib√t_±ag_t


420 
	$lib√t_buûd_o•fv2_lß_√t
(
uöt32_t
 
nmask
, uöt32_à
πrid
,

421 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

423 
uöt32_t
 
n
, 
h
;

424 
lib√t_pblock_t
 *
p
;

425 
lib√t_√t_lß_hdr
 
√t_lß_hdr
;

427 i‡(
l
 =
NULL
)

432 
n
 = 
LIBNET_OSPF_LS_NET_H
 + 
∑ylﬂd_s
;

433 
h
 = 0;

439 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_LS_NET_H
);

440 i‡(
p
 =
NULL
)

445 
	`mem£t
(&
√t_lß_hdr
, 0, (net_lsa_hdr));

446 
√t_lß_hdr
.
√t_nmask
.
s_addr
 = 
	`ht⁄l
(
nmask
);

447 
√t_lß_hdr
.
√t_πr_id
 = 
	`ht⁄l
(
πrid
);

449 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
√t_lß_hdr
,

450 
LIBNET_OSPF_LS_NET_H
) == -1)

452 
bad
;

456 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

458  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

459 
LIBNET_PBLOCK_LS_NET_H
));

460 
bad
:

461 
	`lib√t_pblock_dñëe
(
l
, 
p
);

463 
	}
}

466 
lib√t_±ag_t


467 
	$lib√t_buûd_o•fv2_lß_sum
(
uöt32_t
 
nmask
, uöt32_à
mëric
, uöt32_à
tos
,

468 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

470 
uöt32_t
 
n
, 
h
;

471 
lib√t_pblock_t
 *
p
;

472 
lib√t_sum_lß_hdr
 
sum_lß_hdr
;

474 i‡(
l
 =
NULL
)

479 
n
 = 
LIBNET_OSPF_LS_SUM_H
 + 
∑ylﬂd_s
;

480 
h
 = 0;

486 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_LS_SUM_H
);

487 i‡(
p
 =
NULL
)

492 
	`mem£t
(&
sum_lß_hdr
, 0, (sum_lsa_hdr));

493 
sum_lß_hdr
.
sum_nmask
.
s_addr
 = 
	`ht⁄l
(
nmask
);

494 
sum_lß_hdr
.
sum_mëric
 = 
	`ht⁄l
(
mëric
);

495 
sum_lß_hdr
.
sum_tos_mëric
 = 
	`ht⁄l
(
tos
);

497 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
sum_lß_hdr
,

498 
LIBNET_OSPF_LS_SUM_H
) == -1)

500 
bad
;

504 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

506  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

507 
LIBNET_PBLOCK_LS_SUM_H
));

508 
bad
:

509 
	`lib√t_pblock_dñëe
(
l
, 
p
);

511 
	}
}

514 
lib√t_±ag_t


515 
	$lib√t_buûd_o•fv2_lß_as
(
uöt32_t
 
nmask
, uöt32_à
mëric
, uöt32_à
fwdaddr
,

516 
uöt32_t
 
èg
, c⁄° 
uöt8_t
 *
∑ylﬂd
, uöt32_à
∑ylﬂd_s
, 
lib√t_t
 *
l
,

517 
lib√t_±ag_t
 
±ag
)

519 
uöt32_t
 
n
, 
h
;

520 
lib√t_pblock_t
 *
p
;

521 
lib√t_as_lß_hdr
 
as_lß_hdr
;

523 i‡(
l
 =
NULL
)

528 
n
 = 
LIBNET_OSPF_LS_AS_EXT_H
 + 
∑ylﬂd_s
;

529 
h
 = 0;

535 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_LS_AS_EXT_H
);

536 i‡(
p
 =
NULL
)

541 
	`mem£t
(&
as_lß_hdr
, 0, (as_lsa_hdr));

542 
as_lß_hdr
.
as_nmask
.
s_addr
 = 
	`ht⁄l
(
nmask
);

543 
as_lß_hdr
.
as_mëric
 = 
	`ht⁄l
(
mëric
);

544 
as_lß_hdr
.
as_fwd_addr
.
s_addr
 = 
	`ht⁄l
(
fwdaddr
);

545 
as_lß_hdr
.
as_πe_èg
 = 
	`ht⁄l
(
èg
);

547 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
as_lß_hdr
,

548 
LIBNET_OSPF_LS_AS_EXT_H
) == -1)

550 
bad
;

554 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

556  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

557 
LIBNET_PBLOCK_LS_AS_EXT_H
));

558 
bad
:

559 
	`lib√t_pblock_dñëe
(
l
, 
p
);

561 
	}
}

	@/workspaces/libnet/src/libnet_build_rip.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_rù
(
uöt8_t
 
cmd
, uöt8_à
vîsi⁄
, 
uöt16_t
 
rd
, uöt16_à
af
,

37 
uöt16_t
 
π
, 
uöt32_t
 
addr
, uöt32_à
mask
, uöt32_à
√xt_h›
,

38 
uöt32_t
 
mëric
, c⁄° 
uöt8_t
 *
∑ylﬂd
, uöt32_à
∑ylﬂd_s
, 
lib√t_t
 *
l
,

39 
lib√t_±ag_t
 
±ag
)

41 
uöt32_t
 
n
, 
h
;

42 
lib√t_pblock_t
 *
p
;

43 
lib√t_rù_hdr
 
rù_hdr
;

45 i‡(
l
 =
NULL
)

50 
n
 = 
LIBNET_RIP_H
 + 
∑ylﬂd_s
;

51 
h
 = 0;

57 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_RIP_H
);

58 i‡(
p
 =
NULL
)

63 
	`mem£t
(&
rù_hdr
, 0, (rip_hdr));

64 
rù_hdr
.
rù_cmd
 = 
cmd
;

65 
rù_hdr
.
rù_vî
 = 
vîsi⁄
;

66 
rù_hdr
.
rù_rd
 = 
	`ht⁄s
(
rd
);

67 
rù_hdr
.
rù_af
 = 
	`ht⁄s
(
af
);

68 
rù_hdr
.
rù_π
 = 
	`ht⁄s
(
π
);

69 
rù_hdr
.
rù_addr
 = 
addr
;

70 
rù_hdr
.
rù_mask
 = 
mask
;

71 
rù_hdr
.
rù_√xt_h›
 = 
√xt_h›
;

72 
rù_hdr
.
rù_mëric
 = 
	`ht⁄l
(
mëric
);

74 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
rù_hdr
, 
LIBNET_RIP_H
) == -1)

76 
bad
;

80 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

82  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_RIP_H
));

83 
bad
:

84 
	`lib√t_pblock_dñëe
(
l
, 
p
);

86 
	}
}

	@/workspaces/libnet/src/libnet_build_rpc.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_Ωc_ˇŒ
(
uöt32_t
 
rm
, uöt32_à
xid
, uöt32_à
¥og_num
,

37 
uöt32_t
 
¥og_vîs
, uöt32_à
¥o˚duª
, uöt32_à
cÊav‹
, uöt32_à
˛ígth
,

38 
uöt8_t
 *
cd©a
, 
uöt32_t
 
vÊav‹
, uöt32_à
vÀngth
, c⁄° uöt8_à*
vd©a
,

39 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

41 ()
cd©a
;

42 ()
vd©a
;

43 
uöt32_t
 
n
, 
h
;

44 
lib√t_pblock_t
 *
p
;

45 
lib√t_Ωc_ˇŒ_t˝_hdr
 
Ωc_hdr
;

46 
rc
;

48 i‡(
l
 =
NULL
)

57 i‡(
rm
)

59 
n
 = 
LIBNET_RPC_CALL_TCP_H
 + 
∑ylﬂd_s
;

63 
n
 = 
LIBNET_RPC_CALL_H
 + 
∑ylﬂd_s
;

66 
h
 = 0;

72 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_RPC_CALL_H
);

73 i‡(
p
 =
NULL
)

78 
	`mem£t
(&
Ωc_hdr
, 0, (rpc_hdr));

79 i‡(
rm
)

81 
Ωc_hdr
.
Ωc_ªc‹d_m¨kög
 = 
	`ht⁄l
(
rm
 + 
∑ylﬂd_s
);

83 
Ωc_hdr
.
Ωc_comm⁄
.
Ωc_xid
 = 
	`ht⁄l
(
xid
);

84 
Ωc_hdr
.
Ωc_comm⁄
.
Ωc_ty≥
 = 
LIBNET_RPC_CALL
;

85 
Ωc_hdr
.
Ωc_comm⁄
.
Ωc_ˇŒ
.
Ωc_Ωcvîs
 = 
	`ht⁄l
(
LIBNET_RPC_VERS
);

86 
Ωc_hdr
.
Ωc_comm⁄
.
Ωc_ˇŒ
.
Ωc_¥ognum
 = 
	`ht⁄l
(
¥og_num
);

87 
Ωc_hdr
.
Ωc_comm⁄
.
Ωc_ˇŒ
.
Ωc_vîs
 = 
	`ht⁄l
(
¥og_vîs
);

88 
Ωc_hdr
.
Ωc_comm⁄
.
Ωc_ˇŒ
.
Ωc_¥o˚duª
 = 
	`ht⁄l
(
¥o˚duª
);

90 
Ωc_hdr
.
Ωc_comm⁄
.
Ωc_ˇŒ
.
Ωc_¸edítüls
.
Ωc_auth_Êav‹

	`ht⁄l
(
cÊav‹
);

91 
Ωc_hdr
.
Ωc_comm⁄
.
Ωc_ˇŒ
.
Ωc_¸edítüls
.
Ωc_auth_Àngth

	`ht⁄l
(
˛ígth
);

92 
Ωc_hdr
.
Ωc_comm⁄
.
Ωc_ˇŒ
.
Ωc_vîifõr
.
Ωc_auth_Êav‹
 = 
	`ht⁄l
(
vÊav‹
);

93 
Ωc_hdr
.
Ωc_comm⁄
.
Ωc_ˇŒ
.
Ωc_vîifõr
.
Ωc_auth_Àngth
 = 
	`ht⁄l
(
vÀngth
);

95 i‡(
rm
)

97 
rc
 = 
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
Ωc_hdr
,

98 
LIBNET_RPC_CALL_TCP_H
);

102 
rc
 = 
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
Ωc_hdr
.
Ωc_comm⁄
,

103 
LIBNET_RPC_CALL_H
);

106 i‡(
rc
 == -1)

108 
bad
;

112 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

114  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

115 
LIBNET_PBLOCK_RPC_CALL_H
));

116 
bad
:

117 
	`lib√t_pblock_dñëe
(
l
, 
p
);

119 
	}
}

	@/workspaces/libnet/src/libnet_build_sebek.c

32 
	~"comm⁄.h
"

34 
lib√t_±ag_t


35 
	$lib√t_buûd_£bek
(
uöt32_t
 
magic
, 
uöt16_t
 
vîsi⁄
, uöt16_à
ty≥
,

36 
uöt32_t
 
cou¡î
, uöt32_à
time_£c
, uöt32_à
time_u£c
, uöt32_à
pid
,

37 
uöt32_t
 
uid
, uöt32_à
fd
, 
uöt8_t
 
cmd
[
SEBEK_CMD_LENGTH
], uöt32_à
Àngth
,

38 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

40 
uöt32_t
 
n
;

41 
lib√t_pblock_t
 *
p
;

42 
lib√t_£bek_hdr
 
£bek_hdr
;

44 i‡(
l
 =
NULL
)

49 
n
 = 
LIBNET_SEBEK_H
 + 
∑ylﬂd_s
;

55 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_SEBEK_H
);

56 i‡(
p
 =
NULL
)

61 
	`mem£t
(&
£bek_hdr
, 0, (sebek_hdr));

62 
£bek_hdr
.
magic
 = 
	`ht⁄l
(magic);

63 
£bek_hdr
.
vîsi⁄
 = 
	`ht⁄s
(version);

64 
£bek_hdr
.
ty≥
 = 
	`ht⁄s
(type);

65 
£bek_hdr
.
cou¡î
 = 
	`ht⁄l
(counter);

66 
£bek_hdr
.
time_£c
 = 
	`ht⁄l
(time_sec);

67 
£bek_hdr
.
time_u£c
 = 
	`ht⁄l
(time_usec);

68 
£bek_hdr
.
pid
 = 
	`ht⁄l
(pid);

69 
£bek_hdr
.
uid
 = 
	`ht⁄l
(uid);

70 
£bek_hdr
.
fd
 = 
	`ht⁄l
(fd);

71 
	`mem˝y
(
£bek_hdr
.
cmd
, cmd, 
SEBEK_CMD_LENGTH
*(
uöt8_t
));

72 
£bek_hdr
.
Àngth
 = 
	`ht⁄l
(length);

74 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
£bek_hdr
, 
LIBNET_SEBEK_H
) == -1)

76 
bad
;

80 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

82  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 0, 
LIBNET_PBLOCK_SEBEK_H
));

83 
bad
:

84 
	`lib√t_pblock_dñëe
(
l
, 
p
);

86 
	}
}

	@/workspaces/libnet/src/libnet_build_snmp.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_¢mp
()

42 
	}
}

	@/workspaces/libnet/src/libnet_build_stp.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_°p_c⁄f
(
uöt16_t
 
id
, 
uöt8_t
 
vîsi⁄
, uöt8_à
bpdu_ty≥
,

37 
uöt8_t
 
Êags
, c⁄° uöt8_à*
roŸ_id
, 
uöt32_t
 
roŸ_pc
, c⁄° uöt8_à*
bridge_id
,

38 
uöt16_t
 
p‹t_id
, uöt16_à
mesßge_age
, uöt16_à
max_age
,

39 
uöt16_t
 
hñlo_time
, uöt16_à
f_dñay
, c⁄° 
uöt8_t
 *
∑ylﬂd
,

40 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

42 
uöt32_t
 
n
, 
h
;

43 
lib√t_pblock_t
 *
p
;

47 
uöt8_t
 
°p_hdr
[35];

48 
uöt16_t
 
vÆue_s
;

49 
uöt32_t
 
vÆue_l
;

51 i‡(
l
 =
NULL
)

56 
n
 = 
LIBNET_STP_CONF_H
 + 
∑ylﬂd_s
;

57 
h
 = 0;

63 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_STP_CONF_H
);

64 i‡(
p
 =
NULL
)

85 
vÆue_s
 = 
	`ht⁄s
(
id
);

86 
	`mem˝y
(
°p_hdr
, &
vÆue_s
, 2);

87 
°p_hdr
[2] = 
vîsi⁄
;

88 
°p_hdr
[3] = 
bpdu_ty≥
;

89 
°p_hdr
[4] = 
Êags
;

90 
	`mem˝y
(&
°p_hdr
[5], 
roŸ_id
, 8);

91 
vÆue_l
 = 
	`ht⁄l
(
roŸ_pc
);

92 
	`mem˝y
(&
°p_hdr
[13], &
vÆue_l
, 4);

93 
	`mem˝y
(&
°p_hdr
[17], 
bridge_id
, 8);

94 
vÆue_s
 = 
	`ht⁄s
(
p‹t_id
);

95 
	`mem˝y
(&
°p_hdr
[25], &
vÆue_s
, 2);

96 #i‡(
LIBNET_BIG_ENDIAN
 == 1)

97 
vÆue_s
 = 
	`ht⁄s
(
mesßge_age
);

99 
vÆue_s
 = 
mesßge_age
;

101 
	`mem˝y
(&
°p_hdr
[27], &
vÆue_s
, 2);

102 #i‡(
LIBNET_BIG_ENDIAN
 == 1)

103 
vÆue_s
 = 
	`ht⁄s
(
max_age
);

105 
vÆue_s
 = 
max_age
;

107 
	`mem˝y
(&
°p_hdr
[29], &
vÆue_s
, 2);

108 #i‡(
LIBNET_BIG_ENDIAN
 == 1)

109 
vÆue_s
 = 
	`ht⁄s
(
hñlo_time
);

111 
vÆue_s
 = 
hñlo_time
;

113 
	`mem˝y
(&
°p_hdr
[31], &
vÆue_s
, 2);

114 #i‡(
LIBNET_BIG_ENDIAN
 == 1)

115 
vÆue_s
 = 
	`ht⁄s
(
f_dñay
);

117 
vÆue_s
 = 
f_dñay
;

119 
	`mem˝y
(&
°p_hdr
[33], &
vÆue_s
, 2);

124 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
°p_hdr
, 
LIBNET_STP_CONF_H
) == -1)

126 
bad
;

130 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

132  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

133 
LIBNET_PBLOCK_STP_CONF_H
));

134 
bad
:

135 
	`lib√t_pblock_dñëe
(
l
, 
p
);

137 
	}
}

140 
lib√t_±ag_t


141 
	$lib√t_buûd_°p_t˙
(
uöt16_t
 
id
, 
uöt8_t
 
vîsi⁄
, uöt8_à
bpdu_ty≥
,

142 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

144 
uöt32_t
 
n
, 
h
;

145 
lib√t_pblock_t
 *
p
;

147 
lib√t_°p_t˙_hdr
 
°p_hdr
;

149 i‡(
l
 =
NULL
)

154 
n
 = 
LIBNET_STP_TCN_H
 + 
∑ylﬂd_s
;

155 
h
 = 0;

161 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_STP_TCN_H
);

162 i‡(
p
 =
NULL
)

167 
	`mem£t
(&
°p_hdr
, 0, (stp_hdr));

168 
°p_hdr
.
°p_id
 = 
	`ht⁄s
(
id
);

169 
°p_hdr
.
°p_vîsi⁄
 = 
vîsi⁄
;

170 
°p_hdr
.
°p_bpdu_ty≥
 = 
bpdu_ty≥
;

172 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
°p_hdr
, 
LIBNET_STP_TCN_H
) == -1)

174 
bad
;

178 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

180  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

181 
LIBNET_PBLOCK_STP_TCN_H
));

182 
bad
:

183 
	`lib√t_pblock_dñëe
(
l
, 
p
);

185 
	}
}

	@/workspaces/libnet/src/libnet_build_tcp.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_t˝
(

37 
uöt16_t
 
•
, uöt16_à
dp
, 
uöt32_t
 
£q
, uöt32_à
ack
,

38 
uöt8_t
 
c⁄åﬁ
, 
uöt16_t
 
wö
, uöt16_à
sum
, uöt16_à
urg
, uöt16_à
h_Àn
,

39 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

41 
off£t
;

42 
lib√t_pblock_t
 *
p
 = 
NULL
;

43 
lib√t_±ag_t
 
±ag_d©a
 = 0;

44 
lib√t_t˝_hdr
 
t˝_hdr
;

46 i‡(
l
 =
NULL
)

49 i‡(
∑ylﬂd_s
 && !
∑ylﬂd
)

51 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

52 "%s():Öaylﬂd inc⁄si°ícy", 
__func__
);

56 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
LIBNET_TCP_H
, 
LIBNET_PBLOCK_TCP_H
);

57 i‡(
p
 =
NULL
)

60 
	`mem£t
(&
t˝_hdr
, 0, (tcp_hdr));

61 
t˝_hdr
.
th_•‹t
 = 
	`ht⁄s
(
•
);

62 
t˝_hdr
.
th_dp‹t
 = 
	`ht⁄s
(
dp
);

63 
t˝_hdr
.
th_£q
 = 
	`ht⁄l
(
£q
);

64 
t˝_hdr
.
th_ack
 = 
	`ht⁄l
(
ack
);

65 
t˝_hdr
.
th_Êags
 = 
c⁄åﬁ
;

66 
t˝_hdr
.
th_x2
 = 0;

67 
t˝_hdr
.
th_off
 = 5;

70 i‡(
p
->
¥ev
 &&Ö->¥ev->
ty≥
 =
LIBNET_PBLOCK_TCPO_H
)

73 
t˝_hdr
.
th_off
 +(
p
->
¥ev
->
b_Àn
/4);

76 
t˝_hdr
.
th_wö
 = 
	`ht⁄s
(
wö
);

77 
t˝_hdr
.
th_sum
 = (
sum
 ? 
	`ht⁄s
(sum) : 0);

78 
t˝_hdr
.
th_uΩ
 = 
	`ht⁄s
(
urg
);

80 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
t˝_hdr
, 
LIBNET_TCP_H
) == -1)

82 
bad
;

85 i‡(
±ag
 =
LIBNET_PTAG_INITIALIZER
)

87 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h_Àn
, 
LIBNET_PBLOCK_TCP_H
);

90 
off£t
 = 
∑ylﬂd_s
;

95 i‡(
±ag
)

97 
lib√t_pblock_t
* 
d©ablock
 = 
p
->
¥ev
;

99 i‡(
d©ablock
 && d©ablock->
ty≥
 =
LIBNET_PBLOCK_TCPO_H
)

100 
d©ablock
 = d©ablock->
¥ev
;

102 i‡(
d©ablock
 && d©ablock->
ty≥
 =
LIBNET_PBLOCK_TCPDATA
)

104 
±ag_d©a
 = 
d©ablock
->
±ag
;

105 
off£t
 -
d©ablock
->
b_Àn
;

107 
p
->
h_Àn
 +
off£t
;

113 i‡(
p
->
√xt
)

115 
lib√t_pblock_t
* 
ùblock
 = 
p
->
√xt
;

117 if(
ùblock
->
ty≥
 =
LIBNET_PBLOCK_IPO_H
)

118 
ùblock
 = ipblock->
√xt
;

120 if(
ùblock
 && ipblock->
ty≥
 =
LIBNET_PBLOCK_IPV4_H
)

122 
lib√t_ùv4_hdr
 * 
ù_hdr
 = (lib√t_ùv4_hd∏*)
ùblock
->
buf
;

123 
ù_Àn
 = 
	`¡ohs
(
ù_hdr
->ù_ÀnË+ 
off£t
;

124 
ù_hdr
->
ù_Àn
 = 
	`ht⁄s
(ip_len);

129 i‡(
∑ylﬂd_s
)

132 
lib√t_pblock_t
* 
p_d©a
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag_d©a
, 
∑ylﬂd_s
, 
LIBNET_PBLOCK_TCPDATA
);

133 i‡(!
p_d©a
)

135 
bad
;

138 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p_d©a
, 
∑ylﬂd
, 
∑ylﬂd_s
) == -1)

140 
bad
;

143 i‡(
±ag_d©a
 =
LIBNET_PTAG_INITIALIZER
)

145 
ö£πbef‹e
 = 
p
->
±ag
;

149 
	`lib√t_pblock_upd©e
(
l
, 
p_d©a
, 
∑ylﬂd_s
, 
LIBNET_PBLOCK_TCPDATA
);

151 if(
p
->
¥ev
 &&Ö->¥ev->
ty≥
 =
LIBNET_PBLOCK_TCPO_H
)

152 
ö£πbef‹e
 = 
p
->
¥ev
->
±ag
;

154 
	`lib√t_pblock_ö£π_bef‹e
(
l
, 
ö£πbef‹e
, 
p_d©a
->
±ag
);

159 
lib√t_pblock_t
* 
p_d©a
 = 
	`lib√t_pblock_föd
(
l
, 
±ag_d©a
);

160 
	`lib√t_pblock_dñëe
(
l
, 
p_d©a
);

163 i‡(
sum
 == 0)

170 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

172  (
p
->
±ag
);

173 
bad
:

174 
	`lib√t_pblock_dñëe
(
l
, 
p
);

176 
	}
}

178 
lib√t_±ag_t


179 
	$lib√t_buûd_t˝_›ti⁄s
(c⁄° 
uöt8_t
 *
›ti⁄s
, 
uöt32_t
 
›ti⁄s_s
, 
lib√t_t
 *
l
,

180 
lib√t_±ag_t
 
±ag
)

182 c⁄° 
uöt8_t
 
∑ddög
[] = { 0 };

183 
off£t
, 
undîÊow
;

184 
uöt32_t
 
i
, 
j
, 
adj_size
;

185 
lib√t_pblock_t
 *
p
, *
p_ãmp
;

186 
lib√t_ùv4_hdr
 *
ù_hdr
;

187 
lib√t_t˝_hdr
 *
t˝_hdr
;

189 i‡(
l
 =
NULL
)

194 
undîÊow
 = 0;

195 
off£t
 = 0;

198 i‡(
›ti⁄s_s
 > 
LIBNET_MAXOPTION_SIZE
)

200 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

201 "%s(): o±i⁄†li° i†toÿœrgê%d", 
__func__
, 
›ti⁄s_s
);

205 
adj_size
 = 
›ti⁄s_s
;

206 i‡(
adj_size
 % 4)

209 
adj_size
 +4 - (
›ti⁄s_s
 % 4);

213 i‡(
±ag
)

215 
p_ãmp
 = 
	`lib√t_pblock_föd
(
l
, 
±ag
);

216 i‡(
p_ãmp
)

218 i‡(
adj_size
 >
p_ãmp
->
b_Àn
)

220 
off£t
 = 
adj_size
 - 
p_ãmp
->
b_Àn
;

224 
off£t
 = 
p_ãmp
->
b_Àn
 - 
adj_size
;

225 
undîÊow
 = 1;

234 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
adj_size
, 
LIBNET_PBLOCK_TCPO_H
);

235 i‡(
p
 =
NULL
)

240 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
›ti⁄s
, 
›ti⁄s_s
) == -1)

242 
bad
;

245 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, 
∑ddög
, 
adj_size
 - 
›ti⁄s_s
) == -1)

247 
bad
;

250 i‡(
±ag
 && 
p
->
√xt
)

252 
p_ãmp
 = 
p
->
√xt
;

253 (
p_ãmp
->
√xt
Ë&& (p_ãmp->
ty≥
 !
LIBNET_PBLOCK_TCP_H
))

255 
p_ãmp
 =Ö_ãmp->
√xt
;

257 i‡(
p_ãmp
->
ty≥
 =
LIBNET_PBLOCK_TCP_H
)

263 
i
 = 0, 
j
 = 0; i < 
p
->
b_Àn
; i++)

265 (
i
 % 4Ë? 
j
 : j++;

267 
t˝_hdr
 = (
lib√t_t˝_hdr
 *)
p_ãmp
->
buf
;

268 
t˝_hdr
->
th_off
 = 
j
 + 5;

269 i‡(!
undîÊow
)

271 
p_ãmp
->
h_Àn
 +
off£t
;

275 
p_ãmp
->
h_Àn
 -
off£t
;

278 (
p_ãmp
->
√xt
Ë&& (p_ãmp->
ty≥
 !
LIBNET_PBLOCK_IPV4_H
))

280 
p_ãmp
 =Ö_ãmp->
√xt
;

282 i‡(
p_ãmp
->
ty≥
 =
LIBNET_PBLOCK_IPV4_H
)

284 
ù_hdr
 = (
lib√t_ùv4_hdr
 *)
p_ãmp
->
buf
;

285 i‡(!
undîÊow
)

287 
ù_hdr
->
ù_Àn
 +
	`ht⁄s
(
off£t
);

291 
ù_hdr
->
ù_Àn
 -
	`ht⁄s
(
off£t
);

296  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
adj_size
,

297 
LIBNET_PBLOCK_TCPO_H
));

298 
bad
:

299 
	`lib√t_pblock_dñëe
(
l
, 
p
);

301 
	}
}

	@/workspaces/libnet/src/libnet_build_token_ring.c

32 
	~"comm⁄.h
"

34 
lib√t_±ag_t


35 
	$lib√t_buûd_tokí_rög
(
uöt8_t
 
ac
, uöt8_à
fc
, c⁄° uöt8_à*
d°
, c⁄° uöt8_à*
§c
,

36 
uöt8_t
 
dßp
, uöt8_à
sßp
, uöt8_à
cf
, c⁄° uöt8_à*
‹g
, 
uöt16_t
 
ty≥
,

37 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

39 
uöt32_t
 
n
, 
h
;

40 
lib√t_pblock_t
 *
p
;

41 
lib√t_tokí_rög_hdr
 
tokí_rög_hdr
;

43 i‡(
l
 =
NULL
)

49 i‡(
l
->
öje˘i⁄_ty≥
 !
LIBNET_LINK
 &&

50 !(((
l
->
öje˘i⁄_ty≥
Ë& 
LIBNET_ADV_MASK
)))

52 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

54 
__func__
);

55 
p
 = 
NULL
;

56 
bad
;

59 
n
 = 
LIBNET_TOKEN_RING_H
 + 
∑ylﬂd_s
;

60 
h
 = 0;

66 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_TOKEN_RING_H
);

67 i‡(
p
 =
NULL
)

72 
	`mem£t
(&
tokí_rög_hdr
, 0, (token_ring_hdr));

73 
tokí_rög_hdr
.
tokí_rög_ac˚ss_c⁄åﬁ
 = 
ac
;

74 
tokí_rög_hdr
.
tokí_rög_‰ame_c⁄åﬁ
 = 
fc
;

75 
	`mem˝y
(
tokí_rög_hdr
.
tokí_rög_dho°
, 
d°
, 
TOKEN_RING_ADDR_LEN
);

76 
	`mem˝y
(
tokí_rög_hdr
.
tokí_rög_sho°
, 
§c
, 
TOKEN_RING_ADDR_LEN
);

77 
tokí_rög_hdr
.
tokí_rög_Œc_dßp
 = 
dßp
;

78 
tokí_rög_hdr
.
tokí_rög_Œc_sßp
 = 
sßp
;

79 
tokí_rög_hdr
.
tokí_rög_Œc_c⁄åﬁ_fõld
 = 
cf
;

80 
	`mem˝y
(&
tokí_rög_hdr
.
tokí_rög_Œc_‹g_code
, 
‹g
, 
LIBNET_ORG_CODE_SIZE
);

81 
tokí_rög_hdr
.
tokí_rög_ty≥
 = 
	`ht⁄s
(
ty≥
);

83 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
tokí_rög_hdr
,

84 
LIBNET_TOKEN_RING_H
) == -1)

86 
bad
;

90 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

92  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
,

93 
LIBNET_PBLOCK_TOKEN_RING_H
));

94 
bad
:

95 
	`lib√t_pblock_dñëe
(
l
, 
p
);

97 
	}
}

100 
lib√t_±ag_t


101 
	$lib√t_autobuûd_tokí_rög
(
uöt8_t
 
ac
, uöt8_à
fc
, c⁄° uöt8_à*
d°
,

102 
uöt8_t
 
dßp
, uöt8_à
sßp
, uöt8_à
cf
, c⁄° uöt8_à*
‹g
, 
uöt16_t
 
ty≥
,

103 
lib√t_t
 *
l
)

105 
uöt32_t
 
n
, 
h
;

106 
lib√t_tokí_rög_addr
 *
§c
;

107 
lib√t_pblock_t
 *
p
;

108 
lib√t_±ag_t
 
±ag
;

109 
lib√t_tokí_rög_hdr
 
tokí_rög_hdr
;

111 i‡(
l
 =
NULL
)

117 i‡(
l
->
öje˘i⁄_ty≥
 !
LIBNET_LINK
 &&

118 !(((
l
->
öje˘i⁄_ty≥
Ë& 
LIBNET_ADV_MASK
)))

120 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

122 
__func__
);

123 
p
 = 
NULL
;

124 
bad
;

127 
n
 = 
LIBNET_TOKEN_RING_H
;

128 
h
 = 0;

129 
±ag
 = 
LIBNET_PTAG_INITIALIZER
;

132 
§c
 = (
lib√t_tokí_rög_addr
 *Ë
	`lib√t_gë_hwaddr
(
l
);

133 i‡(
§c
 =
NULL
)

142 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_TOKEN_RING_H
);

143 i‡(
p
 =
NULL
)

148 
	`mem£t
(&
tokí_rög_hdr
, 0, (token_ring_hdr));

149 
tokí_rög_hdr
.
tokí_rög_ac˚ss_c⁄åﬁ
 = 
ac
;

150 
tokí_rög_hdr
.
tokí_rög_‰ame_c⁄åﬁ
 = 
fc
;

151 
	`mem˝y
(
tokí_rög_hdr
.
tokí_rög_dho°
, 
d°
, 
TOKEN_RING_ADDR_LEN
);

152 
	`mem˝y
(
tokí_rög_hdr
.
tokí_rög_sho°
, 
§c
, 
TOKEN_RING_ADDR_LEN
);

153 
tokí_rög_hdr
.
tokí_rög_Œc_dßp
 = 
dßp
;

154 
tokí_rög_hdr
.
tokí_rög_Œc_sßp
 = 
sßp
;

155 
tokí_rög_hdr
.
tokí_rög_Œc_c⁄åﬁ_fõld
 = 
cf
;

156 
	`mem˝y
(&
tokí_rög_hdr
.
tokí_rög_Œc_‹g_code
, 
‹g
, 
LIBNET_ORG_CODE_SIZE
);

157 
tokí_rög_hdr
.
tokí_rög_ty≥
 = 
	`ht⁄s
(
ty≥
);

160 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
tokí_rög_hdr
,

161 
LIBNET_TOKEN_RING_H
) == -1)

163 
bad
;

166  (
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_TOKEN_RING_H
));

167 
bad
:

168 
	`lib√t_pblock_dñëe
(
l
, 
p
);

170 
	}
}

	@/workspaces/libnet/src/libnet_build_udp.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_udp
(
uöt16_t
 
•
, uöt16_à
dp
, uöt16_à
Àn
, uöt16_à
sum
,

37 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

39 
uöt32_t
 
n
;

40 
lib√t_pblock_t
 *
p
;

41 
lib√t_udp_hdr
 
udp_hdr
;

43 i‡(
l
 =
NULL
)

48 
n
 = 
LIBNET_UDP_H
 + 
∑ylﬂd_s
;

54 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_UDP_H
);

55 i‡(
p
 =
NULL
)

60 
	`mem£t
(&
udp_hdr
, 0, (udp_hdr));

61 
udp_hdr
.
uh_•‹t
 = 
	`ht⁄s
(
•
);

62 
udp_hdr
.
uh_dp‹t
 = 
	`ht⁄s
(
dp
);

63 
udp_hdr
.
uh_uÀn
 = 
	`ht⁄s
(
Àn
);

64 
udp_hdr
.
uh_sum
 = (
sum
 ? 
	`ht⁄s
(sum) : 0);

66 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
udp_hdr
, 
LIBNET_UDP_H
) == -1)

68 
bad
;

72 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

74 i‡(
sum
 == 0)

81 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

83  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
Àn
, 
LIBNET_PBLOCK_UDP_H
));

84 
bad
:

85 
	`lib√t_pblock_dñëe
(
l
, 
p
);

87 
	}
}

	@/workspaces/libnet/src/libnet_build_vrrp.c

33 
	~"comm⁄.h
"

35 
lib√t_±ag_t


36 
	$lib√t_buûd_vºp
(
uöt8_t
 
vîsi⁄
, uöt8_à
ty≥
, uöt8_à
vrouãr_id
,

37 
uöt8_t
 
¥i‹ôy
, uöt8_à
ù_cou¡
, uöt8_à
auth_ty≥
, uöt8_à
advît_öt
,

38 
uöt16_t
 
sum
, c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
, 
lib√t_t
 *
l
,

39 
lib√t_±ag_t
 
±ag
)

41 
uöt32_t
 
n
, 
h
;

42 
lib√t_pblock_t
 *
p
;

43 
lib√t_vºp_hdr
 
vºp_hdr
;

45 i‡(
l
 =
NULL
)

50 
n
 = 
LIBNET_VRRP_H
 + 
∑ylﬂd_s
;

51 
h
 = 
LIBNET_VRRP_H
 + 
∑ylﬂd_s
;

57 
p
 = 
	`lib√t_pblock_¥obe
(
l
, 
±ag
, 
n
, 
LIBNET_PBLOCK_VRRP_H
);

58 i‡(
p
 =
NULL
)

63 
	`mem£t
(&
vºp_hdr
, 0, (vrrp_hdr));

64 
vºp_hdr
.
vºp_v
 = 
vîsi⁄
;

65 
vºp_hdr
.
vºp_t
 = 
ty≥
;

66 
vºp_hdr
.
vºp_vrouãr_id
 = 
vrouãr_id
;

67 
vºp_hdr
.
vºp_¥i‹ôy
 = 
¥i‹ôy
;

68 
vºp_hdr
.
vºp_ù_cou¡
 = 
ù_cou¡
;

69 
vºp_hdr
.
vºp_auth_ty≥
 = 
auth_ty≥
;

70 
vºp_hdr
.
vºp_advît_öt
 = 
advît_öt
;

71 
vºp_hdr
.
vºp_sum
 = (
sum
 ? 
	`ht⁄s
(sum) : 0);

73 i‡(
	`lib√t_pblock_≠≥nd
(
l
, 
p
, (
uöt8_t
 *)&
vºp_hdr
, 
LIBNET_VRRP_H
) == -1)

75 
bad
;

79 
	`LIBNET_DO_PAYLOAD
(
l
, 
p
);

81 i‡(
sum
 == 0)

88 
	`lib√t_pblock_£tÊags
(
p
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

90  (
±ag
 ?Öèg : 
	`lib√t_pblock_upd©e
(
l
, 
p
, 
h
, 
LIBNET_PBLOCK_VRRP_H
));

91 
bad
:

92 
	`lib√t_pblock_dñëe
(
l
, 
p
);

94 
	}
}

	@/workspaces/libnet/src/libnet_checksum.c

33 
	~"comm⁄.h
"

37 
	$lib√t_ö_cksum
(
uöt16_t
 *
addr
, 
Àn
)

39 
sum
 = 0;

42 
uöt16_t
 
s
;

43 
uöt8_t
 
b
[2];

44 } 
∑d
;

46 
sum
 = 0;

48 
Àn
 > 1)

50 
sum
 +*
addr
++;

51 
Àn
 -= 2;

54 i‡(
Àn
 == 1)

56 
∑d
.
b
[0] = *(
uöt8_t
 *)
addr
;

57 
∑d
.
b
[1] = 0;

58 
sum
 +
∑d
.
s
;

61  (
sum
);

62 
	}
}

65 
	$lib√t_toggÀ_checksum
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
, 
mode
)

67 
lib√t_pblock_t
 *
p
;

69 
p
 = 
	`lib√t_pblock_föd
(
l
, 
±ag
);

70 i‡(
p
 =
NULL
)

75 i‡(
mode
 =
LIBNET_ON
)

77 i‡((
p
->
Êags
Ë& 
LIBNET_PBLOCK_DO_CHECKSUM
)

83 (
p
->
Êags
Ë|
LIBNET_PBLOCK_DO_CHECKSUM
;

89 i‡((
p
->
Êags
Ë& 
LIBNET_PBLOCK_DO_CHECKSUM
)

91 (
p
->
Êags
Ë&~
LIBNET_PBLOCK_DO_CHECKSUM
;

99 
	}
}

101 
	$check_ù_∑ylﬂd_size
(
lib√t_t
*
l
, c⁄° 
uöt8_t
 *
ùhdr
, 
ù_hl
, 
h_Àn
, c⁄° uöt8_à* 
íd
, c⁄° * 
func
)

103 if((
ùhdr
+
ù_hl
+
h_Àn
Ë> 
íd
)

105 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

106 "%s(): i∞∑ylﬂdÇŸ insidê∑ckë (pktsz %d, iphsz %d,Öaylﬂdsz %d)", 
func
,

107 ()(
íd
 - 
ùhdr
), 
ù_hl
, 
h_Àn
);

112 
	}
}

123 
	$lib√t_do_checksum
(
lib√t_t
 *
l
, 
uöt8_t
 *
ùhdr
, 
¥Ÿocﬁ
, 
h_Àn
)

125 
uöt16_t
 
ù_Àn
 = 0;

126 
lib√t_ùv4_hdr
* 
ù4
 = (lib√t_ùv4_hd∏*)
ùhdr
;

127 
lib√t_ùv6_hdr
* 
ù6
 = (lib√t_ùv6_hd∏*)
ùhdr
;

129 if(
ù4
->
ù_v
 == 6) {

130 
ù_Àn
 = 
	`¡ohs
(
ù6
->ip_len);

132 
ù_Àn
 = 
	`¡ohs
(
ù4
->ip_len);

135  
	`lib√t_öë_checksum
(
l
, 
ùhdr
, 
¥Ÿocﬁ
, 
h_Àn
,

136 
ùhdr
, iphd∏+ 
ù_Àn


138 
	}
}

141 
	#CHECK_IP_PAYLOAD_SIZE
() do { \

142 
e
=
	`check_ù_∑ylﬂd_size
(
l
,
ùhdr
,
ù_hl
, 
h_Àn
, 
íd
, 
__func__
);\

143 if(
e
) É;\

144 } 0)

	)

155 
	$lib√t_öë_checksum
(
lib√t_t
 *
l
, 
uöt8_t
 *
ùhdr
, 
¥Ÿocﬁ
, 
h_Àn
, c⁄° uöt8_à*
beg
, c⁄° uöt8_à* 
íd
)

158 
lib√t_ùv4_hdr
 *
ùh_p
 = (lib√t_ùv4_hd∏*)
ùhdr
;

159 
lib√t_ùv6_hdr
 *
ù6h_p
 = 
NULL
;

160 
ù_hl
 = 0;

161 
sum
 = 0;

162 
uöt8_t
 
ù_nh
 = 0;

165 if(
ùhdr
 < 
beg
 || (ùhdr+(*
ùh_p
)Ë> 
íd
)

167 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

168 "%s(): ipv4 hd∏nŸ insidê∑ckë (whîê%d, sizê%d)", 
__func__
,

169 ()(
ùhdr
-
beg
), ()(
íd
-beg));

177 i‡(
ùh_p
->
ù_v
 == 6)

179 
ù6h_p
 = (
lib√t_ùv6_hdr
 *)
ùh_p
;

180 
ùh_p
 = 
NULL
;

181 
ù_hl
 = 40;

182 
ù_nh
 = 
ù6h_p
->ip_nh;

184 if((
uöt8_t
*)(
ù6h_p
+1Ë> 
íd
)

186 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

187 "%s(): ipv6 hd∏nŸ insidê∑ckë", 
__func__
);

195 
ù_nh
 !
¥Ÿocﬁ
 && (
uöt8_t
*)
ù6h_p
 + 
ù_hl
 + 1 < 
íd
)

198 
ù_nh
)

200 
IPPROTO_DSTOPTS
:

201 
IPPROTO_HOPOPTS
:

202 
IPPROTO_ROUTING
:

203 
IPPROTO_FRAGMENT
:

204 
IPPROTO_AH
:

205 
IPPROTO_ESP
:

206 
IPPROTO_MH
:

217 
ù_nh
 = *((
uöt8_t
*)
ù6h_p
+
ù_hl
);

218 
ù_hl
 +(*((
uöt8_t
*)
ù6h_p
+ip_hl+1)+1)*8;

221 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

222 "%s(): unsuµ‹ãdÉxãnsi⁄ hódî (%d)", 
__func__
, 
ù_nh
);

230 
ù_hl
 = 
ùh_p
->ip_hl << 2;

233 if((
ùhdr
+
ù_hl
Ë> 
íd
)

235 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

236 "%s(): i∞hd∏À¿nŸ insidê∑ckë", 
__func__
);

244 
¥Ÿocﬁ
)

246 
IPPROTO_TCP
:

248 
lib√t_t˝_hdr
 *
t˝h_p
 =

249 (
lib√t_t˝_hdr
 *)(
ùhdr
 + 
ù_hl
);

251 
h_Àn
 = ()(
íd
 - (
uöt8_t
*Ë
t˝h_p
);

253 
	`CHECK_IP_PAYLOAD_SIZE
();

255 #i‡(
STUPID_SOLARIS_CHECKSUM_BUG
)

256 
t˝h_p
->
th_sum
 =Å˝h_p->
th_off
 << 2;

259 #i‡(
HAVE_HPUX11
)

260 i‡(
l
->
öje˘i⁄_ty≥
 !
LIBNET_LINK
)

266 
t˝h_p
->
th_sum
 = (t˝h_p->
th_off
 << 2) +

267 (
h_Àn
 - (
t˝h_p
->
th_off
 << 2));

278 
t˝h_p
->
th_sum
 = 0;

279 i‡(
ù6h_p
)

281 
sum
 = 
	`lib√t_ö_cksum
((
uöt16_t
 *)&
ù6h_p
->
ù_§c
, 32);

286 
sum
 = 
	`lib√t_ö_cksum
((
uöt16_t
 *)&
ùh_p
->
ù_§c
, 8);

288 
sum
 +
	`¡ohs
(
IPPROTO_TCP
 + 
h_Àn
);

289 
sum
 +
	`lib√t_ö_cksum
((
uöt16_t
 *)
t˝h_p
, 
h_Àn
);

290 
t˝h_p
->
th_sum
 = 
	`LIBNET_CKSUM_CARRY
(
sum
);

292 
	`¥ötf
("tcp sum calculated: %#x/%d h_len %d\n",

293 
	`¡ohs
(
t˝h_p
->
th_sum
),

294 
	`¡ohs
(
t˝h_p
->
th_sum
),

295 
h_Àn


300 
IPPROTO_UDP
:

302 
lib√t_udp_hdr
 *
udph_p
 =

303 (
lib√t_udp_hdr
 *)(
ùhdr
 + 
ù_hl
);

305 
h_Àn
 = ()(
íd
 - (
uöt8_t
*Ë
udph_p
);

307 
	`CHECK_IP_PAYLOAD_SIZE
();

309 
udph_p
->
uh_sum
 = 0;

310 i‡(
ù6h_p
)

312 
sum
 = 
	`lib√t_ö_cksum
((
uöt16_t
 *)&
ù6h_p
->
ù_§c
, 32);

316 
sum
 = 
	`lib√t_ö_cksum
((
uöt16_t
 *)&
ùh_p
->
ù_§c
, 8);

318 
sum
 +
	`¡ohs
(
IPPROTO_UDP
 + 
h_Àn
);

319 
sum
 +
	`lib√t_ö_cksum
((
uöt16_t
 *)
udph_p
, 
h_Àn
);

320 
udph_p
->
uh_sum
 = 
	`LIBNET_CKSUM_CARRY
(
sum
);

323 
IPPROTO_ICMP
:

325 
lib√t_icmpv4_hdr
 *
icmph_p
 =

326 (
lib√t_icmpv4_hdr
 *)(
ùhdr
 + 
ù_hl
);

328 
h_Àn
 = ()(
íd
 - (
uöt8_t
*Ë
icmph_p
);

330 
	`CHECK_IP_PAYLOAD_SIZE
();

332 
icmph_p
->
icmp_sum
 = 0;

336 i‡(
ù6h_p
)

338 
sum
 = 
	`lib√t_ö_cksum
((
uöt16_t
 *)&
ù6h_p
->
ù_§c
, 32);

339 
sum
 +
	`¡ohs
(
IPPROTO_ICMP6
 + 
h_Àn
);

341 
sum
 +
	`lib√t_ö_cksum
((
uöt16_t
 *)
icmph_p
, 
h_Àn
);

342 
icmph_p
->
icmp_sum
 = 
	`LIBNET_CKSUM_CARRY
(
sum
);

345 
IPPROTO_ICMPV6
:

347 
lib√t_icmpv6_hdr
 *
icmph_p
 =

348 (
lib√t_icmpv6_hdr
 *)(
ùhdr
 + 
ù_hl
);

350 
h_Àn
 = ()(
íd
 - (
uöt8_t
*Ë
icmph_p
);

352 
	`CHECK_IP_PAYLOAD_SIZE
();

354 
icmph_p
->
icmp_sum
 = 0;

355 i‡(
ù6h_p
)

357 
sum
 = 
	`lib√t_ö_cksum
((
uöt16_t
 *)&
ù6h_p
->
ù_§c
, 32);

358 
sum
 +
	`¡ohs
(
IPPROTO_ICMP6
 + 
h_Àn
);

360 
sum
 +
	`lib√t_ö_cksum
((
uöt16_t
 *)
icmph_p
, 
h_Àn
);

361 
icmph_p
->
icmp_sum
 = 
	`LIBNET_CKSUM_CARRY
(
sum
);

364 
IPPROTO_IGMP
:

366 
lib√t_igmp_hdr
 *
igmph_p
 =

367 (
lib√t_igmp_hdr
 *)(
ùhdr
 + 
ù_hl
);

369 
h_Àn
 = ()(
íd
 - (
uöt8_t
*Ë
igmph_p
);

371 
	`CHECK_IP_PAYLOAD_SIZE
();

373 
igmph_p
->
igmp_sum
 = 0;

374 
sum
 = 
	`lib√t_ö_cksum
((
uöt16_t
 *)
igmph_p
, 
h_Àn
);

375 
igmph_p
->
igmp_sum
 = 
	`LIBNET_CKSUM_CARRY
(
sum
);

378 
IPPROTO_GRE
:

383 
lib√t_gª_hdr
 *
gªh_p
 =

384 (
lib√t_gª_hdr
 *)(
ùhdr
 + 
ù_hl
);

385 
uöt16_t
 
fv
 = 
	`¡ohs
(
gªh_p
->
Êags_vî
);

387 
	`CHECK_IP_PAYLOAD_SIZE
();

389 i‡(!(
fv
 & (
GRE_CSUM
|
GRE_ROUTING
 | 
GRE_VERSION_0
)) ||

390 !(
fv
 & (
GRE_CSUM
|
GRE_VERSION_1
)))

392 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

393 "%s(): c™'àcompuã GRE checksum (wr⁄g fœgs_vî bôs: 0x%x )", 
__func__
, 
fv
);

396 
sum
 = 
	`lib√t_ö_cksum
((
uöt16_t
 *)
gªh_p
, 
h_Àn
);

397 
gªh_p
->
gª_sum
 = 
	`LIBNET_CKSUM_CARRY
(
sum
);

400 
IPPROTO_OSPF
:

402 
lib√t_o•f_hdr
 *
oh_p
 =

403 (
lib√t_o•f_hdr
 *)(
ùhdr
 + 
ù_hl
);

405 
	`CHECK_IP_PAYLOAD_SIZE
();

407 
oh_p
->
o•f_sum
 = 0;

408 
sum
 +
	`lib√t_ö_cksum
((
uöt16_t
 *)
oh_p
, 
h_Àn
);

409 
oh_p
->
o•f_sum
 = 
	`LIBNET_CKSUM_CARRY
(
sum
);

412 
IPPROTO_OSPF_LSA
:

414 
lib√t_o•f_hdr
 *
oh_p
 =

415 (
lib√t_o•f_hdr
 *)(
ùhdr
 + 
ù_hl
);

416 
lib√t_lß_hdr
 *
lß_p
 =

417 (
lib√t_lß_hdr
 *)(
ùhdr
 +

418 
ù_hl
 + 
oh_p
->
o•f_Àn
);

421 
lß_p
->
lß_sum
 = 0;

422 
sum
 +
	`lib√t_ö_cksum
((
uöt16_t
 *)
lß_p
, 
h_Àn
);

423 
lß_p
->
lß_sum
 = 
	`LIBNET_CKSUM_CARRY
(
sum
);

429 
c0
, 
c1
;

430 
lib√t_lß_hdr
 *
lß_p
 = (lib√t_lß_hd∏*)
buf
;

431 
uöt8_t
 *
p
, *
p1
, *
p2
, *
p3
;

433 
c0
 = 0;

434 
c1
 = 0;

436 
lß_p
->
lß_cksum
 = 0;

438 
p
 = 
buf
;

439 
p1
 = 
buf
;

440 
p3
 = 
buf
 + 
Àn
;

442 
p1
 < 
p3
)

444 
p2
 = 
p1
 + 
LIBNET_MODX
;

445 i‡(
p2
 > 
p3
)

447 
p2
 = 
p3
;

450 
p
 = 
p1
;Ö < 
p2
;Ö++)

452 
c0
 +(*
p
);

453 
c1
 +
c0
;

456 
c0
 %= 255;

457 
c1
 %= 255;

459 
p1
 = 
p2
;

462 #i‡
AWR_PLEASE_REWORK_THIS


463 
lß_p
->
lß_cksum
[0] = (((
Àn
 - 17Ë* 
c0
 - 
c1
) % 255);

464 i‡(
lß_p
->
lß_cksum
[0] <= 0)

466 
lß_p
->
lß_cksum
[0] += 255;

469 
lß_p
->
lß_cksum
[1] = (510 - 
c0
 -Üsa_p->lsa_cksum[0]);

470 i‡(
lß_p
->
lß_cksum
[1] > 255)

472 
lß_p
->
lß_cksum
[1] -= 255;

478 
IPPROTO_IP
:

480 if(!
ùh_p
) {

483 
ùh_p
->
ù_sum
 = 0;

484 
sum
 = 
	`lib√t_ö_cksum
((
uöt16_t
 *)
ùh_p
, 
ù_hl
);

485 
ùh_p
->
ù_sum
 = 
	`LIBNET_CKSUM_CARRY
(
sum
);

489 
IPPROTO_VRRP
:

491 
lib√t_vºp_hdr
 *
vºph_p
 =

492 (
lib√t_vºp_hdr
 *)(
ùhdr
 + 
ù_hl
);

493 
	`CHECK_IP_PAYLOAD_SIZE
();

495 
vºph_p
->
vºp_sum
 = 0;

496 
sum
 = 
	`lib√t_ö_cksum
((
uöt16_t
 *)
vºph_p
, 
h_Àn
);

497 
vºph_p
->
vºp_sum
 = 
	`LIBNET_CKSUM_CARRY
(
sum
);

500 
LIBNET_PROTO_CDP
:

503 
lib√t_cdp_hdr
 *
cdph_p
 =

504 (
lib√t_cdp_hdr
 *)
ùhdr
;

506 if((
ùhdr
+
h_Àn
Ë> 
íd
)

508 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

509 "%s(): cd∞∑ylﬂdÇŸ insidê∑ckë", 
__func__
);

513 
cdph_p
->
cdp_sum
 = 0;

514 
sum
 = 
	`lib√t_ö_cksum
((
uöt16_t
 *)
cdph_p
, 
h_Àn
);

515 
cdph_p
->
cdp_sum
 = 
	`LIBNET_CKSUM_CARRY
(
sum
);

518 
LIBNET_PROTO_ISL
:

521 
lib√t_i¶_hdr
 *
i¶h_p
 =

522 (
lib√t_i¶_hdr
 *)
buf
;

531 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

532 "%s(): unsuµ‹ãdÖrŸocﬁ %d", 
__func__
, 
¥Ÿocﬁ
);

537 
	}
}

540 
uöt16_t


541 
	$lib√t_ù_check
(
uöt16_t
 *
addr
, 
Àn
)

543 
sum
;

545 
sum
 = 
	`lib√t_ö_cksum
(
addr
, 
Àn
);

546  (
	`LIBNET_CKSUM_CARRY
(
sum
));

547 
	}
}

	@/workspaces/libnet/src/libnet_cq.c

34 
	~"comm⁄.h
"

37 
lib√t_cq_t
 *
lib√t_cq_föd_öã∫Æ
(
lib√t_t
 *);

38 
lib√t_cq_dup_check
(
lib√t_t
 *, *);

39 
lib√t_cq_t
 *
lib√t_cq_föd_by_œbñ_öã∫Æ
(*
œbñ
);

42 
lib√t_cq_t
 *
	gl_cq
 = 
NULL
;

43 
lib√t_cqd_t
 
	gl_cqd
 = {0, 
CQ_LOCK_UNLOCKED
, 
NULL
};

47 
	$£t_cq_lock
(
uöt32_t
 
x
)

49 i‡(
	`check_cq_lock
(
x
))

54 
l_cqd
.
cq_lock
 |
x
;

56 
	}
}

59 
	$˛ór_cq_lock
(
uöt32_t
 
x
)

61 i‡(!
	`check_cq_lock
(
x
))

66 
l_cqd
.
cq_lock
 &~
x
;

68 
	}
}

71 
	$lib√t_cq_add
(
lib√t_t
 *
l
, *
œbñ
)

73 
lib√t_cq_t
 *
√w_cq
;

75 i‡(
l
 =
NULL
)

81 i‡(
	`cq_is_wlocked
())

83 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

84 "%s(): c™'àadd, c⁄ãxàqueuêi†wrôêlocked", 
__func__
);

89 i‡(
œbñ
 =
NULL
)

91 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s():ÉmptyÜabel",

92 
__func__
);

97 i‡(
l_cq
 =
NULL
)

99 
l_cq
 = (
lib√t_cq_t
 *)
	`mÆloc
( (libnet_cq_t));

100 i‡(
l_cq
 =
NULL
)

102 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

104 
__func__
, 
	`°ªº‹
(
î∫o
));

108 
l_cq
->
c⁄ãxt
 = 
l
;

111 
	`°∫˝y
(
l
->
œbñ
,Üabñ, 
LIBNET_LABEL_SIZE
);

112 
l
->
œbñ
[
LIBNET_LABEL_SIZE
 - 1] = '\0';

114 
l_cq
->
√xt
 = 
NULL
;

115 
l_cq
->
¥ev
 = 
NULL
;

118 
l_cqd
.
node
 = 1;

124 i‡(
	`lib√t_cq_dup_check
(
l
, 
œbñ
))

130 
√w_cq
 = (
lib√t_cq_t
 *)
	`mÆloc
( (libnet_cq_t));

131 i‡(
√w_cq
 =
NULL
)

133 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

135 
__func__
, 
	`°ªº‹
(
î∫o
));

139 
√w_cq
->
c⁄ãxt
 = 
l
;

142 
	`°∫˝y
(
l
->
œbñ
,Üabñ, 
LIBNET_LABEL_SIZE
);

143 
l
->
œbñ
[
LIBNET_LABEL_SIZE
 -1] = '\0';

145 
√w_cq
->
√xt
 = 
l_cq
;

146 
√w_cq
->
¥ev
 = 
NULL
;

148 
l_cq
->
¥ev
 = 
√w_cq
;

149 
l_cq
 = 
√w_cq
;

152 
l_cqd
.
node
++;

155 
	}
}

157 
lib√t_t
 *

158 
	$lib√t_cq_ªmove
(
lib√t_t
 *
l
)

160 
lib√t_cq_t
 *
p
;

161 
lib√t_t
 *
ªt
;

163 i‡(
l_cq
 =
NULL
)

165 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

166 "%s(): c™'àªmovê‰omÉm±y c⁄ãxàqueue", 
__func__
);

167  (
NULL
);

170 i‡(
l
 =
NULL
)

172 (
NULL
);

176 i‡(
	`cq_is_wlocked
())

178 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

180 
__func__
);

181  (
NULL
);

184 i‡((
p
 = 
	`lib√t_cq_föd_öã∫Æ
(
l
)Ë=
NULL
)

186 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

187 "%s(): c⁄ãxànŸÖª£¡ i¿c⁄ãxàqueue", 
__func__
);

188  (
NULL
);

191 i‡(
p
->
¥ev
)

193 
p
->
¥ev
->
√xt
 =Ö->next;

197 
l_cq
 = 
p
->
√xt
;

199 i‡(
p
->
√xt
)

201 
p
->
√xt
->
¥ev
 =Ö->prev;

204 
ªt
 = 
p
->
c⁄ãxt
;

205 
	`‰ì
(
p
);

208 
l_cqd
.
node
--;

210  (
ªt
);

211 
	}
}

213 
lib√t_t
 *

214 
	$lib√t_cq_ªmove_by_œbñ
(*
œbñ
)

216 
lib√t_cq_t
 *
p
;

217 
lib√t_t
 *
ªt
;

219 i‡((
p
 = 
	`lib√t_cq_föd_by_œbñ_öã∫Æ
(
œbñ
)Ë=
NULL
)

222  (
NULL
);

225 i‡(
	`cq_is_wlocked
())

228  (
NULL
);

231 i‡(
p
->
¥ev
)

233 
p
->
¥ev
->
√xt
 =Ö->next;

237 
l_cq
 = 
p
->
√xt
;

239 i‡(
p
->
√xt
)

241 
p
->
√xt
->
¥ev
 =Ö->prev;

244 
ªt
 = 
p
->
c⁄ãxt
;

245 
	`‰ì
(
p
);

248 
l_cqd
.
node
--;

250  (
ªt
);

251 
	}
}

253 
lib√t_cq_t
 *

254 
	$lib√t_cq_föd_öã∫Æ
(
lib√t_t
 *
l
)

256 
lib√t_cq_t
 *
p
;

258 
p
 = 
l_cq
;Ö;Ö =Ö->
√xt
)

260 i‡(
p
->
c⁄ãxt
 =
l
)

262  (
p
);

265  (
NULL
);

266 
	}
}

269 
	$lib√t_cq_dup_check
(
lib√t_t
 *
l
, *
œbñ
)

271 
lib√t_cq_t
 *
p
;

273 
p
 = 
l_cq
;Ö;Ö =Ö->
√xt
)

275 i‡(
p
->
c⁄ãxt
 =
l
)

277 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

278 "%s(): c⁄ãxàÆªady i¿c⁄ãxàqueue", 
__func__
);

281 i‡(
	`°∫cmp
(
p
->
c⁄ãxt
->
œbñ
,Üabñ, 
LIBNET_LABEL_SIZE
) == 0)

283 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

284 "%s(): du∂iˇãÜabñ %s", 
__func__
, 
œbñ
);

290 
	}
}

292 
lib√t_cq_t
 *

293 
	$lib√t_cq_föd_by_œbñ_öã∫Æ
(*
œbñ
)

295 
lib√t_cq_t
 *
p
;

297 i‡(
œbñ
 =
NULL
)

299  (
NULL
);

302 
p
 = 
l_cq
;Ö;Ö =Ö->
√xt
)

304 i‡(!
	`°∫cmp
(
p
->
c⁄ãxt
->
œbñ
,Üabñ, 
LIBNET_LABEL_SIZE
))

306  (
p
);

309  (
NULL
);

310 
	}
}

312 
lib√t_t
 *

313 
	$lib√t_cq_föd_by_œbñ
(*
œbñ
)

315 
lib√t_cq_t
 *
p
;

317 
p
 = 
	`lib√t_cq_föd_by_œbñ_öã∫Æ
(
œbñ
);

318  (
p
 ?Ö->
c⁄ãxt
 : 
NULL
);

319 
	}
}

322 
	$lib√t_cq_gëœbñ
(
lib√t_t
 *
l
)

324  (
l
->
œbñ
);

325 
	}
}

328 
	$lib√t_cq_de°roy
()

330 
lib√t_cq_t
 *
p
 = 
l_cq
;

331 
lib√t_cq_t
 *
tmp
;

333 
p
)

335 
tmp
 = 
p
;

336 
p
 =Ö->
√xt
;

337 
	`lib√t_de°roy
(
tmp
->
c⁄ãxt
);

338 
	`‰ì
(
tmp
);

340 
l_cq
 = 
NULL
;

341 
	`mem£t
(&
l_cqd
, 0, (l_cqd));

342 
	}
}

344 
lib√t_t
 *

345 
	$lib√t_cq_hód
()

347 i‡(
l_cq
 =
NULL
)

349  (
NULL
);

352 i‡(!
	`£t_cq_lock
(
CQ_LOCK_WRITE
))

354  (
NULL
);

357 
l_cqd
.
cuºít
 = 
l_cq
;

358  (
l_cqd
.
cuºít
->
c⁄ãxt
);

359 
	}
}

362 
	$lib√t_cq_œ°
()

364 i‡(
l_cqd
.
cuºít
)

372 
	}
}

374 
lib√t_t
 *

375 
	$lib√t_cq_√xt
()

377 i‡(
l_cqd
.
cuºít
 =
NULL
)

379  (
NULL
);

382 
l_cqd
.
cuºít
 =Ü_cqd.cuºít->
√xt
;

383  (
l_cqd
.
cuºít
 ?Ü_cqd.cuºít->
c⁄ãxt
 : 
NULL
);

384 
	}
}

386 
uöt32_t


387 
	$lib√t_cq_size
()

389  (
l_cqd
.
node
);

390 
	}
}

392 
uöt32_t


393 
	$lib√t_cq_íd_lo›
()

395 i‡(! 
	`˛ór_cq_lock
(
CQ_LOCK_WRITE
))

399 
l_cqd
.
cuºít
 = 
l_cq
;

401 
	}
}

	@/workspaces/libnet/src/libnet_crc.c

33 
	~"comm⁄.h
"

36 
uöt32_t
 
	g¸c_èbÀ
[256] =

90 
uöt32_t


91 
	$lib√t_compuã_¸c
(
uöt8_t
 *
buf
, 
uöt32_t
 
Àn
)

93 
uöt32_t
 
vÆ
;

95 
vÆ
 = ~0;

96 
Àn
--)

98 
vÆ
 = 
¸c_èbÀ
[(vÆ ^ *
buf
) & 0xff] ^ (val >> 0x08);

99 
buf
++;

101  (~
vÆ
);

102 
	}
}

	@/workspaces/libnet/src/libnet_dll.c

32 
	~"comm⁄.h
"

33 
	~"∑ckë32.h
"

35 
BOOL
 
WINAPI
 
	$DŒMaö
(
HINSTANCE
 
hö°
, 
ULONG
 
fdwRós⁄
, 
LPVOID
 
ÕRe£rved
)

37 
fdwRós⁄
)

39 
DLL_PROCESS_ATTACH
:

41 
DLL_PROCESS_DETACH
:

44  (
TRUE
);

45 
	}
}

	@/workspaces/libnet/src/libnet_error.c

33 
	~"comm⁄.h
"

36 
	$lib√t_gëîr‹
(
lib√t_t
 *
l
)

38 i‡(
l
 =
NULL
)

40  (
NULL
);

43  (
l
->
îr_buf
);

44 
	}
}

	@/workspaces/libnet/src/libnet_if_addr.c

33 
	~"comm⁄.h
"

35 #ifde‡
HAVE_SYS_SOCKIO_H


36 
	~<sys/sockio.h
>

39 #ifde‡
HAVE_SYS_IOCTL_H


40 
	~<sys/io˘l.h
>

43 #ifde‡
HAVE_NET_IF_H


44 
	~<√t/if.h
>

47 
	~"../ö˛ude/iÁddæi°.h
"

49 
	#MAX_IPADDR
 512

	)

51 #i‡!(
__WIN32__
)

58 
	$lib√t_check_iÁ˚
(
lib√t_t
 *
l
)

60 
i‰eq
 
i‰
;

61 
fd
, 
ªs
;

63 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

64 i‡(
fd
 < 0)

66 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(Ësockë: %s", 
__func__
,

67 
	`°ªº‹
(
î∫o
));

71 
	`°∫˝y
(
i‰
.
i‰_«me
, 
l
->
devi˚
, (ifr.ifr_name) -1);

72 
i‰
.
i‰_«me
[(ifr.ifr_name) - 1] = '\0';

74 
ªs
 = 
	`io˘l
(
fd
, 
SIOCGIFFLAGS
, (
öt8_t
 *)&
i‰
);

75 i‡(
ªs
 < 0)

77 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(Ëio˘l: %s", 
__func__
,

78 
	`°ªº‹
(
î∫o
));

82 i‡((
i‰
.
i‰_Êags
 & 
IFF_UP
) == 0)

84 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): %s is down",

85 
__func__
, 
l
->
devi˚
);

86 
ªs
 = -1;

89 
	`˛o£
(
fd
);

91  (
ªs
);

92 
	}
}

96 #i‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__löux__
)

97 
	~<sys/ty≥s.h
>

98 #ifde‡
__O≥nBSD__


99 
	~<sys/sockë.h
>

101 
	~<iÁddrs.h
>

104 
	$lib√t_iÁddæi°
(
lib√t_iÁddr_li°
 **
ùaddΩ
, *
dev
, *
îrbuf
)

106 ()
dev
;

107 
lib√t_iÁddr_li°
 
iÁddæi°
[
MAX_IPADDR
];

108 
iÁddrs
 *
iÁp
, *
iÁ
;

109 
i
 = 0;

110 
	`mem£t
 (
iÁddæi°
, 0 , (ifaddrlist));

112 i‡(
	`gëiÁddrs
(&
iÁp
) != 0)

114 
	`¢¥ötf
(
îrbuf
, 
LIBNET_ERRBUF_SIZE
, "%s(): getifaddrs: %s",

115 
__func__
, 
	`°ªº‹
(
î∫o
));

118 
iÁ
 = 
iÁp
; iÁ; iÁ = iÁ->
iÁ_√xt
)

120 i‡(
iÁ
->
iÁ_Êags
 & 
IFF_LOOPBACK
 || iÁ->
iÁ_addr
 =
NULL
)

123 i‡(
iÁ
->
iÁ_addr
->
ß_Ámûy
 =
AF_INET
 )

125 
iÁddæi°
[
i
].
devi˚
 = 
	`°rdup
(
iÁ
->
iÁ_«me
);

126 i‡(
iÁddæi°
[
i
].
devi˚
 =
NULL
) {

127 
	`¢¥ötf
(
îrbuf
, 
LIBNET_ERRBUF_SIZE
, "%s(): OOM", 
__func__
);

130 
iÁddæi°
[
i
].
addr
 = ((
sockaddr_ö
 *)
iÁ
->
iÁ_addr
)->
sö_addr
.
s_addr
;

131 ++
i
;

135 
	`‰ìiÁddrs
(
iÁp
);

136 *
ùaddΩ
 = 
iÁddæi°
;

137  (
i
);

138 
	}
}

142 #i‡!(
__WIN32__
)

149 #ifde‡
HAVE_SOCKADDR_SA_LEN


150 
	#NEXTIFR
(
i
) \

151 ((
i‰eq
 *)((
u_ch¨
 *)&
i
->
i‰_addr
 + i->i‰_addr.
ß_Àn
))

	)

153 
	#NEXTIFR
(
i
Ë(ò+ 1)

	)

156 #i‚de‡
BUFSIZE


157 
	#BUFSIZE
 2048

	)

160 #ifde‡
HAVE_LINUX_PROCFS


161 
	#PROC_DEV_FILE
 "/¥oc/√t/dev"

	)

165 
	$lib√t_iÁddæi°
(
lib√t_iÁddr_li°
 **
ùaddΩ
, *
dev
, *
îrbuf
)

167 
lib√t_iÁddr_li°
 *
Æ
;

168 
i‰eq
 *
i‰
, *
li‰
, *
pi‰
, 
ni‰
;

169 
devi˚
[(
ni‰
.
i‰_«me
)];

170 
lib√t_iÁddr_li°
 
iÁddæi°
[
MAX_IPADDR
];

172 *
p
;

173 
ifc⁄f
 
ifc
;

174 
i‰eq
 
ibuf
[
MAX_IPADDR
];

175 
fd
, 
nùaddr
;

177 #ifde‡
HAVE_LINUX_PROCFS


178 
FILE
 *
Â
;

179 
buf
[2048];

182 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

183 i‡(
fd
 < 0)

185 
	`¢¥ötf
(
îrbuf
, 
LIBNET_ERRBUF_SIZE
, "%s(): socketÉrror: %s",

186 
__func__
, 
	`°ªº‹
(
î∫o
));

190 #ifde‡
HAVE_LINUX_PROCFS


191 
Â
 = 
	`f›í
(
PROC_DEV_FILE
, "r");

192 i‡(!
Â
)

194 
	`¢¥ötf
(
îrbuf
, 
LIBNET_ERRBUF_SIZE
,

195 "%s(): f›í’roc_dev_fûeËÁûed: %s", 
__func__
,

196 
	`°ªº‹
(
î∫o
));

197 
bad
;

201 
	`mem£t
(&
ifc
, 0, (ifc));

202 
ifc
.
ifc_Àn
 = (
ibuf
);

203 
ifc
.
ifc_buf
 = (
ˇddr_t
)
ibuf
;

205 i‡(
	`io˘l
(
fd
, 
SIOCGIFCONF
, &
ifc
) < 0)

207 
	`¢¥ötf
(
îrbuf
, 
LIBNET_ERRBUF_SIZE
,

209 
__func__
, 
	`°ªº‹
(
î∫o
));

210 
bad
;

213 
pi‰
 = 
NULL
;

214 
li‰
 = (
i‰eq
 *)&
ifc
.
ifc_buf
[ifc.
ifc_Àn
];

216 
Æ
 = 
iÁddæi°
;

217 
nùaddr
 = 0;

219 #ifde‡
HAVE_LINUX_PROCFS


220 
	`fgës
(
buf
, (buf), 
Â
))

222 
p
 = 
	`°rchr
(
buf
, ':');

223 i‡(!
p
)

226 *
p
 = '\0';

227 
p
 = 
buf
; *p == ' ';Ö++)

230 
	`°∫˝y
(
ni‰
.
i‰_«me
, 
p
, (nifr.ifr_name) - 1);

231 
ni‰
.
i‰_«me
[(nifr.ifr_name) - 1] = '\0';

235 
i‰
 = 
ifc
.
ifc_ªq
; i‰ < 
li‰
; i‰ = 
	`NEXTIFR
(ifr))

238 
p
 = 
	`°rchr
(
i‰
->
i‰_«me
, ':');

239 i‡(
p
)

240 *
p
 = '\0';

242 i‡(
pi‰
 && 
	`°rcmp
(
i‰
->
i‰_«me
,Öifr->ifr_name) == 0)

245 
	`°∫˝y
(
ni‰
.
i‰_«me
, 
i‰
->ifr_name, (nifr.ifr_name) - 1);

246 
ni‰
.
i‰_«me
[(nifr.ifr_name) - 1] = '\0';

250 
	`°∫˝y
(
devi˚
, 
ni‰
.
i‰_«me
, (device) - 1);

251 
devi˚
[(device) - 1] = '\0';

253 i‡(
	`io˘l
(
fd
, 
SIOCGIFFLAGS
, &
ni‰
) < 0)

255 
pi‰
 = 
i‰
;

258 i‡((
ni‰
.
i‰_Êags
 & 
IFF_UP
) == 0)

260 
pi‰
 = 
i‰
;

264 i‡(
dev
 =
NULL
 && 
	`LIBNET_ISLOOPBACK
(&
ni‰
))

266 
pi‰
 = 
i‰
;

270 
	`°∫˝y
(
ni‰
.
i‰_«me
, 
devi˚
, (device) - 1);

271 
ni‰
.
i‰_«me
[(nifr.ifr_name) - 1] = '\0';

272 i‡(
	`io˘l
(
fd
, 
SIOCGIFADDR
, (
öt8_t
 *)&
ni‰
) < 0)

274 i‡(
î∫o
 !
EADDRNOTAVAIL
)

276 
	`¢¥ötf
(
îrbuf
, 
LIBNET_ERRBUF_SIZE
,

277 "%s(): SIOCGIFADDR: dev=%s: %s", 
__func__
, 
devi˚
,

278 
	`°ªº‹
(
î∫o
));

279 
bad
;

283 
Æ
->
addr
 = 0;

288 
Æ
->
addr
 = ((
sockaddr_ö
 *)&
ni‰
.
i‰_addr
)->
sö_addr
.
s_addr
;

291 
	`‰ì
(
Æ
->
devi˚
);

293 
Æ
->
devi˚
 = 
	`°rdup
(device);

294 i‡(
Æ
->
devi˚
 =
NULL
)

296 
	`¢¥ötf
(
îrbuf
, 
LIBNET_ERRBUF_SIZE
,

297 "%s(): sådu∞nŸÉnough mem‹y", 
__func__
);

298 
bad
;

301 ++
Æ
;

302 ++
nùaddr
;

304 #i‚de‡
HAVE_LINUX_PROCFS


305 
pi‰
 = 
i‰
;

310 #ifde‡
HAVE_LINUX_PROCFS


311 i‡(
	`„º‹
(
Â
))

313 
	`¢¥ötf
(
îrbuf
, 
LIBNET_ERRBUF_SIZE
,

314 "%s(): fîr‹: %s", 
__func__
, 
	`°ªº‹
(
î∫o
));

315 
bad
;

317 
	`f˛o£
(
Â
);

320 
	`˛o£
(
fd
);

321 *
ùaddΩ
 = 
iÁddæi°
;

323  (
nùaddr
);

325 
bad
:

326 #ifde‡
HAVE_LINUX_PROCFS


327 i‡(
Â
)

328 
	`f˛o£
(
Â
);

330 
	`˛o£
(
fd
);

332 
	}
}

338 
	#IPTOSBUFFERS
 12

	)

339 
öt8_t
 *
	$ùtos
(
uöt32_t
 
ö
)

341 
öt8_t
 
ouçut
[
IPTOSBUFFERS
][ 3 * 4 + 3 + 1];

342 
öt16_t
 
which
;

343 
uöt8_t
 *
p
;

345 
p
 = (
uöt8_t
 *)&
ö
;

346 
which
 = (which + 1 =
IPTOSBUFFERS
 ? 0 : which + 1);

347 
	`¢¥ötf
(
ouçut
[
which
], 
IPTOSBUFFERS
, "%d.%d.%d.%d",

348 
p
[0],Ö[1],Ö[2],Ö[3]);

349  
ouçut
[
which
];

350 
	}
}

353 
	$lib√t_iÁddæi°
(
lib√t_iÁddr_li°
 **
ùaddΩ
, *
dev_unu£d
, *
îrbuf
)

355 
nùaddr
 = 0;

356 
i
 = 0;

357 
lib√t_iÁddr_li°
 
iÁddæi°
[
MAX_IPADDR
];

358 
pˇp_if_t
 *
devli°
 = 
NULL
;

359 
pˇp_if_t
 *
dev
 = 
NULL
;

360 
öt8_t
 
îr
[
PCAP_ERRBUF_SIZE
];

363 i‡(
	`pˇp_födÆldevs
(&
devli°
, 
îr
) == -1)

365 
	`¢¥ötf
(
îrbuf
, 
LIBNET_ERRBUF_SIZE
,

366 "%s():Éº‹ i¿pˇp_födÆldevs: %s", 
__func__
, 
îr
);

370 
dev
 = 
devli°
; dev; dev = dev->
√xt
)

372 
pˇp_addr
* 
pˇ∑ddr
;

373 
pˇ∑ddr
 = 
dev
->
addªs£s
;Öˇ∑ddr;Öˇ∑dd∏pˇ∑ddr->
√xt
) {

374 
sockaddr
* 
addr
 = 
pˇ∑ddr
->addr;

376 
	`¥ötf
("i‡«mê'%s' des¸ùti⁄ '%s'Üo›? %d\n", 
dev
->
«me
, dev->
des¸ùti⁄
, dev->
Êags
);

378 
p
[
NI_MAXHOST
] = "";

379 
sz
 = (
sockaddr_°‹age
);

380 
r
;

381 
r
 = 
	`gë«meöfo
(
addr
, 
sz
, 
p
, ’), 
NULL
,0, 
NI_NUMERICHOST
);

382 
	`¥ötf
("ádd∏%s\n", 
r
 ? 
	`gai_°ªº‹
‘Ë: 
p
);

386 i‡(
dev
->
Êags
 & 
PCAP_IF_LOOPBACK
)

391 i‡(
addr
->
ß_Ámûy
 =
AF_INET
) {

392 
iÁddæi°
[
i
].
devi˚
 = 
	`°rdup
(
dev
->
«me
);

393 
iÁddæi°
[
i
].
addr
 = ((
sockaddr_ö
 *Ôddr)->
sö_addr
.
s_addr
;

394 ++
i
;

395 ++
nùaddr
;

400 
	`pˇp_‰ìÆldevs
(
devli°
);

402 *
ùaddΩ
 = 
iÁddæi°
;

404  
nùaddr
;

405 
	}
}

411 
	$lib√t_£À˘_devi˚
(
lib√t_t
 *
l
)

413 
c
, 
i
;

414 
lib√t_iÁddr_li°
 *
addªss_li°
, *
Æ
;

415 
uöt32_t
 
addr
;

418 i‡(
l
 =
NULL
)

423 i‡(
l
->
devi˚
 && !
	`isdigô
(l->device[0]))

425 #i‡!(
__WIN32__
)

426 i‡(
	`lib√t_check_iÁ˚
(
l
) < 0)

438 
c
 = 
	`lib√t_iÁddæi°
(&
addªss_li°
, 
l
->
devi˚
,Ü->
îr_buf
);

439 i‡(
c
 < 0)

443 i‡(
c
 == 0)

445 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

446 "%s():Çÿ√tw‹k i¡îÁ˚ found", 
__func__
);

450 
Æ
 = 
addªss_li°
;

451 i‡(
l
->
devi˚
)

453 
addr
 = 
	`lib√t_«me2addr4
(
l
,Ü->
devi˚
, 
LIBNET_DONT_RESOLVE
);

455 
i
 = 
c
; i; --i, ++
addªss_li°
)

458 0 =
	`°rcmp
(
l
->
devi˚
, 
addªss_li°
->device)

460 
addªss_li°
->
addr
 ==áddr

464 
	`‰ì
(
l
->
devi˚
);

465 
l
->
devi˚
 = 
	`°rdup
(
addªss_li°
->device);

466 
good
;

469 i‡(
i
 <= 0)

471 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

472 "%s(): c™'àföd i¡îÁ˚ f‹ IP %s", 
__func__
,

473 
l
->
devi˚
);

474 
bad
;

479 
l
->
devi˚
 = 
	`°rdup
(
addªss_li°
->device);

482 
good
:

483 
i
 = 0; i < 
c
; i++)

485 
	`‰ì
(
Æ
[
i
].
devi˚
);

486 
Æ
[
i
].
devi˚
 = 
NULL
;

490 
bad
:

491 
i
 = 0; i < 
c
; i++)

493 
	`‰ì
(
Æ
[
i
].
devi˚
);

494 
Æ
[
i
].
devi˚
 = 
NULL
;

497 
	}
}

	@/workspaces/libnet/src/libnet_init.c

33 
	~"comm⁄.h
"

35 
lib√t_t
 *

36 
	$lib√t_öô
(
öje˘i⁄_ty≥
, c⁄° *
devi˚
, *
îr_buf
)

38 
lib√t_t
 *
l
 = 
NULL
;

40 #i‡
	`deföed
(
__WIN32__
)

41 
WSADATA
 
wßD©a
;

43 i‡((
	`WSASèπup
(0x0202, &
wßD©a
)) != 0)

45 
	`¢¥ötf
(
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

46 "%s(): u«bÀÅÿöôülizêwösock 2", 
__func__
);

47 
bad
;

51 
l
 = (
lib√t_t
 *)
	`mÆloc
( (libnet_t));

52 i‡(
l
 =
NULL
)

54 
	`¢¥ötf
(
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): mÆloc(): %s", 
__func__
,

55 
	`°ªº‹
(
î∫o
));

56 
bad
;

59 
	`mem£t
(
l
, 0,  (*l));

61 
l
->
öje˘i⁄_ty≥
 = injection_type;

62 
l
->
±ag_°©e
 = 
LIBNET_PTAG_INITIALIZER
;

63 
l
->
devi˚
 = (devi˚ ? 
	`°rdup
(devi˚Ë: 
NULL
);

64 
l
->
fd
 = -1;

66 
	`°∫˝y
(
l
->
œbñ
, 
LIBNET_LABEL_DEFAULT
, 
LIBNET_LABEL_SIZE
);

67 
l
->
œbñ
[
LIBNET_LABEL_SIZE
 - 1] = '\0';

69 
l
->
öje˘i⁄_ty≥
)

71 
LIBNET_NONE
:

73 
LIBNET_LINK
:

74 
LIBNET_LINK_ADV
:

75 i‡(
	`lib√t_£À˘_devi˚
(
l
) == -1)

77 
	`¢¥ötf
(
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s", 
l
->err_buf);

78 
bad
;

80 i‡(
	`lib√t_›í_lök
(
l
) == -1)

82 
	`¢¥ötf
(
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s", 
l
->err_buf);

83 
bad
;

86 
LIBNET_RAW4
:

87 
LIBNET_RAW4_ADV
:

88 i‡(
	`lib√t_›í_øw4
(
l
) == -1)

90 
	`¢¥ötf
(
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s", 
l
->err_buf);

91 
bad
;

94 
LIBNET_RAW6
:

95 
LIBNET_RAW6_ADV
:

96 i‡(
	`lib√t_›í_øw6
(
l
) == -1)

98 
	`¢¥ötf
(
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s", 
l
->err_buf);

99 
bad
;

103 
	`¢¥ötf
(
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

104 "%s(): unsuµ‹ãd inje˘i⁄Åy≥", 
__func__
);

105 
bad
;

109  (
l
);

111 
bad
:

112 i‡(
l
)

114 
	`lib√t_de°roy
(
l
);

116  (
NULL
);

117 
	}
}

120 
	$lib√t_de°roy
(
lib√t_t
 *
l
)

122 i‡(
l
)

124 i‡(
l
->
fd
 != -1)

125 
	`˛o£
(
l
->
fd
);

126 
	`‰ì
(
l
->
devi˚
);

127 
	`lib√t_˛ór_∑ckë
(
l
);

128 
	`‰ì
(
l
);

130 
	}
}

133 
	$lib√t_˛ór_∑ckë
(
lib√t_t
 *
l
)

135 
lib√t_pblock_t
 *
p
;

137 i‡(!
l
)

142 (
p
 = 
l
->
¥Ÿocﬁ_blocks
))

144 
	`lib√t_pblock_dñëe
(
l
, 
p
);

148 
l
->
±ag_°©e
 = 0;

149 
	}
}

152 
	$lib√t_°©s
(
lib√t_t
 *
l
, 
lib√t_°©s
 *
ls
)

154 i‡(
l
 =
NULL
)

159 
ls
->
∑ckës_£¡
 = 
l
->
°©s
.packets_sent;

160 
ls
->
∑ckë_îr‹s
 = 
l
->
°©s
.packet_errors;

161 
ls
->
byãs_wrôãn
 = 
l
->
°©s
.bytes_written;

162 
	}
}

165 
	$lib√t_gëfd
(
lib√t_t
 *
l
)

167 i‡(
l
 =
NULL
)

172  ()(
l
->
fd
);

173 
	}
}

176 
	$lib√t_gëdevi˚
(
lib√t_t
 *
l
)

178 i‡(
l
 =
NULL
)

180  (
NULL
);

183  (
l
->
devi˚
);

184 
	}
}

186 
uöt8_t
 *

187 
	$lib√t_gëpbuf
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

189 
lib√t_pblock_t
 *
p
;

191 i‡(
l
 =
NULL
)

193  (
NULL
);

196 
p
 = 
	`lib√t_pblock_föd
(
l
, 
±ag
);

197 i‡(
p
 =
NULL
)

200  (
NULL
);

204  (
p
->
buf
);

206 
	}
}

208 
uöt32_t


209 
	$lib√t_gëpbuf_size
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

211 
lib√t_pblock_t
 *
p
;

213 i‡(
l
 =
NULL
)

218 
p
 = 
	`lib√t_pblock_föd
(
l
, 
±ag
);

219 i‡(
p
 =
NULL
)

226  (
p
->
b_Àn
);

228 
	}
}

230 
uöt32_t


231 
	$lib√t_gë∑ckë_size
(
lib√t_t
 *
l
)

234 
lib√t_pblock_t
 *
p
;

235 
uöt32_t
 
n
;

237 i‡(
l
 =
NULL
)

242 
n
 = 0;

243 
p
 = 
l
->
¥Ÿocﬁ_blocks
;

244 i‡(
p
)

246 ; 
p
;Ö =Ö->
√xt
)

248 
n
 +
p
->
b_Àn
;

251  (
n
);

252 
	}
}

	@/workspaces/libnet/src/libnet_internal.c

33 
	~"comm⁄.h
"

36 
	$lib√t_düg_dump_hex
(c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
Àn
, 
sw≠
, 
FILE
 *
°ªam
)

38 
i
, 
s_˙t
;

39 
uöt16_t
 *
p
;

41 
p
 = (
uöt16_t
 *)
∑ckë
;

42 
s_˙t
 = 
Àn
 / (
uöt16_t
);

44 
	`Ârötf
(
°ªam
, "\t");

45 
i
 = 0; --
s_˙t
 >= 0; i++)

47 i‡((!(
i
 % 8)))

49 
	`Ârötf
(
°ªam
, "\n%02x\t", (
i
 * 2));

51 
	`Ârötf
(
°ªam
, "%04x ", 
sw≠
 ? 
	`¡ohs
(*(
p
++)) : *(p++));

57 i‡(
Àn
 & 1)

59 i‡((!(
i
 % 8)))

61 
	`Ârötf
(
°ªam
, "\n%02x\t", (
i
 * 2));

63 
	`Ârötf
(
°ªam
, "%02x ", *(
uöt8_t
 *)
p
);

65 
	`Ârötf
(
°ªam
, "\n");

66 
	}
}

70 
	$lib√t_düg_dump_c⁄ãxt
(
lib√t_t
 *
l
)

72 i‡(
l
 =
NULL
)

77 
	`Ârötf
(
°dîr
, "fd:\t\t%d\n", 
l
->
fd
);

79 
l
->
öje˘i⁄_ty≥
)

81 
LIBNET_LINK
:

82 
	`Ârötf
(
°dîr
, "injectionÅype:\tLIBNET_LINK\n");

84 
LIBNET_RAW4
:

85 
	`Ârötf
(
°dîr
, "injectionÅype:\tLIBNET_RAW4\n");

87 
LIBNET_RAW6
:

88 
	`Ârötf
(
°dîr
, "injectionÅype:\tLIBNET_RAW6\n");

90 
LIBNET_LINK_ADV
:

91 
	`Ârötf
(
°dîr
, "injectionÅype:\tLIBNET_LINK_ADV\n");

93 
LIBNET_RAW4_ADV
:

94 
	`Ârötf
(
°dîr
, "injectionÅype:\tLIBNET_RAW4_ADV\n");

96 
LIBNET_RAW6_ADV
:

97 
	`Ârötf
(
°dîr
, "injectionÅype:\tLIBNET_RAW6_ADV\n");

100 
	`Ârötf
(
°dîr
, "injectionÅype:\tinvalid injectionÅype %d\n",

101 
l
->
öje˘i⁄_ty≥
);

105 
	`Ârötf
(
°dîr
, "pblock sèπ:\t%p\n", (*)
l
->
¥Ÿocﬁ_blocks
);

106 
	`Ârötf
(
°dîr
, "pblockÉnd:\t%p\n", (*)
l
->
pblock_íd
);

107 
	`Ârötf
(
°dîr
, "lökÅy≥:\t%d\n", 
l
->
lök_ty≥
);

108 
	`Ârötf
(
°dîr
, "lök off£t:\t%d\n", 
l
->
lök_off£t
);

109 
	`Ârötf
(
°dîr
, "Æig√r:\t%d\n", 
l
->
Æig√r
);

110 
	`Ârötf
(
°dîr
, "devi˚:\t\t%s\n", 
l
->
devi˚
);

111 
	`Ârötf
(
°dîr
, "∑ckë†£¡:\t%Œd\n", ()
l
->
°©s
.
∑ckës_£¡
);

112 
	`Ârötf
(
°dîr
, "∑ckëÉº‹s:\t%Œd\n", ()
l
->
°©s
.
∑ckë_îr‹s
);

113 
	`Ârötf
(
°dîr
, "byã†wrôãn:\t%Œd\n", ()
l
->
°©s
.
byãs_wrôãn
);

114 
	`Ârötf
(
°dîr
, "±ag sèã:\t%d\n", 
l
->
±ag_°©e
);

115 
	`Ârötf
(
°dîr
, "c⁄ãxàœbñ:\t%s\n", 
l
->
œbñ
);

116 
	`Ârötf
(
°dîr
, "œ°Éºbuf:\t%s\n", 
l
->
îr_buf
);

117 
	`Ârötf
(
°dîr
, "tŸÆ size:\t%d\n", 
l
->
tŸÆ_size
);

118 
	}
}

121 
	$lib√t_düg_dump_pblock
(
lib√t_t
 *
l
)

123 
uöt32_t
 
n
;

124 
lib√t_pblock_t
 *
p
;

126 
p
 = 
l
->
¥Ÿocﬁ_blocks
;Ö;Ö =Ö->
√xt
)

128 
	`Ârötf
(
°dîr
, "pblockÅype:\t%s\n",

129 
	`lib√t_düg_dump_pblock_ty≥
(
p
->
ty≥
));

130 
	`Ârötf
(
°dîr
, "±agÇumbî:\t%d\n", 
p
->
±ag
);

131 
	`Ârötf
(
°dîr
, "pblockáddªss:\t%p\n", (*)
p
);

132 
	`Ârötf
(
°dîr
, "√xàpblock\t%∞", (*)
p
->
√xt
);

133 i‡(
p
->
√xt
)

135 
	`Ârötf
(
°dîr
, "(%s)",

136 
	`lib√t_düg_dump_pblock_ty≥
(
p
->
√xt
->
ty≥
));

138 
	`Ârötf
(
°dîr
, "\n");

139 
	`Ârötf
(
°dîr
, "¥evÖblock\t%∞", (*)
p
->
¥ev
);

140 i‡(
p
->
¥ev
)

142 
	`Ârötf
(
°dîr
, "(%s)",

143 
	`lib√t_düg_dump_pblock_ty≥
(
p
->
¥ev
->
ty≥
));

145 
	`Ârötf
(
°dîr
, "\n");

146 
	`Ârötf
(
°dîr
, "buf:\t\t");

147 
n
 = 0;Ç < 
p
->
b_Àn
;Ç++)

149 
	`Ârötf
(
°dîr
, "%02x", 
p
->
buf
[
n
]);

151 
	`Ârötf
(
°dîr
, "\nbuf„∏Àngth:\t%d\n", 
p
->
b_Àn
);

152 i‡((
p
->
Êags
Ë& 
LIBNET_PBLOCK_DO_CHECKSUM
)

154 
	`Ârötf
(
°dîr
, "checksum flag:\tYes\n");

155 
	`Ârötf
(
°dîr
, "chksumÜígth:\t%d\n", 
p
->
h_Àn
);

159 
	`Ârötf
(
°dîr
, "checksum flag:\tNo\n");

161 
	`Ârötf
(
°dîr
, "byã†c›õd:\t%d\n\n", 
p
->
c›õd
);

163 
	}
}

166 
	$lib√t_düg_dump_pblock_ty≥
(
uöt8_t
 
ty≥
)

168 
ty≥
)

171 
LIBNET_PBLOCK_ARP_H
:

173 
LIBNET_PBLOCK_DHCPV4_H
:

175 
LIBNET_PBLOCK_DNSV4_H
:

177 
LIBNET_PBLOCK_ETH_H
:

179 
LIBNET_PBLOCK_ICMPV4_H
:

181 
LIBNET_PBLOCK_ICMPV4_ECHO_H
:

183 
LIBNET_PBLOCK_ICMPV4_MASK_H
:

185 
LIBNET_PBLOCK_ICMPV4_UNREACH_H
:

187 
LIBNET_PBLOCK_ICMPV4_TIMXCEED_H
:

189 
LIBNET_PBLOCK_ICMPV4_REDIRECT_H
:

191 
LIBNET_PBLOCK_ICMPV4_TS_H
:

193 
LIBNET_PBLOCK_IGMP_H
:

195 
LIBNET_PBLOCK_IPV4_H
:

197 
LIBNET_PBLOCK_IPO_H
:

199 
LIBNET_PBLOCK_IPDATA
:

201 
LIBNET_PBLOCK_OSPF_H
:

203 
LIBNET_PBLOCK_OSPF_HELLO_H
:

205 
LIBNET_PBLOCK_OSPF_DBD_H
:

207 
LIBNET_PBLOCK_OSPF_LSR_H
:

209 
LIBNET_PBLOCK_OSPF_LSU_H
:

211 
LIBNET_PBLOCK_OSPF_LSA_H
:

213 
LIBNET_PBLOCK_OSPF_AUTH_H
:

215 
LIBNET_PBLOCK_OSPF_CKSUM
:

217 
LIBNET_PBLOCK_LS_RTR_H
:

219 
LIBNET_PBLOCK_LS_NET_H
:

221 
LIBNET_PBLOCK_LS_SUM_H
:

223 
LIBNET_PBLOCK_LS_AS_EXT_H
:

225 
LIBNET_PBLOCK_NTP_H
:

227 
LIBNET_PBLOCK_RIP_H
:

229 
LIBNET_PBLOCK_TCP_H
:

231 
LIBNET_PBLOCK_TCPO_H
:

233 
LIBNET_PBLOCK_TCPDATA
:

235 
LIBNET_PBLOCK_UDP_H
:

237 
LIBNET_PBLOCK_VRRP_H
:

239 
LIBNET_PBLOCK_DATA_H
:

241 
LIBNET_PBLOCK_CDP_H
:

243 
LIBNET_PBLOCK_IPSEC_ESP_HDR_H
:

245 
LIBNET_PBLOCK_IPSEC_ESP_FTR_H
:

247 
LIBNET_PBLOCK_IPSEC_AH_H
:

249 
LIBNET_PBLOCK_802_1Q_H
:

251 
LIBNET_PBLOCK_802_2_H
:

253 
LIBNET_PBLOCK_802_2SNAP_H
:

255 
LIBNET_PBLOCK_802_3_H
:

257 
LIBNET_PBLOCK_STP_CONF_H
:

259 
LIBNET_PBLOCK_STP_TCN_H
:

261 
LIBNET_PBLOCK_ISL_H
:

263 
LIBNET_PBLOCK_IPV6_H
:

265 
LIBNET_PBLOCK_802_1X_H
:

267 
LIBNET_PBLOCK_RPC_CALL_H
:

269 
LIBNET_PBLOCK_MPLS_H
:

271 
LIBNET_PBLOCK_FDDI_H
:

273 
LIBNET_PBLOCK_TOKEN_RING_H
:

275 
LIBNET_PBLOCK_BGP4_HEADER_H
:

277 
LIBNET_PBLOCK_BGP4_OPEN_H
:

279 
LIBNET_PBLOCK_BGP4_UPDATE_H
:

281 
LIBNET_PBLOCK_BGP4_NOTIFICATION_H
:

283 
LIBNET_PBLOCK_GRE_H
:

285 
LIBNET_PBLOCK_GRE_SRE_H
:

287 
LIBNET_PBLOCK_IPV6_FRAG_H
:

289 
LIBNET_PBLOCK_IPV6_ROUTING_H
:

291 
LIBNET_PBLOCK_IPV6_DESTOPTS_H
:

293 
LIBNET_PBLOCK_IPV6_HBHOPTS_H
:

295 
LIBNET_PBLOCK_SEBEK_H
:

297 
LIBNET_PBLOCK_HSRP_H
:

299 
LIBNET_PBLOCK_ICMPV6_H
:

301 
LIBNET_PBLOCK_ICMPV6_ECHO_H
:

303 
LIBNET_PBLOCK_ICMPV6_UNREACH_H
:

305 
LIBNET_PBLOCK_ICMPV6_NDP_NSOL_H
:

307 
LIBNET_PBLOCK_ICMPV6_NDP_NADV_H
:

309 
LIBNET_PBLOCK_ICMPV6_NDP_OPT_H
:

311 
LIBNET_PBLOCK_LLDP_H
:

313 
LIBNET_PBLOCK_LLDP_CHASSIS_H
:

315 
LIBNET_PBLOCK_LLDP_PORT_H
:

317 
LIBNET_PBLOCK_LLDP_TTL_H
:

319 
LIBNET_PBLOCK_LLDP_END_H
:

321 
LIBNET_PBLOCK_LLDP_ORG_SPEC_H
:

325 
	}
}

	@/workspaces/libnet/src/libnet_link_bpf.c

38 
	~"comm⁄.h
"

40 
	~<sys/∑øm.h
>

41 #i‡!
deföed
(
__O≥nBSD__
Ë&& !deföed(
__FªeBSD__
)

42 
	~<sys/timeb.h
>

44 
	~<sys/fûe.h
>

45 
	~<sys/io˘l.h
>

47 
	~<sys/ty≥s.h
>

48 
	~<sys/time.h
>

49 
	~<√t/bpf.h
>

51 
	~<sys/sys˘l.h
>

52 
	~<√t/rouã.h
>

53 
	~<√t/if_dl.h
>

54 
	~<√t/if_ty≥s.h
>

55 
	~"../ö˛ude/gnuc.h
"

57 #ifde‡
HAVE_OS_PROTO_H


58 
	~"../ö˛ude/os-¥Ÿo.h
"

62 
	$lib√t_bpf_›í
(*
îr_buf
)

64 
i
, 
fd
;

65 
devi˚
[] = "/dev/bpf000";

70 
i
 = 0; i < 1000; i++)

72 
	`¢¥ötf
(
devi˚
, (devi˚), "/dev/bpf%d", 
i
);

74 
fd
 = 
	`›í
(
devi˚
, 
O_RDWR
);

75 i‡(
fd
 =-1 && 
î∫o
 =
EBUSY
)

92 i‡(
fd
 == -1)

94 
	`¢¥ötf
(
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): open(): (%s): %s",

95 
__func__
, 
devi˚
, 
	`°ªº‹
(
î∫o
));

97  (
fd
);

98 
	}
}

102 
	$lib√t_›í_lök
(
lib√t_t
 *
l
)

104 
i‰eq
 
i‰
;

105 
bpf_vîsi⁄
 
bv
;

106 
uöt
 
v
;

108 #i‡
	`deföed
(
BIOCGHDRCMPLT
Ë&& deföed(
BIOCSHDRCMPLT
Ë&& !(
__APPLE__
)

109 
uöt
 
•oof_ëh_§c
 = 1;

112 i‡(
l
 =
NULL
)

117 i‡(
l
->
devi˚
 =
NULL
)

119 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): NULL device",

120 
__func__
);

121 
bad
;

124 
l
->
fd
 = 
	`lib√t_bpf_›í
((*Ó->
îr_buf
);

125 i‡(
l
->
fd
 == -1)

127 
bad
;

133 i‡(
	`io˘l
(
l
->
fd
, 
BIOCVERSION
, (
ˇddr_t
)&
bv
) < 0)

135 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): BIOCVERSION: %s",

136 
__func__
, 
	`°ªº‹
(
î∫o
));

137 
bad
;

140 i‡(
bv
.
bv_maj‹
 !
BPF_MAJOR_VERSION
 || bv.
bv_mö‹
 < 
BPF_MINOR_VERSION
)

142 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

143 "%s(): kî√»bp‡fûã∏ouào‡d©e", 
__func__
);

144 
bad
;

150 
	`°∫˝y
(
i‰
.
i‰_«me
, 
l
->
devi˚
, (ifr.ifr_name) - 1);

151 
i‰
.
i‰_«me
[(ifr.ifr_name) - 1] = '\0';

153 i‡(
	`io˘l
(
l
->
fd
, 
BIOCSETIF
, (
ˇddr_t
)&
i‰
) == -1)

155 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): BIOCSETIF: (%s): %s",

156 
__func__
, 
l
->
devi˚
, 
	`°ªº‹
(
î∫o
));

157 
bad
;

163 i‡(
	`io˘l
(
l
->
fd
, 
BIOCGDLT
, (
ˇddr_t
)&
v
) == -1)

165 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): BIOCGDLT: %s",

166 
__func__
, 
	`°ªº‹
(
î∫o
));

167 
bad
;

174 #i‡
	`deföed
(
BIOCGHDRCMPLT
Ë&& deföed(
BIOCSHDRCMPLT
Ë&& !(
__APPLE__
)

175 i‡(
	`io˘l
(
l
->
fd
, 
BIOCSHDRCMPLT
, &
•oof_ëh_§c
) == -1)

177 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): BIOCSHDRCMPLT: %s",

178 
__func__
, 
	`°ªº‹
(
î∫o
));

179 
bad
;

186 
v
)

188 
DLT_SLIP
:

189 
l
->
lök_off£t
 = 0x10;

191 
DLT_RAW
:

192 
l
->
lök_off£t
 = 0x0;

194 
DLT_PPP
:

195 
l
->
lök_off£t
 = 0x04;

197 
DLT_EN10MB
:

199 
l
->
lök_off£t
 = 0xe;

202 #i‡
_BSDI_VERSION
 - 0 >= 199510

203 
v
)

205 
DLT_SLIP
:

206 
v
 = 
DLT_SLIP_BSDOS
;

207 
l
->
lök_off£t
 = 0x10;

209 
DLT_PPP
:

210 
v
 = 
DLT_PPP_BSDOS
;

211 
l
->
lök_off£t
 = 0x04;

215 
l
->
lök_ty≥
 = 
v
;

219 
bad
:

220 i‡(
l
->
fd
 > 0)

222 
	`˛o£
(
l
->
fd
);

225 
	}
}

229 
	$lib√t_˛o£_lök
(
lib√t_t
 *
l
)

231 i‡(
	`˛o£
(
l
->
fd
) == 0)

239 
	}
}

243 
	$lib√t_wrôe_lök
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
size
)

245 
c
;

247 i‡(
l
 =
NULL
)

252 
c
 = 
	`wrôe
(
l
->
fd
, 
∑ckë
, 
size
);

253 i‡(
c
 !
size
)

255 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

256 "%s(): %d byã†wrôã¿(%s)", 
__func__
, 
c
, 
	`°ªº‹
(
î∫o
));

258  (
c
);

259 
	}
}

262 
lib√t_ëhî_addr
 *

263 
	$lib√t_gë_hwaddr
(
lib√t_t
 *
l
)

265 
mib
[6];

266 
size_t
 
Àn
;

267 
öt8_t
 *
buf
, *
√xt
, *
íd
;

268 
if_msghdr
 *
ifm
;

269 
sockaddr_dl
 *
sdl
;

271 
mib
[0] = 
CTL_NET
;

272 
mib
[1] = 
AF_ROUTE
;

273 
mib
[2] = 0;

274 
mib
[3] = 
AF_LINK
;

275 
mib
[4] = 
NET_RT_IFLIST
;

276 
mib
[5] = 0;

278 i‡(
l
 =
NULL
)

280  (
NULL
);

283 i‡(
l
->
devi˚
 =
NULL
)

285 i‡(
	`lib√t_£À˘_devi˚
(
l
) == -1)

288  (
NULL
);

292 i‡(
	`sys˘l
(
mib
, 6, 
NULL
, &
Àn
, NULL, 0) == -1)

294 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): sysctl(): %s",

295 
__func__
, 
	`°ªº‹
(
î∫o
));

296  (
NULL
);

299 
buf
 = (
öt8_t
 *)
	`mÆloc
(
Àn
);

300 i‡(
buf
 =
NULL
)

302 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): malloc(): %s",

303 
__func__
, 
	`°ªº‹
(
î∫o
));

304  (
NULL
);

306 i‡(
	`sys˘l
(
mib
, 6, 
buf
, &
Àn
, 
NULL
, 0) < 0)

308 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): sysctl(): %s",

309 
__func__
, 
	`°ªº‹
(
î∫o
));

310 
	`‰ì
(
buf
);

311  (
NULL
);

313 
íd
 = 
buf
 + 
Àn
;

315 
√xt
 = 
buf
 ;Çexà< 
íd
 ;Çexà+
ifm
->
ifm_msgÀn
)

317 
ifm
 = (
if_msghdr
 *)
√xt
;

319 i‡(
ifm
->
ifm_vîsi⁄
 !
RTM_VERSION
)

322 i‡(
ifm
->
ifm_ty≥
 =
RTM_IFINFO
)

324 
sdl
 = (
sockaddr_dl
 *)(
ifm
 + 1);

325 i‡(
sdl
->
sdl_ty≥
 !
IFT_ETHER


326 #ifde‡
IFT_FASTETHER


327 && 
sdl
->
sdl_ty≥
 !
IFT_FASTETHER


329 #ifde‡
IFT_FASTETHERFX


330 && 
sdl
->
sdl_ty≥
 !
IFT_FASTETHERFX


332 #ifde‡
IFT_GIGABITETHERNET


333 && 
sdl
->
sdl_ty≥
 !
IFT_GIGABITETHERNET


336 && 
sdl
->
sdl_ty≥
 !
IFT_L2VLAN
)

338 i‡(
sdl
->
sdl_∆í
 =
	`°æí
(
l
->
devi˚
)

339 && 
	`°∫cmp
(&
sdl
->
sdl_d©a
[0], 
l
->
devi˚
, sdl->
sdl_∆í
) == 0)

341 
	`mem˝y
(
l
->
lök_addr
.
ëhî_addr_o˘ë
, 
	`LLADDR
(
sdl
), 
ETHER_ADDR_LEN
);

346 
	`‰ì
(
buf
);

347 i‡(
√xt
 =
íd
)

349 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

351 
__func__
, 
l
->
devi˚
);

352  
NULL
;

355  (&
l
->
lök_addr
);

356 
	}
}

	@/workspaces/libnet/src/libnet_link_dlpi.c

42 
	~"comm⁄.h
"

44 
	~<sys/ty≥s.h
>

45 
	~<sys/time.h
>

46 #ifde‡
HAVE_SYS_BUFMOD_H


47 
	~<sys/bufmod.h
>

49 
	~<sys/dÕi.h
>

50 #ifde‡
HAVE_HPUX9


51 
	~<sys/sockë.h
>

53 #ifde‡
DL_HP_PPA_ACK_OBS


54 
	~<sys/°©.h
>

56 
	~<sys/°ªam.h
>

57 #i‡
deföed
(
HAVE_SOLARIS
Ë&& deföed(
HAVE_SYS_BUFMOD_H
)

58 
	~<sys/sy°emöfo.h
>

61 #ifde‡
HAVE_SYS_DLPI_EXT_H


62 
	~<sys/dÕi_ext.h
>

65 #ifde‡
HAVE_HPUX9


66 
	~<√t/if.h
>

69 
	~<˘y≥.h
>

70 #ifde‡
HAVE_HPUX9


71 
	~<∆i°.h
>

72 
	~<dÕi_ext.h
>

74 
	~<î∫o.h
>

75 
	~<f˙é.h
>

76 
	~<mem‹y.h
>

77 
	~<°dio.h
>

78 
	~<°dlib.h
>

79 
	~<°rög.h
>

80 
	~<°r›ts.h
>

81 
	~<uni°d.h
>

82 
	~<√t/bpf.h
>

84 
	~"../ö˛ude/lib√t.h
"

86 
	~"../ö˛ude/gnuc.h
"

87 #ifde‡
HAVE_OS_PROTO_H


88 
	~"../ö˛ude/os-¥Ÿo.h
"

91 #i‚de‡
DLPI_DEV_PREFIX


92 
	#DLPI_DEV_PREFIX
 "/dev"

	)

95 
	#MAXDLBUF
 8192

	)

98 
dœâachªq
(, 
bpf_u_öt32
, 
öt8_t
 *);

99 
dlbödack
(, 
öt8_t
 *, int8_t *);

100 
dlbödªq
(, 
bpf_u_öt32
, 
öt8_t
 *);

101 
dlöfﬂck
(, 
öt8_t
 *, int8_t *);

102 
dlöf‹eq
(, 
öt8_t
 *);

103 
dlokack
(, c⁄° 
öt8_t
 *, int8_t *, int8_t *);

104 
ªcv_ack
(, , c⁄° 
öt8_t
 *, int8_t *, int8_t *);

105 
£nd_ªque°
(, 
öt8_t
 *, , int8_t *, int8_t *, );

106 #ifde‡
HAVE_SYS_BUFMOD_H


107 
°rio˘l
(, , , 
öt8_t
 *);

109 #ifde‡
HAVE_HPUX9


110 
dÕi_kªad
(, 
off_t
, *, 
uöt
, 
öt8_t
 *);

112 #ifde‡
HAVE_DEV_DLPI


113 
gë_dÕi_µa
(, c⁄° 
öt8_t
 *, , int8_t *);

117 
bpf_u_öt32
 
	g˘lbuf
[
MAXDLBUF
];

121 *
	$föd_œ°_nŸ_of
(*
ö
, c⁄° *
s
)

123 * 
cur
;

124 
cur
 = 
ö
 + 
	`°æí
(in);

125 ; 
cur
 !
ö
; cur--) {

126 i‡(!
	`°rchr
(
s
, *
cur
)) {

130  
cur
 =
ö
 ? 
NULL
 : cur;

131 
	}
}

136 
	$dÕi_unô
(c⁄° *
dev
, *
«mñí
, *
unô
)

138 *
p
;

139 *
eos
;

140 i‡(!*
dev
) {

143 
p
 = 
	`föd_œ°_nŸ_of
(
dev
, "0123456789");

144 i‡(!
p
) {

147 
p
++;

148 i‡(!*
p
) {

151 *
unô
 = 
	`°πﬁ
(
p
, 
NULL
, 10);

152 *
«mñí
 = 
p
 - 
dev
;

154 
	}
}

164 
	$åy_›í_dev
(
lib√t_t
 *
l
, c⁄° *
dev
, 
unô
)

166 c⁄° *
¥efixes
[] = {

167 
DLPI_DEV_PREFIX
,

171 
NULL


173 
ªt
;

174 
fuŒ∑th
[
MAXPATHLEN
];

175 
cur_¥efix
;

177 
cur_¥efix
 = 0; 
¥efixes
[cur_prefix]; cur_prefix++) {

178 
	`¢¥ötf
(
fuŒ∑th
, (fullpath),

179 "%s/%s", 
¥efixes
[
cur_¥efix
], 
dev
);

180 i‡(0 <(
ªt
 = 
	`›í
(
fuŒ∑th
, 
O_RDWR
))) {

181  
ªt
;

183 i‡(
î∫o
 !
ENOENT
 &&Éºnÿ!
EISDIR
) {

184 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): open(): %s: %s",

185 
__func__
, 
fuŒ∑th
, 
	`°ªº‹
(
î∫o
));

188 
	`¢¥ötf
(
fuŒ∑th
, (fullpath),

189 "%s/%s%d", 
¥efixes
[
cur_¥efix
], 
dev
, 
unô
);

190 i‡(0 <(
ªt
 = 
	`›í
(
fuŒ∑th
, 
O_RDWR
))) {

191  
ªt
;

193 i‡(
î∫o
 !
ENOENT
 &&Éºnÿ!
EISDIR
) {

194 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): open(): %s: %s",

195 
__func__
, 
fuŒ∑th
, 
	`°ªº‹
(
î∫o
));

200 
	}
}

203 
	$lib√t_›í_lök
(
lib√t_t
 *
l
)

205 
öt8_t
 *
˝
;

206 
öt8_t
 *
eos
;

207 
µa
;

208 
dl_öfo_ack_t
 *
öf›
;

209 
bpf_u_öt32
 
buf
[
MAXDLBUF
];

210 
«mñí
;

211 
öt8_t
 
d«me
[
MAXPATHLEN
];

213 i‡(
l
 =
NULL
)

218 
	`mem£t
(&
d«me
, 0, (dname));

223 i‡(!
	`dÕi_unô
(
l
->
devi˚
, &
«mñí
, &
µa
)) {

224 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

226 
__func__
, 
l
->
devi˚
);

227 
bad
;

229 
	`°∫˝y
(
d«me
, 
l
->
devi˚
, 
«mñí
);

231 #ifde‡
HAVE_DEV_DLPI


232 i‡(*(
l
->
devi˚
) == '/')

234 
	`°∫˝y
(
d«me
, 
l
->
devi˚
, (dname) - 1);

235 
d«me
[(dname) - 1] = '\0';

239 
	`¢¥ötf
(
d«me
, (d«me), "%s/%s", 
DLPI_DEV_PREFIX
, 
l
->
devi˚
);

245 
˝
 = "/dev/dlpi";

247 
l
->
fd
 = 
	`›í
(
˝
, 
O_RDWR
);

248 i‡(
l
->
fd
 == -1)

250 
bad
;

256 
µa
 = 
	`gë_dÕi_µa
(
l
->
fd
, 
d«me
,Ö∑,Ü->
îr_buf
);

257 i‡(
µa
 < 0)

259 
bad
;

265 
l
->
fd
 = 
	`åy_›í_dev
÷, 
d«me
, 
µa
);

266 i‡(
l
->
fd
 == -1) {

267 
bad
;

273 i‡(
	`dlöf‹eq
(
l
->
fd
,Ü->
îr_buf
) < 0 ||

274 
	`dlöfﬂck
(
l
->
fd
, (
öt8_t
 *)
buf
,Ü->
îr_buf
) < 0)

276 
bad
;

278 
öf›
 = &((
DL_¥imôives
 *)
buf
)->
öfo_ack
;

279 i‡(
öf›
->
dl_¥ovidî_°yÀ
 =
DL_STYLE2
 &&

280 (
	`dœâachªq
(
l
->
fd
, 
µa
,Ü->
îr_buf
)

281 < 0 || 
	`dlokack
(
l
->
fd
, "©èch", (
öt8_t
 *)
buf
,Ü->
îr_buf
) < 0))

283 
bad
;

289 #i‡
	`deföed
(
HAVE_HPUX9
Ë|| deföed(
HAVE_HPUX10_20
Ë|| deföed(
HAVE_HPUX11
Ë|| deföed(
HAVE_SOLARIS
)

290 i‡(
	`dlbödªq
(
l
->
fd
, 0,Ü->
îr_buf
) < 0 ||

291 
	`dlbödack
(
l
->
fd
, (
öt8_t
 *)
buf
,Ü->
îr_buf
) < 0)

293 
bad
;

300 i‡(
	`dlöf‹eq
(
l
->
fd
,Ü->
îr_buf
) < 0 ||

301 
	`dlöfﬂck
(
l
->
fd
, (
öt8_t
 *)
buf
,Ü->
îr_buf
) < 0)

303 
bad
;

306 
öf›
 = &((
DL_¥imôives
 *)
buf
)->
öfo_ack
;

307 
öf›
->
dl_mac_ty≥
)

309 
DL_CSMACD
:

310 
DL_ETHER
:

311 
l
->
lök_ty≥
 = 
DLT_EN10MB
;

312 
l
->
lök_off£t
 = 0xe;

314 
DL_FDDI
:

315 
l
->
lök_ty≥
 = 
DLT_FDDI
;

316 
l
->
lök_off£t
 = 0x15;

318 
DL_TPR
:

319 
l
->
lök_ty≥
 = 
DLT_PRONET
;

320 
l
->
lök_off£t
 = 0x16;

323 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

324 "%s(): unknow¿ma¯ty≥ 0x%lu", 
__func__
,

325 (
uöt32_t
Ë
öf›
->
dl_mac_ty≥
);

326 
bad
;

329 #ifdef 
DLIOCRAW


333 i‡(
	`°rio˘l
(
l
->
fd
, 
DLIOCRAW
, 0, 
NULL
) < 0)

335 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

336 "%s(): DLIOCRAW: %s", 
__func__
, 
	`°ªº‹
(
î∫o
));

337 
bad
;

342 
bad
:

343 i‡(
l
->
fd
 > 0)

345 
	`˛o£
(
l
->
fd
);

348 
	}
}

352 
	$£nd_ªque°
(
fd
, 
öt8_t
 *
±r
, 
Àn
, i¡8_à*
wh©
, i¡8_à*
ebuf
,

353 
Êags
)

355 
°rbuf
 
˘l
;

357 
˘l
.
maxÀn
 = 0;

358 
˘l
.
Àn
 =Üen;

359 
˘l
.
buf
 = 
±r
;

361 i‡(
	`putmsg
(
fd
, &
˘l
, (
°rbuf
 *Ë
NULL
, 
Êags
) < 0)

363 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

364 "%s():Öutmsg \"%s\": %s", 
__func__
, 
wh©
,

365 
	`°ªº‹
(
î∫o
));

369 
	}
}

372 
	$ªcv_ack
(
fd
, 
size
, c⁄° 
öt8_t
 *
wh©
, i¡8_à*
buÂ
, i¡8_à*
ebuf
)

374 
DL_¥imôives
 *
dÕ
;

375 
°rbuf
 
˘l
;

376 
Êags
;

378 
˘l
.
maxÀn
 = 
MAXDLBUF
;

379 
˘l
.
Àn
 = 0;

380 
˘l
.
buf
 = 
buÂ
;

382 
Êags
 = 0;

383 i‡(
	`gëmsg
(
fd
, &
˘l
, (
°rbuf
*)
NULL
, &
Êags
) < 0)

385 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

386 "%s(): %†gëmsg: %s", 
__func__
, 
wh©
, 
	`°ªº‹
(
î∫o
));

390 
dÕ
 = (
DL_¥imôives
 *)
˘l
.
buf
;

391 
dÕ
->
dl_¥imôive
)

393 
DL_INFO_ACK
:

394 
DL_PHYS_ADDR_ACK
:

395 
DL_BIND_ACK
:

396 
DL_OK_ACK
:

397 #ifde‡
DL_HP_PPA_ACK


398 
DL_HP_PPA_ACK
:

405 
DL_ERROR_ACK
:

406 
dÕ
->
îr‹_ack
.
dl_î∫o
)

408 
DL_BADPPA
:

409 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

410 "ªcv_ack: %†badÖ∑ (devi˚ unô)", 
wh©
);

412 
DL_SYSERR
:

413 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

415 
wh©
, 
	`°ªº‹
(
dÕ
->
îr‹_ack
.
dl_unix_î∫o
));

417 
DL_UNSUPPORTED
:

418 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

419 "ªcv_ack: %s: Sîvi˚ÇŸ suµlõd byÖrovidî", 
wh©
);

422 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

423 "ªcv_ack: %†îr‹ 0x%x", 
wh©
,

424 (
bpf_u_öt32
)
dÕ
->
îr‹_ack
.
dl_î∫o
);

430 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

432 
wh©
, (
bpf_u_öt32
)
dÕ
->
dl_¥imôive
);

436 i‡(
˘l
.
Àn
 < 
size
)

438 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

440 
wh©
, 
˘l
.
Àn
, 
size
);

443  (
˘l
.
Àn
);

444 
	}
}

447 
	$dœâachªq
(
fd
, 
bpf_u_öt32
 
µa
, 
öt8_t
 *
ebuf
)

449 
dl_©èch_ªq_t
 
ªq
;

451 
ªq
.
dl_¥imôive
 = 
DL_ATTACH_REQ
;

452 
ªq
.
dl_µa
 = 
µa
;

454  (
	`£nd_ªque°
(
fd
, (
öt8_t
 *)&
ªq
, ‘eq), "©èch", 
ebuf
, 0));

455 
	}
}

458 
	$dlbödªq
(
fd
, 
bpf_u_öt32
 
ßp
, 
öt8_t
 *
ebuf
)

461 
dl_böd_ªq_t
 
ªq
;

463 
	`mem£t
((
öt8_t
 *)&
ªq
, 0, (req));

464 
ªq
.
dl_¥imôive
 = 
DL_BIND_REQ
;

465 #ifde‡
DL_HP_RAWDLS


466 
ªq
.
dl_max_c⁄öd
 = 1;

470 
ªq
.
dl_ßp
 = 22;

471 
ªq
.
dl_£rvi˚_mode
 = 
DL_HP_RAWDLS
;

473 
ªq
.
dl_ßp
 = 
ßp
;

474 #ifde‡
DL_CLDLS


475 
ªq
.
dl_£rvi˚_mode
 = 
DL_CLDLS
;

478  (
	`£nd_ªque°
(
fd
, (
öt8_t
 *)&
ªq
, ‘eq), "böd", 
ebuf
, 0));

479 
	}
}

482 
	$dlbödack
(
fd
, 
öt8_t
 *
buÂ
, i¡8_à*
ebuf
)

484  (
	`ªcv_ack
(
fd
, 
DL_BIND_ACK_SIZE
, "böd", 
buÂ
, 
ebuf
));

485 
	}
}

488 
	$dlokack
(
fd
, c⁄° 
öt8_t
 *
wh©
, i¡8_à*
buÂ
, i¡8_à*
ebuf
)

490  (
	`ªcv_ack
(
fd
, 
DL_OK_ACK_SIZE
, 
wh©
, 
buÂ
, 
ebuf
));

491 
	}
}

494 
	$dlöf‹eq
(
fd
, 
öt8_t
 *
ebuf
)

496 
dl_öfo_ªq_t
 
ªq
;

498 
ªq
.
dl_¥imôive
 = 
DL_INFO_REQ
;

500  (
	`£nd_ªque°
(
fd
, (
öt8_t
 *)&
ªq
, ‘eq), "öfo", 
ebuf
,

501 
RS_HIPRI
));

502 
	}
}

505 
	$dlöfﬂck
(
fd
, 
öt8_t
 *
buÂ
, i¡8_à*
ebuf
)

507  (
	`ªcv_ack
(
fd
, 
DL_INFO_ACK_SIZE
, "öfo", 
buÂ
, 
ebuf
));

508 
	}
}

511 #ifde‡
HAVE_SYS_BUFMOD_H


513 
	$°rio˘l
(
fd
, 
cmd
, 
Àn
, 
öt8_t
 *
dp
)

515 
°rio˘l
 
°r
;

516 
rc
;

518 
°r
.
ic_cmd
 = 
cmd
;

519 
°r
.
ic_timout
 = -1;

520 
°r
.
ic_Àn
 = 
Àn
;

521 
°r
.
ic_dp
 = 
dp
;

523 
rc
 = 
	`io˘l
(
fd
, 
I_STR
, &
°r
);

524 i‡(
rc
 < 0)

526  (
rc
);

530  (
°r
.
ic_Àn
);

532 
	}
}

536 #i‡(
deföed
(
DL_HP_PPA_ACK_OBS
Ë&& !deföed(
HAVE_HPUX11
))

541 
	$gë_dÕi_µa
(
fd
, c⁄° 
öt8_t
 *
devi˚
, 
unô
,

542 
öt8_t
 *
ebuf
)

544 
dl_hp_µa_ack_t
 *
≠
;

545 
dl_hp_µa_öfo_t
 *
ù
;

546 
i
;

547 
uöt32_t
 
majdev
;

548 
dl_hp_µa_ªq_t
 
ªq
;

549 
°©
 
°©buf
;

550 
bpf_u_öt32
 
buf
[
MAXDLBUF
];

552 i‡(
	`°©
(
devi˚
, &
°©buf
) < 0)

554 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

555 "°©: %s: %s", 
devi˚
, 
	`°ªº‹
(
î∫o
));

558 
majdev
 = 
	`maj‹
(
°©buf
.
°_rdev
);

560 
	`mem£t
((
öt8_t
 *)&
ªq
, 0, (req));

561 
ªq
.
dl_¥imôive
 = 
DL_HP_PPA_REQ
;

563 
	`mem£t
((
öt8_t
 *)
buf
, 0, (buf));

564 i‡(
	`£nd_ªque°
(
fd
, (
öt8_t
 *)&
ªq
, ‘eq), "hµ∑", 
ebuf
, 0) < 0 ||

565 
	`ªcv_ack
(
fd
, 
DL_HP_PPA_ACK_SIZE
, "hµ∑", (
öt8_t
 *)
buf
, 
ebuf
) < 0)

570 
≠
 = (
dl_hp_µa_ack_t
 *)
buf
;

571 
ù
 = (
dl_hp_µa_öfo_t
 *)((
uöt8_t
 *)
≠
 +áp->
dl_off£t
);

573 
i
 = 0; i < 
≠
->
dl_cou¡
; i++)

575 i‡(
ù
->
dl_mjr_num
 =
majdev
 && ip->
dl_ö°™˚_num
 =
unô
)

578 
ù
 = (
dl_hp_µa_öfo_t
 *)((
uöt8_t
 *)ù + ip->
dl_√xt_off£t
);

581 i‡(
i
 =
≠
->
dl_cou¡
)

583 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

584 "ˇn'àföd PPA f‹ %s", 
devi˚
);

588 i‡(
ù
->
dl_hdw_°©e
 =
HDW_DEAD
)

590 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

591 "%s: h¨dw¨ê°©e: DOWN", 
devi˚
);

594  (()
ù
->
dl_µa
);

595 
	}
}

598 #ifde‡
HAVE_HPUX9


603 
∆i°
 
	g∆
[] =

605 
	#NL_IFNET
 0

	)

610 
öt8_t
 
	g∑th_vmunix
[] = "/hp-ux";

616 
	$gë_dÕi_µa
(
fd
, c⁄° 
öt8_t
 *
i‚ame
, 
unô
,

617 
öt8_t
 *
ebuf
)

619 c⁄° 
öt8_t
 *
˝
;

620 
kd
;

621 *
addr
;

622 
i‚ë
 ifnet;

623 
öt8_t
 
if_«me
[(
i‚ë
.if_«me)], 
ti‚ame
[32];

625 
˝
 = 
	`°ºchr
(
i‚ame
, '/');

626 i‡(
˝
 !
NULL
)

628 
i‚ame
 = 
˝
 + 1;

630 i‡(
	`∆i°
(
∑th_vmunix
, &
∆
) < 0)

632 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

633 "∆i° %†Áûed", 
∑th_vmunix
);

637 i‡(
∆
[
NL_IFNET
].
n_vÆue
 == 0)

639 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

640 "could'àföd %†kî√»symbﬁ", 
∆
[
NL_IFNET
].
n_«me
);

644 
kd
 = 
	`›í
("/dev/kmem", 
O_RDONLY
);

645 i‡(
kd
 < 0)

647 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

648 "kmem o≥n: %s", 
	`°ªº‹
(
î∫o
));

652 i‡(
	`dÕi_kªad
(
kd
, 
∆
[
NL_IFNET
].
n_vÆue
, &
addr
, ◊ddr), 
ebuf
) < 0)

654 
	`˛o£
(
kd
);

657 ; 
addr
 !
NULL
;ádd∏
i‚ë
.
if_√xt
)

659 i‡(
	`dÕi_kªad
(
kd
, (
off_t
)
addr
, &
i‚ë
, (i‚ë), 
ebuf
) < 0 ||

660 
	`dÕi_kªad
(
kd
, (
off_t
)
i‚ë
.
if_«me
,

661 
if_«me
, (if_«me), 
ebuf
) < 0)

663 
	`˛o£
(
kd
);

666 
	`¢¥ötf
(
ti‚ame
, (tifname), "%.*s%d",

667 ()(
if_«me
), if_«me, 
i‚ë
.
if_unô
);

668 i‡(
	`°rcmp
(
ti‚ame
, 
i‚ame
) == 0)

670  (
i‚ë
.
if_ödex
);

674 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

675 "C™'àföd %s", 
i‚ame
);

677 
	}
}

680 
	$dÕi_kªad
(
fd
, 
off_t
 
addr
, *
buf
,

681 
uöt
 
Àn
, 
öt8_t
 *
ebuf
)

683 
cc
;

685 i‡(
	`l£ek
(
fd
, 
addr
, 
SEEK_SET
) < 0)

687 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

688 "l£ek: %s", 
	`°ªº‹
(
î∫o
));

691 
cc
 = 
	`ªad
(
fd
, 
buf
, 
Àn
);

692 i‡(
cc
 < 0)

694 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

695 "ªad: %s", 
	`°ªº‹
(
î∫o
));

698 i‡(
cc
 !
Àn
)

700 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

701 "öt16_àªad (%d !%d)", 
cc
, 
Àn
);

704  (
cc
);

705 
	}
}

708 
	#ETHERADDRL
 6

	)

709 
	sE√tHódîInfo


711 
lib√t_ëhî_addr
 
	mDe°EthîAddr
;

712 
uöt16_t
 
	mEthîFømeTy≥
;

717 
	$lib√t_˛o£_lök
(
lib√t_t
 *
l
)

719 i‡(
	`˛o£
(
l
->
fd
) == 0)

727 
	}
}

729 #ifde‡
HAVE_HPUX11


731 
	$lib√t_wrôe_lök
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
size
)

733 
°rbuf
 
d©a
, 
˘l
;

734 
dl_hp_øwd©a_ªq_t
 *
rd©a
;

735 
c
;

737 i‡(
l
 =
NULL
)

742 
rd©a
 = (
dl_hp_øwd©a_ªq_t
 *)
˘lbuf
;

743 
rd©a
->
dl_¥imôive
 = 
DL_HP_RAWDATA_REQ
;

746 
˘l
.
Àn
 = (
dl_hp_øwd©a_ªq_t
);

747 
˘l
.
maxÀn
 = (
dl_hp_øwd©a_ªq_t
);

748 
˘l
.
buf
 = (
öt8_t
 *)
rd©a
;

750 
d©a
.
maxÀn
 = 
size
;

751 
d©a
.
Àn
 = 
size
;

752 
d©a
.
buf
 = 
∑ckë
;

754 
c
 = 
	`putmsg
(
l
->
fd
, &
˘l
, &
d©a
, 0);

755 i‡(
c
 == -1)

757 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

758 "lib√t_wrôe_lök(): %d byã†wrôã¿(%s)", 
c
,

759 
	`°ªº‹
(
î∫o
));

764  (
size
);

766 
	}
}

769 
	$lib√t_wrôe_lök
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
size
)

771 
c
;

772 
°rbuf
 
d©a
;

774 i‡(
l
 =
NULL
)

779 
d©a
.
maxÀn
 = 
size
;

780 
d©a
.
Àn
 = 
size
;

781 
d©a
.
buf
 = 
∑ckë
;

783 
c
 = 
	`putmsg
(
l
->
fd
, 
NULL
, &
d©a
, 0);

784 i‡(
c
 == -1)

786 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

787 "lib√t_wrôe_lök: %d byã†wrôã¿(%s)", 
c
,

788 
	`°ªº‹
(
î∫o
));

793  (
size
);

795 
	}
}

798 
lib√t_ëhî_addr
 *

799 
	$lib√t_gë_hwaddr
(
lib√t_t
 *
l
)

801 
DL_¥imôives
 *
dÕ
;

802 
öt8_t
 *
buf
;

803 
öt8_t
 *
mac
;

805 i‡(
l
 =
NULL
)

807  (
NULL
);

810 
buf
 = (
öt8_t
 *)
	`mÆloc
(2048);

811 i‡(
buf
 =
NULL
)

813 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): malloc(): %s",

814 
__func__
, 
	`°ªº‹
(
î∫o
));

815  (
NULL
);

818 
dÕ
 = (
DL_¥imôives
 *)
buf
;

820 
dÕ
->
phyßddr_ªq
.
dl_¥imôive
 = 
DL_PHYS_ADDR_REQ
;

821 
dÕ
->
phyßddr_ªq
.
dl_addr_ty≥
 = 
DL_CURR_PHYS_ADDR
;

823 i‡(
	`£nd_ªque°
(
l
->
fd
, (
öt8_t
 *)
dÕ
, 
DL_PHYS_ADDR_REQ_SIZE
, "physaddr",

824 
l
->
îr_buf
, 0) < 0)

826 
	`‰ì
(
buf
);

827  (
NULL
);

829 i‡(
	`ªcv_ack
(
l
->
fd
, 
DL_PHYS_ADDR_ACK_SIZE
, "phyßddr", (
öt8_t
 *)
dÕ
,

830 
l
->
îr_buf
) < 0)

832 
	`‰ì
(
buf
);

833  (
NULL
);

836 
mac
 = (
öt8_t
 *)
dÕ
 + dÕ->
phyßddr_ack
.
dl_addr_off£t
;

837 
	`mem˝y
(
l
->
lök_addr
.
ëhî_addr_o˘ë
, 
mac
, 
ETHER_ADDR_LEN
);

838 
	`‰ì
(
buf
);

840  (&
l
->
lök_addr
);

841 
	}
}

	@/workspaces/libnet/src/libnet_link_linux.c

35 
	~"comm⁄.h
"

38 
	~<sys/time.h
>

40 
	~<√t/if.h
>

41 
	~<√töë/if_ëhî.h
>

42 
	~<√t/if_¨p.h
>

44 #i‡(
HAVE_PACKET_SOCKET
)

45 #i‚de‡
SOL_PACKET


46 
	#SOL_PACKET
 263

	)

48 
	~<√çackë/∑ckë.h
>

49 
	~<√t/ëhî√t.h
>

52 
	~"../ö˛ude/lib√t.h
"

59 
	#DLT_PRONET
 4

	)

60 
	#DLT_FDDI
 10

	)

61 
	#DLT_RAW
 12

	)

63 
	~"../ö˛ude/gnuc.h
"

64 #ifde‡
HAVE_OS_PROTO_H


65 
	~"../ö˛ude/os-¥Ÿo.h
"

70 
	$lib√t_›í_lök
(
lib√t_t
 *
l
)

72 
i‰eq
 
i‰
;

73 
n
 = 1;

75 i‡(
l
 =
NULL
)

80 #i‡(
HAVE_PACKET_SOCKET
)

81 
l
->
fd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_RAW
, 
	`ht⁄s
(
ETH_P_ALL
));

83 
l
->
fd
 = 
	`sockë
(
PF_INET
, 
SOCK_PACKET
, 
	`ht⁄s
(
ETH_P_ALL
));

85 i‡(
l
->
fd
 == -1)

87 i‡(
î∫o
 =
EPERM
) {

88 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

90 
__func__
);

93 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

94 "sockë: %s", 
	`°ªº‹
(
î∫o
));

96 
bad
;

99 
	`mem£t
(&
i‰
, 0,  (ifr));

100 
	`°∫˝y
(
i‰
.
i‰_«me
, 
l
->
devi˚
,  (ifr.ifr_name) -1);

101 
i‰
.
i‰_«me
[(ifr.ifr_name) - 1] = '\0';

103 i‡(
	`io˘l
(
l
->
fd
, 
SIOCGIFHWADDR
, &
i‰
) < 0 )

105 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

106 "SIOCGIFHWADDR: %s", 
	`°ªº‹
(
î∫o
));

107 
bad
;

110 
i‰
.
i‰_hwaddr
.
ß_Ámûy
)

112 
ARPHRD_ETHER
:

113 
ARPHRD_METRICOM
:

114 #ifde‡
ARPHRD_LOOPBACK


115 
ARPHRD_LOOPBACK
:

117 
l
->
lök_ty≥
 = 
DLT_EN10MB
;

118 
l
->
lök_off£t
 = 0xe;

120 
ARPHRD_SLIP
:

121 
ARPHRD_CSLIP
:

122 
ARPHRD_SLIP6
:

123 
ARPHRD_CSLIP6
:

124 
ARPHRD_PPP
:

125 
ARPHRD_NONE
:

126 
l
->
lök_ty≥
 = 
DLT_RAW
;

128 
ARPHRD_FDDI
:

129 
l
->
lök_ty≥
 = 
DLT_FDDI
;

130 
l
->
lök_off£t
 = 0x15;

133 
ARPHRD_IEEE802
:

134 
ARPHRD_IEEE802_TR
:

135 
ARPHRD_PRONET
:

136 
l
->
lök_ty≥
 = 
DLT_PRONET
;

137 
l
->
lök_off£t
 = 0x16;

141 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

143 
i‰
.
i‰_hwaddr
.
ß_Ámûy
);

144 
bad
;

146 #ifde‡
SO_BROADCAST


155 i‡(
	`£tsock›t
(
l
->
fd
, 
SOL_SOCKET
, 
SO_BROADCAST
, &
n
, (n)) == -1)

157 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

159 
__func__
, 
	`°ªº‹
(
î∫o
));

160 
bad
;

166 
bad
:

167 i‡(
l
->
fd
 >= 0)

169 
	`˛o£
(
l
->
fd
);

172 
	}
}

176 
	$lib√t_˛o£_lök
(
lib√t_t
 *
l
)

178 i‡(
	`˛o£
(
l
->
fd
) == 0)

186 
	}
}

189 #i‡(
HAVE_PACKET_SOCKET
)

191 
	$gë_iÁ˚_ödex
(
fd
, c⁄° *
devi˚
)

193 
i‰eq
 
i‰
;

196 
	`°∫˝y
 (
i‰
.
i‰_«me
, 
devi˚
, (ifr.ifr_name) - 1);

197 
i‰
.
i‰_«me
[(ifr.ifr_name)-1] = '\0';

199 i‡(
	`io˘l
(
fd
, 
SIOCGIFINDEX
, &
i‰
) == -1)

204  
i‰
.
i‰_ifödex
;

205 
	}
}

210 
	$lib√t_wrôe_lök
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
size
)

212 
ssize_t
 
c
;

213 #i‡(
HAVE_PACKET_SOCKET
)

214 
sockaddr_Œ
 
ß
;

216 
sockaddr
 
ß
;

219 i‡(
l
 =
NULL
)

224 
	`mem£t
(&
ß
, 0,  (sa));

225 #i‡(
HAVE_PACKET_SOCKET
)

226 
ß
.
¶l_Ámûy
 = 
AF_PACKET
;

227 
ß
.
¶l_ifödex
 = 
	`gë_iÁ˚_ödex
(
l
->
fd
,Ü->
devi˚
);

228 i‡(
ß
.
¶l_ifödex
 == -1)

232 
ß
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_ALL
);

234 
	`°∫˝y
(
ß
.
ß_d©a
, 
l
->
devi˚
,  (sa.sa_data) - 1);

235 
ß
.
ß_d©a
[ (sa.sa_data) - 1] = 0;

238 
c
 = 
	`£ndto
(
l
->
fd
, 
∑ckë
, 
size
, 0,

239 (
sockaddr
 *)&
ß
,  (sa));

240 i‡(
c
 !(
ssize_t
)
size
)

242 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

243 "lib√t_wrôe_lök(): o∆y %zd byã†wrôã¿(%s)", 
c
,

244 
	`°ªº‹
(
î∫o
));

246  (
c
);

247 
	}
}

250 
lib√t_ëhî_addr
 *

251 
	$lib√t_gë_hwaddr
(
lib√t_t
 *
l
)

253 
fd
;

254 
i‰eq
 
i‰
;

256 i‡(
l
 =
NULL
)

258  (
NULL
);

261 i‡(
l
->
devi˚
 =
NULL
)

263 i‡(
	`lib√t_£À˘_devi˚
(
l
) == -1)

265 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

267  (
NULL
);

274 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

275 i‡(
fd
 < 0)

277 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

278 "sockë: %s", 
	`°ªº‹
(
î∫o
));

279 
bad
;

282 
	`mem£t
(&
i‰
, 0, (ifr));

283 
	`°∫˝y
(
i‰
.
i‰_«me
, 
l
->
devi˚
, (ifr.ifr_name) - 1);

284 
i‰
.
i‰_«me
[(ifr.ifr_name) - 1] = '\0';

286 i‡(
	`io˘l
(
fd
, 
SIOCGIFHWADDR
, &
i‰
) < 0)

288 
	`˛o£
(
fd
);

289 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

290 "io˘l: %s", 
	`°ªº‹
(
î∫o
));

291 
bad
;

293 
	`˛o£
(
fd
);

295  
	`mem˝y
(
l
->
lök_addr
.
ëhî_addr_o˘ë
, &
i‰
.
i‰_hwaddr
.
ß_d©a
,

296 
ETHER_ADDR_LEN
);

298 
bad
:

299  (
NULL
);

300 
	}
}

	@/workspaces/libnet/src/libnet_link_nit.c

38 
	~"comm⁄.h
"

40 
	~"../ö˛ude/gnuc.h
"

41 #ifde‡
HAVE_OS_PROTO_H


42 
	~"../ö˛ude/os-¥Ÿo.h
"

45 
lib√t_lök_öt
 *

46 
	$lib√t_›í_lök_öãrÁ˚
(
öt8_t
 *
devi˚
, i¡8_à*
ebuf
)

48 
sockaddr_nô
 
¢ô
;

49 
lib√t_lök_öt
 *
l
;

51 
l
 = (
lib√t_lök_öt
 *)
	`mÆloc
((*
p
));

52 i‡(
l
 =
NULL
)

54 
	`°r˝y
(
ebuf
, 
	`°ªº‹
(
î∫o
));

55  (
NULL
);

58 
	`mem£t
(
l
, 0, (*l));

60 
l
->
fd
 = 
	`sockë
(
AF_NIT
, 
SOCK_RAW
, 
NITPROTO_RAW
);

61 i‡(
l
->
fd
 < 0)

63 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

64 "sockë: %s", 
	`°ªº‹
(
î∫o
));

65 
bad
;

67 
¢ô
.
¢ô_Ámûy
 = 
AF_NIT
;

68 
	`°∫˝y
(
¢ô
.
¢ô_i‚ame
, 
devi˚
, 
NITIFSIZ
 -1);

69 
¢ô
.
¢ô_i‚ame
[
NITIFSIZ
] = '\0';

71 i‡(
	`böd
(
l
->
fd
, (
sockaddr
 *)&
¢ô
, (snit)))

73 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

74 "böd: %s: %s", 
¢ô
.
¢ô_i‚ame
, 
	`°ªº‹
(
î∫o
));

75 
bad
;

81 
l
->
lökty≥
 = 
DLT_EN10MB
;

83  (
l
);

85 
bad
:

86 i‡(
l
->
fd
 >= 0)

88 
	`˛o£
(
l
->
fd
);

90 
	`‰ì
(
l
);

91  (
NULL
);

92 
	}
}

96 
	$lib√t_˛o£_lök_öãrÁ˚
(
lib√t_lök_öt
 *
l
)

98 i‡(
	`˛o£
(
l
->
fd
) == 0)

100 
	`‰ì
(
l
);

105 
	`‰ì
(
l
);

108 
	}
}

112 
	$wrôe_lök_œyî
(
lib√t_lök_öt
 *
l
, c⁄° 
öt8_t
 *
devi˚
,

113 
uöt8_t
 *
buf
, 
Àn
)

115 
c
;

116 
sockaddr
 
ß
;

118 
	`mem£t
(&
ß
, 0, (sa));

119 
	`°∫˝y
(
ß
.
ß_d©a
, 
devi˚
, (sa.sa_data));

121 
c
 = 
	`£ndto
(
l
->
fd
, 
buf
, 
Àn
, 0, &
ß
, (sa));

122 i‡(
c
 !
Àn
)

126  (
c
);

127 
	}
}

	@/workspaces/libnet/src/libnet_link_none.c

38 
	~"comm⁄.h
"

40 
	$nosuµ‹t
(
lib√t_t
* 
l
)

42 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

43 "%s():Çÿlök suµ‹à⁄Åhi†∂©f‹m", 
__func__
);

44 
	}
}

47 
	$lib√t_›í_lök
(
lib√t_t
 *
l
)

49 
	`nosuµ‹t
(
l
);

51 
	}
}

55 
	$lib√t_˛o£_lök
(
lib√t_t
 *
l
)

57 
	`nosuµ‹t
(
l
);

59 
	}
}

63 
	$lib√t_wrôe_lök
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
size
)

65 
	`nosuµ‹t
(
l
);

67 
	}
}

70 
lib√t_ëhî_addr
 *

71 
	$lib√t_gë_hwaddr
(
lib√t_t
 *
l
)

73 
	`nosuµ‹t
(
l
);

74  
NULL
;

75 
	}
}

	@/workspaces/libnet/src/libnet_link_pf.c

41 
	~"comm⁄.h
"

43 
	~"../ö˛ude/gnuc.h
"

44 #ifde‡
HAVE_OS_PROTO_H


45 
	~"../ö˛ude/os-¥Ÿo.h
"

48 
lib√t_lök_öt
 *

49 
	$lib√t_›í_lök_öãrÁ˚
(
öt8_t
 *
devi˚
, i¡8_à*
ebuf
)

51 
lib√t_lök_öt
 *
l
;

52 
öt16_t
 
ímode
;

53 
backlog
 = -1;

54 
ífûãr
 
Fûãr
;

55 
ídevp
 
dev∑øms
;

57 
l
 = (
lib√t_lök_öt
 *)
	`mÆloc
((*l));

58 i‡(
l
 =
NULL
)

60 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

61 "lib√t_›í_lök_öt: %s", 
	`°ªº‹
(
î∫o
));

64 
	`mem£t
(
l
, 0, (*l));

65 
l
->
fd
 = 
	`pf›í
(
devi˚
, 
O_RDWR
);

66 i‡(
l
->
fd
 < 0)

68 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

70 
devi˚
, 
	`°ªº‹
(
î∫o
));

71 
bad
;

74 
ímode
 = 
ENTSTAMP
|
ENBATCH
|
ENNONEXCL
;

75 i‡(
	`io˘l
(
l
->
fd
, 
EIOCMBIS
, (
ˇddr_t
)&
ímode
) < 0)

77 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

78 "EIOCMBIS: %s", 
	`°ªº‹
(
î∫o
));

79 
bad
;

81 #ifdef 
ENCOPYALL


83 
ímode
 = 
ENCOPYALL
;

84 
	`io˘l
(
l
->
fd
, 
EIOCMBIS
, (
ˇddr_t
)&
ímode
);

87 i‡(
	`io˘l
(
l
->
fd
, 
EIOCSETW
, (
ˇddr_t
)&
backlog
) < 0)

89 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

90 "EIOCSETW: %s", 
	`°ªº‹
(
î∫o
));

91 
bad
;

96 i‡(
	`io˘l
(
l
->
fd
, 
EIOCDEVP
, (
ˇddr_t
)&
dev∑øms
) < 0)

98 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

99 "EIOCDEVP: %s", 
	`°ªº‹
(
î∫o
));

100 
bad
;

104 #i‚def 
ENDT_FDDI


105 
	#ENDT_FDDI
 4

	)

107 
dev∑øms
.
íd_dev_ty≥
)

109 
ENDT_10MB
:

110 
l
->
lökty≥
 = 
DLT_EN10MB
;

112 
ENDT_FDDI
:

113 
l
->
lökty≥
 = 
DLT_FDDI
;

122 
l
->
lökty≥
 = 
DLT_EN10MB
;

128 
	`bzîo
((
öt8_t
 *)&
Fûãr
, (Filter));

129 
Fûãr
.
íf_Pri‹ôy
 = 37;

130 
Fûãr
.
íf_FûãrLí
 = 0;

131 i‡(
	`io˘l
(
l
->
fd
, 
EIOCSETF
, (
ˇddr_t
)&
Fûãr
) < 0)

133 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

134 "EIOCSETF: %s", 
	`°ªº‹
(
î∫o
));

135 
bad
;

138  (
l
);

139 
bad
:

140 
	`‰ì
(
l
);

141  (
NULL
);

142 
	}
}

146 
	$lib√t_˛o£_lök_öãrÁ˚
(
lib√t_lök_öt
 *
l
)

148 i‡(
	`˛o£
(
l
->
fd
) == 0)

150 
	`‰ì
(
l
);

155 
	`‰ì
(
l
);

158 
	}
}

162 
	$lib√t_wrôe_lök_œyî
(
lib√t_lök_öt
 *
l
, c⁄° 
öt8_t
 *
devi˚
,

163 c⁄° 
uöt8_t
 *
buf
, 
Àn
)

165 
c
;

167 
c
 = 
	`wrôe
(
l
->
fd
, 
buf
, 
Àn
);

168 i‡(
c
 !
Àn
)

170 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

171 "lib√t_wrôe_lök: %d byã†wrôã¿(%s)", 
c
,

172 
	`°ªº‹
(
î∫o
));

174  (
c
);

175 
	}
}

	@/workspaces/libnet/src/libnet_link_snit.c

42 
	~"comm⁄.h
"

44 
	~"../ö˛ude/gnuc.h
"

45 #ifde‡
HAVE_OS_PROTO_H


46 
	~"../ö˛ude/os-¥Ÿo.h
"

49 
lib√t_lök_öt
 *

50 
	$lib√t_›í_lök_öãrÁ˚
(
öt8_t
 *
devi˚
, i¡8_à*
ebuf
)

52 
°rio˘l
 
si
;

53 
i‰eq
 
i‰
;

54 
öt8_t
 
dev
[] = "/dev/nit";

55 
lib√t_lök_öt
 *
l
;

57 
l
 = (
lib√t_lök_öt
 *)
	`mÆloc
((*l));

58 i‡(
l
 =
NULL
)

60 
	`°r˝y
(
ebuf
, 
	`°ªº‹
(
î∫o
));

61  (
NULL
);

64 
	`mem£t
(
l
, 0, (*l));

66 
l
->
fd
 = 
	`›í
(
dev
, 
O_RDWR
);

67 i‡(
l
->
fd
 < 0)

69 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

70 "%s: %s", 
dev
, 
	`°ªº‹
(
î∫o
));

71 
bad
;

77 i‡(
	`io˘l
(
l
->
fd
, 
I_SRDOPT
, (
öt8_t
 *)
RMSGD
) < 0)

79 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

80 "I_SRDOPT: %s", 
	`°ªº‹
(
î∫o
));

81 
bad
;

83 i‡(
	`io˘l
(
l
->
fd
, 
I_PUSH
, "nbuf") < 0)

85 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

86 "pushÇbuf: %s", 
	`°ªº‹
(
î∫o
));

87 
bad
;

92 
	`°∫˝y
(
i‰
.
i‰_«me
, 
devi˚
, (ifr.ifr_name) -1);

93 
i‰
.
i‰_«me
[(ifr.ifr_name) - 1] = '\0';

94 
si
.
ic_cmd
 = 
NIOCBIND
;

95 
si
.
ic_Àn
 = (
i‰
);

96 
si
.
ic_dp
 = (
öt8_t
 *)&
i‰
;

97 i‡(
	`io˘l
(
l
->
fd
, 
I_STR
, (
öt8_t
 *)&
si
) < 0)

99 
	`¢¥ötf
(
ebuf
, 
LIBNET_ERRBUF_SIZE
,

100 "NIOCBIND: %s: %s", 
i‰
.
i‰_«me
, 
	`°ªº‹
(
î∫o
));

101 
bad
;

104 
	`io˘l
(
l
->
fd
, 
I_FLUSH
, (
öt8_t
 *)
FLUSHR
);

108 
l
->
lökty≥
 = 
DLT_EN10MB
;

110  (
l
);

111 
bad
:

112 i‡(
l
->
fd
 >= 0)

114 
	`˛o£
(
l
->
fd
);

116 
	`‰ì
(
l
);

117  (
NULL
);

118 
	}
}

122 
	$lib√t_˛o£_lök_öãrÁ˚
(
lib√t_lök_öt
 *
l
)

124 i‡(
	`˛o£
(
l
->
fd
) == 0)

126 
	`‰ì
(
l
);

131 
	`‰ì
(
l
);

134 
	}
}

138 
	$lib√t_wrôe_lök_œyî
(
lib√t_lök_öt
 *
l
, c⁄° 
öt8_t
 *
devi˚
,

139 c⁄° 
uöt8_t
 *
buf
, 
Àn
)

141 
c
;

142 
sockaddr
 
ß
;

144 
	`mem£t
(&
ß
, 0, (sa));

145 
	`°∫˝y
(
ß
.
ß_d©a
, 
devi˚
, (sa.sa_data));

147 
c
 = 
	`£ndto
(
l
->
fd
, 
buf
, 
Àn
, 0, &
ß
, (sa));

148 i‡(
c
 !
Àn
)

153  (
c
);

154 
	}
}

	@/workspaces/libnet/src/libnet_link_snoop.c

38 
	~"comm⁄.h
"

40 
	~<sys/∑øm.h
>

41 
	~<sys/fûe.h
>

42 
	~<√töë/ö.h
>

43 
	~<√töë/udp.h
>

44 
	~<√töë/t˝.h
>

46 
	~<√t/øw.h
>

47 
	~<√t/if.h
>

48 
	~<√t/bpf.h
>

50 
	~<√töë/ù_v¨.h
>

51 
	~<√töë/if_ëhî.h
>

52 
	~<√töë/udp_v¨.h
>

54 
	~"../ö˛ude/gnuc.h
"

55 #ifde‡
HAVE_OS_PROTO_H


56 
	~"../ö˛ude/os-¥Ÿo.h
"

64 
	$lib√t_›í_lök
(
lib√t_t
 *
l
)

66 
fd
;

67 
sockaddr_øw
 
§
;

68 
uöt
 
v
;

70 i‡(
l
 =
NULL
)

75 
l
->
fd
 = 
	`sockë
(
PF_RAW
, 
SOCK_RAW
, 
RAWPROTO_DRAIN
);

77 i‡(
l
->
fd
 < 0)

79 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

80 "døö sockë: %s", 
	`°ªº‹
(
î∫o
));

81 
bad
;

84 
	`mem£t
(&
§
, 0, (sr));

85 
§
.
§_Ámûy
 = 
AF_RAW
;

86 
	`°∫˝y
(
§
.
§_i‚ame
, 
l
->
devi˚
, (sr.sr_ifname) - 1);

87 
§
.
§_i‚ame
[(sr.sr_ifname) - 1] = '\0';

89 i‡(
	`böd
(
l
->
fd
, (
sockaddr
 *)&
§
, (sr)))

91 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

92 "døö böd: %s", 
	`°ªº‹
(
î∫o
));

93 
bad
;

99 i‡(
	`°∫cmp
("ë", 
l
->
devi˚
, 2) == 0 ||

100 
	`°∫cmp
("ec", 
l
->
devi˚
, 2) == 0 ||

101 
	`°∫cmp
("ef", 
l
->
devi˚
, 2) == 0 ||

102 
	`°∫cmp
("g„", 
l
->
devi˚
, 3) == 0 ||

103 
	`°∫cmp
("fxp", 
l
->
devi˚
, 3) == 0 ||

104 
	`°∫cmp
("ï", 
l
->
devi˚
, 2) == 0 ||

105 
	`°∫cmp
("v„", 
l
->
devi˚
, 3) == 0 ||

106 
	`°∫cmp
("Á", 
l
->
devi˚
, 2) == 0 ||

107 
	`°∫cmp
("qØ", 
l
->
devi˚
, 3) == 0)

109 
l
->
lök_ty≥
 = 
DLT_EN10MB
;

111 i‡(
	`°∫cmp
("ùg", 
l
->
devi˚
, 3) == 0 ||

112 
	`°∫cmp
("∫s", 
l
->
devi˚
, 3) == 0 ||

113 
	`°∫cmp
("xpi", 
l
->
devi˚
, 3) == 0)

115 
l
->
lök_ty≥
 = 
DLT_FDDI
;

117 i‡(
	`°∫cmp
("µp", 
l
->
devi˚
, 3) == 0)

119 
l
->
lök_ty≥
 = 
DLT_RAW
;

121 i‡(
	`°∫cmp
("lo", 
l
->
devi˚
, 2) == 0)

123 
l
->
lök_ty≥
 = 
DLT_NULL
;

127 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

129 
bad
;

133 
bad
:

134 
	`˛o£
(
fd
);

135 
	`‰ì
(
l
);

137 
	}
}

141 
	$lib√t_˛o£_lök
(
lib√t_t
 *
l
)

143 i‡(
	`˛o£
(
l
->
fd
) == 0)

151 
	}
}

155 
	$lib√t_wrôe_lök
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
buf
, 
uöt32_t
 
Àn
)

157 
c
;

158 
i‰eq
 
i‰
;

159 
ëhî_hódî
 *
eh
 = (ëhî_hódî *)
buf
;

161 
	`mem£t
(&
i‰
, 0, (ifr));

162 
	`°∫˝y
(
i‰
.
i‰_«me
, 
l
->
devi˚
, (ifr.ifr_name));

164 i‡(
	`io˘l
(
l
->
fd
, 
SIOCGIFADDR
, &
i‰
) == -1)

166 
	`≥º‹
("ioctl SIOCGIFADDR");

170 
	`mem˝y
(
eh
->
ëhî_sho°
, 
i‰
.
i‰_addr
.
ß_d©a
, (eh->ether_shost));

172 i‡(
	`wrôe
(
l
->
fd
, 
buf
, 
Àn
) == -1)

178  (
Àn
);

179 
	}
}

181 
lib√t_ëhî_addr
 *

182 
	$lib√t_gë_hwaddr
(
lib√t_t
 *
l
)

184 
i‰eq
 
ifd©
;

185 
s
 = -1;

187 i‡(-1 =(
s
 = 
	`sockë
(
PF_RAW
, 
SOCK_RAW
, 
RAWPROTO_SNOOP
)))

189 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

190 "sockë(): %s", 
	`°ªº‹
(
î∫o
));

191 
îrout
;

194 
	`mem£t
(&
ifd©
, 0, (
i‰eq
));

195 
	`°∫˝y
(
ifd©
.
i‰_«me
, 
l
->
devi˚
, 
IFNAMSIZ
);

196 i‡(
	`io˘l
(
s
, 
SIOCGIFADDR
, &
ifd©
) < 0)

198 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

199 "SIOCGIFADDR: %s", 
	`°ªº‹
(
î∫o
));

200 
îrout
;

202 
	`˛o£
(
s
);

204  
	`mem˝y
(
l
->
lök_addr
.
ëhî_addr_o˘ë
, &
ifd©
.
i‰_addr
.
ß_d©a
,

205 
ETHER_ADDR_LEN
);

207 
îrout
:

208 i‡(
s
 > 0)

210 
	`˛o£
(
s
);

212 i‡(
ó
)

214 
	`‰ì
(
ó
);

215 
ó
 = 0;

218  
NULL
;

219 
	}
}

	@/workspaces/libnet/src/libnet_link_win32.c

36 
	~<wösock2.h
>

37 
	~<ùhÕ≠i.h
>

38 
	~<ùπrmib.h
>

39 
	~<as£π.h
>

41 
	~"comm⁄.h
"

48 #i‚de‡
DLT_NULL


49 
	#DLT_NULL
 0

	)

52 #i‚de‡
DLT_EN10MB


53 
	#DLT_EN10MB
 1

	)

56 #i‚de‡
DLT_EN3MB


57 
	#DLT_EN3MB
 2

	)

60 #i‚de‡
DLT_AX25


61 
	#DLT_AX25
 3

	)

64 #i‚de‡
DLT_PRONET


65 
	#DLT_PRONET
 4

	)

68 #i‚de‡
DLT_CHAOS


69 
	#DLT_CHAOS
 5

	)

72 #i‚de‡
DLT_IEEE802


73 
	#DLT_IEEE802
 6

	)

76 #i‚de‡
DLT_ARCNET


77 
	#DLT_ARCNET
 7

	)

80 #i‚de‡
DLT_SLIP


81 
	#DLT_SLIP
 8

	)

84 #i‚de‡
DLT_PPP


85 
	#DLT_PPP
 9

	)

88 #i‚de‡
DLT_FDDI


89 
	#DLT_FDDI
 10

	)

102 #i‚de‡
DLT_ATM_RFC1483


103 
	#DLT_ATM_RFC1483
 11

	)

107 
	$lib√t_›í_lök
(
lib√t_t
 *
l
)

109 
DWORD
 
dwEº‹Code
;

110 
NëTy≥
 
IFTy≥
;

112 i‡(
l
 =
NULL
)

117 i‡(
l
->
devi˚
 =
NULL
)

119 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

120 "%s(): NULL devi˚", 
__func__
);

124 
l
->
ÕAd≠ãr
 = 0;

127 
l
->
ÕAd≠ãr
 = 
	`PackëO≥nAd≠ãr
÷->
devi˚
);

128 i‡(!
l
->
ÕAd≠ãr
 || (l->ÕAd≠ãr->
hFûe
 =
INVALID_HANDLE_VALUE
))

130 
dwEº‹Code
=
	`GëLa°Eº‹
();

131 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

133 
__func__
, 
dwEº‹Code
);

138 
	`PackëSëBuff
(
l
->
ÕAd≠ãr
, 512000);

143 i‡(
	`PackëGëNëTy≥
(
l
->
ÕAd≠ãr
, &
IFTy≥
))

145 
IFTy≥
.
LökTy≥
)

147 
NdisMedium802_3
:

148 
l
->
lök_ty≥
 = 
DLT_EN10MB
;

149 
l
->
lök_off£t
 = 
LIBNET_ETH_H
;

151 
NdisMedium802_5
:

152 
l
->
lök_ty≥
 = 
DLT_IEEE802
;

153 
l
->
lök_off£t
 = 
LIBNET_TOKEN_RING_H
;

155 
NdisMediumFddi
:

156 
l
->
lök_ty≥
 = 
DLT_FDDI
;

157 
l
->
lök_off£t
 = 0x15;

159 
NdisMediumW™
:

160 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

162 
__func__
, 
IFTy≥
.
LökTy≥
);

165 
NdisMediumAtm
:

166 
l
->
lök_ty≥
 = 
DLT_ATM_RFC1483
;

168 
NdisMediumAr˙ë878_2
:

169 
l
->
lök_ty≥
 = 
DLT_ARCNET
;

172 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

174 
__func__
, 
IFTy≥
.
LökTy≥
);

181 
dwEº‹Code
=
	`GëLa°Eº‹
();

182 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

184 
__func__
, 
dwEº‹Code
);

188 
	}
}

191 
	$lib√t_˛o£_lök_öãrÁ˚
(
lib√t_t
 *
l
)

193 i‡(
l
->
ÕAd≠ãr
)

195 
	`PackëSëHwFûãr
(
l
->
ÕAd≠ãr
, 
NDIS_PACKET_TYPE_ALL_LOCAL
);

196 
	`PackëClo£Ad≠ãr
(
l
->
ÕAd≠ãr
);

199 
	}
}

202 
	$lib√t_wrôe_lök
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
d©a
, 
uöt32_t
 
size
)

204 
PACKET
 
pkt
;

205 
DWORD
 
ByãsTøns„ªd
 = -1;

209 
	`PackëInôPackë
(&
pkt
, (
PVOID
)
d©a
, 
size
);

211 i‡(
	`PackëSídPackë
(
l
->
ÕAd≠ãr
, &
pkt
, 
TRUE
))

212 
ByãsTøns„ªd
 = 
size
;

214  (
ByãsTøns„ªd
);

215 
	}
}

217 
lib√t_ëhî_addr
 *

218 
	$lib√t_gë_hwaddr
(
lib√t_t
 *
l
)

220 
lib√t_ëhî_addr
 *
mac
 = &
l
->
lök_addr
;

221 
ULONG
 
IoCéBuf„rLígth
 = ((
PACKET_OID_DATA
) + (ULONG) - 1);

222 
PPACKET_OID_DATA
 
OidD©a
;

224 
i
 = 0;

226 i‡(
l
 =
NULL
)

228  (
NULL
);

231 i‡(
l
->
devi˚
 =
NULL
)

233 i‡(
	`lib√t_£À˘_devi˚
(
l
) == -1)

235 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

236 "%s(): c™'àfiguª ouà®devi˚Åÿu£", 
__func__
);

237  (
NULL
);

241 
OidD©a
 = (
_PACKET_OID_DATA
 *)
	`mÆloc
(
IoCéBuf„rLígth
);

242 i‡(
OidD©a
 =
NULL
)

244 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

245 "%s(): OidD©®i†NULL", 
__func__
);

246 (
NULL
);

249 i‡(
l
->
lök_ty≥
 =
DLT_IEEE802
)

251 
OidD©a
->
Oid
 = 
OID_802_5_CURRENT_ADDRESS
;

255 
OidD©a
->
Oid
 = 
OID_802_3_CURRENT_ADDRESS
;

258 
OidD©a
->
Lígth
 = 6;

259 i‡((
	`PackëReque°
(
l
->
ÕAd≠ãr
, 
FALSE
, 
OidD©a
)) == FALSE)

261 
	`mem£t
(
mac
, 0, 6);

265 
i
 = 0; i < 6; i++)

267 
mac
->
ëhî_addr_o˘ë
[
i
] = 
OidD©a
->
D©a
[i];

270 
	`‰ì
(
OidD©a
);

271 (
mac
);

272 
	}
}

275 
BYTE
 *

276 
	$lib√t_wö32_gë_ªmŸe_mac
(
lib√t_t
 *
l
, 
DWORD
 
De°IP
)

278 
HRESULT
 
hr
;

279 
ULONG
 
pulMac
[6];

280 
ULONG
 
ulLí
 = 6;

281 
PBYTE
 
pbHexMac
;

282 
PIP_ADAPTER_INFO
 
pöfo
 = 
NULL
;

283 
DWORD
 
dwSize
 = 0;

284 
sockaddr_ö
 
sö
;

285 
BYTE
 
bˇ°mac
[]= {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

287 
BYTE
 *
MAC
 = 
	`lib√t_wö32_ªad_¨p_èbÀ
(
De°IP
);

289 i‡(
MAC
==
NULL
)

291 
	`mem£t
(
pulMac
, 0xff,  (pulMac));

292 
	`mem£t
(&
sö
, 0, (sin));

294 if((
hr
 = 
	`SídARP
 (
De°IP
, 0, 
pulMac
, &
ulLí
)Ë!
NO_ERROR
)

296 *(
öt32_t
 *)&
sö
.
sö_addr
 = 
De°IP
;

297 
	`GëAd≠ãrsInfo
(
NULL
, &
dwSize
);

298 
pöfo
 = (
PIP_ADAPTER_INFO
)
	`GlobÆAŒoc
(
GPTR
, 
dwSize
);

299 
	`GëAd≠ãrsInfo
(
pöfo
, &
dwSize
);

300 if(
pöfo
 !
NULL
)

302 
De°IP
 = 
	`öë_addr
(
pöfo
->
G©ewayLi°
.
IpAddªss
.
Såög
);

303 
	`mem£t
 (
pulMac
, 0xff,  (pulMac));

304 
ulLí
 = 6;

305 if((
hr
 = 
	`SídARP
 (
De°IP
, 0, 
pulMac
, &
ulLí
)Ë!
NO_ERROR
)

307 
	`GlobÆFªe
(
pöfo
);

308 (
bˇ°mac
);

313 
	`GlobÆFªe
(
pöfo
);

314 (
bˇ°mac
);

318 
pbHexMac
 = (
PBYTE
Ë
pulMac
;

320  (
pbHexMac
);

324  (
MAC
);

326 
	}
}

328 
BYTE
 *
	$lib√t_wö32_ªad_¨p_èbÀ
(
DWORD
 
De°IP
)

330 
BYTE
 
buffMAC
[6];

331 
BOOL
 
fOrdî
 = 
TRUE
;

332 
DWORD
 
°©us
;

334 
MIB_IPNETTABLE
 *
pIpNëTabÀ
 = 
NULL
;

335 
DWORD
 
Size
 = 0;

337 
	`mem£t
(
buffMAC
, 0, (buffMAC));

338 
°©us
 = 
	`GëIpNëTabÀ
(
NULL
, &
Size
, 
fOrdî
);

339 i‡(
°©us
 =
ERROR_INSUFFICIENT_BUFFER
)

341 
pIpNëTabÀ
 = 
	`Æloˇ
(
Size
);

342 
°©us
 = 
	`GëIpNëTabÀ
(
pIpNëTabÀ
, &
Size
, 
fOrdî
);

345 i‡(
°©us
 =
NO_ERROR
)

347 
DWORD
 
i
, 
ci
 = 
pIpNëTabÀ
->
èbÀ
[0].
dwIndex
;

349 
i
 = 0; i < 
pIpNëTabÀ
->
dwNumE¡rõs
; ++i)

351 i‡(
pIpNëTabÀ
->
èbÀ
[
i
].
dwIndex
 !
ci
)

352 
ci
 = 
pIpNëTabÀ
->
èbÀ
[
i
].
dwIndex
;

354 if(
pIpNëTabÀ
->
èbÀ
[
i
].
dwAddr
 =
De°IP
)

356 
	`mem˝y
(
buffMAC
, 
pIpNëTabÀ
->
èbÀ
[
i
].
bPhysAddr
, (buffMAC));

357  
buffMAC
;

362 (
NULL
);

363 
	}
}

	@/workspaces/libnet/src/libnet_pblock.c

33 
	~"comm⁄.h
"

34 
	~<as£π.h
>

36 
lib√t_pblock_t
 *

37 
	$lib√t_pblock_¥obe
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
, 
uöt32_t
 
b_Àn
, 
uöt8_t
 
ty≥
)

39 
off£t
;

40 
lib√t_pblock_t
 *
p
;

42 i‡(
±ag
 =
LIBNET_PTAG_INITIALIZER
)

44  
	`lib√t_pblock_√w
(
l
, 
b_Àn
);

51 
p
 = 
	`lib√t_pblock_föd
(
l
, 
±ag
);

53 i‡(
p
 =
NULL
)

56  (
NULL
);

58 i‡(
p
->
ty≥
 !=Åype)

60 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

62 
__func__
, 
p
->
ty≥
,Åype);

63  (
NULL
);

69 i‡(
b_Àn
 > 
p
->b_len)

71 
off£t
 = 
b_Àn
 - 
p
->b_len;

72 
	`‰ì
(
p
->
buf
);

73 
p
->
buf
 = 
	`mÆloc
(
b_Àn
);

74 i‡(
p
->
buf
 =
NULL
)

76 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

77 "%s(): c™'àªsizêpblock buf„r: %s", 
__func__
,

78 
	`°ªº‹
(
î∫o
));

79  (
NULL
);

81 
	`mem£t
(
p
->
buf
, 0, 
b_Àn
);

82 
p
->
h_Àn
 +
off£t
;

83 
p
->
b_Àn
 = b_len;

84 
l
->
tŸÆ_size
 +
off£t
;

88 
off£t
 = 
p
->
b_Àn
 - b_len;

89 
p
->
h_Àn
 -
off£t
;

90 
p
->
b_Àn
 = b_len;

91 
l
->
tŸÆ_size
 -
off£t
;

93 
p
->
c›õd
 = 0;

95  (
p
);

96 
	}
}

98 * 
	$zmÆloc
(
lib√t_t
* 
l
, 
uöt32_t
 
size
, c⁄° * 
func
)

100 * 
v
 = 
	`mÆloc
(
size
);

101 if(
v
)

102 
	`mem£t
(
v
, 0, 
size
);

104 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): mÆloc(): %s", 
func
,

105 
	`°ªº‹
(
î∫o
));

106  
v
;

107 
	}
}

109 
lib√t_pblock_t
 *

110 
	$lib√t_pblock_√w
(
lib√t_t
 *
l
, 
uöt32_t
 
b_Àn
)

112 
lib√t_pblock_t
 *
p
 = 
	`zmÆloc
(
l
, ÷ib√t_pblock_t), 
__func__
);

113 if(!
p
)

114  
NULL
;

116 
p
->
buf
 = 
	`zmÆloc
(
l
, 
b_Àn
, 
__func__
);

118 if(!
p
->
buf
)

120 
	`‰ì
(
p
);

121  
NULL
;

124 
p
->
b_Àn
 = b_len;

126 
l
->
tŸÆ_size
 +
b_Àn
;

127 
l
->
n_pblocks
++;

130 i‡(
l
->
¥Ÿocﬁ_blocks
 =
NULL
)

132 
l
->
¥Ÿocﬁ_blocks
 = 
p
;

133 
l
->
pblock_íd
 = 
p
;

137 
l
->
pblock_íd
->
√xt
 = 
p
;

138 
p
->
¥ev
 = 
l
->
pblock_íd
;

139 
l
->
pblock_íd
 = 
p
;

142  
p
;

143 
	}
}

146 
	$lib√t_pblock_sw≠
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag1
,Üib√t_±ag_à
±ag2
)

148 
lib√t_pblock_t
 *
p1
, *
p2
;

150 
p1
 = 
	`lib√t_pblock_föd
(
l
, 
±ag1
);

151 
p2
 = 
	`lib√t_pblock_föd
(
l
, 
±ag2
);

152 i‡(
p1
 =
NULL
 || 
p2
 == NULL)

158 
p2
->
¥ev
 = 
p1
->prev;

159 
p1
->
√xt
 = 
p2
->next;

160 
p2
->
√xt
 = 
p1
;

161 
p1
->
¥ev
 = 
p2
;

163 i‡(
p1
->
√xt
)

165 
p1
->
√xt
->
¥ev
 =Ö1;

168 i‡(
p2
->
¥ev
)

170 
p2
->
¥ev
->
√xt
 =Ö2;

175 
l
->
¥Ÿocﬁ_blocks
 = 
p2
;

178 i‡(
l
->
pblock_íd
 =
p2
)

180 
l
->
pblock_íd
 = 
p1
;

183 
	}
}

185 
	$lib√t_pblock_ªmove_‰om_li°
(
lib√t_t
 *
l
, 
lib√t_pblock_t
 *
p
)

187 i‡(
p
->
¥ev
)

189 
p
->
¥ev
->
√xt
 =Ö->next;

193 
l
->
¥Ÿocﬁ_blocks
 = 
p
->
√xt
;

196 i‡(
p
->
√xt
)

198 
p
->
√xt
->
¥ev
 =Ö->prev;

202 
l
->
pblock_íd
 = 
p
->
¥ev
;

204 
	}
}

207 
	$lib√t_pblock_ö£π_bef‹e
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag1
,

208 
lib√t_±ag_t
 
±ag2
)

210 
lib√t_pblock_t
 *
p1
, *
p2
;

212 
p1
 = 
	`lib√t_pblock_föd
(
l
, 
±ag1
);

213 
p2
 = 
	`lib√t_pblock_föd
(
l
, 
±ag2
);

214 i‡(
p1
 =
NULL
 || 
p2
 == NULL)

221 if(
p2
->
√xt
 =
p1
)

224 
	`lib√t_pblock_ªmove_‰om_li°
(
l
, 
p2
);

227 
p2
->
¥ev
 = 
p1
->prev;

228 
p2
->
√xt
 = 
p1
;

229 
p1
->
¥ev
 = 
p2
;

231 i‡(
p2
->
¥ev
)

233 
p2
->
¥ev
->
√xt
 =Ö2;

238 
l
->
¥Ÿocﬁ_blocks
 = 
p2
;

242 
	}
}

244 
lib√t_pblock_t
 *

245 
	$lib√t_pblock_föd
(
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

247 
lib√t_pblock_t
 *
p
;

249 
p
 = 
l
->
¥Ÿocﬁ_blocks
;Ö;Ö =Ö->
√xt
)

251 i‡(
p
->
±ag
 ==Ötag)

253  (
p
);

256 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

257 "%s(): couldn'àfödÖrŸocﬁ block", 
__func__
);

258  (
NULL
);

259 
	}
}

262 
	$lib√t_pblock_≠≥nd
(
lib√t_t
 *
l
, 
lib√t_pblock_t
 *
p
, c⁄° *
buf
, 
uöt32_t
 
Àn
)

264 i‡(
Àn
 && !
buf
)

266 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

267 "%s():Öaylﬂd inc⁄si°ícy", 
__func__
);

271 i‡(
p
->
c›õd
 + 
Àn
 >Ö->
b_Àn
)

273 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

274 "%s(): mem˝y would ovîÊow buf„r", 
__func__
);

277 
	`mem˝y
(
p
->
buf
 +Ö->
c›õd
, buf, 
Àn
);

278 
p
->
c›õd
 +
Àn
;

280 
	}
}

283 
	$lib√t_pblock_£tÊags
(
lib√t_pblock_t
 *
p
, 
uöt8_t
 
Êags
)

285 
p
->
Êags
 = flags;

286 
	}
}

289 
lib√t_±ag_t


290 
	$lib√t_pblock_upd©e
(
lib√t_t
 *
l
, 
lib√t_pblock_t
 *
p
, 
uöt32_t
 
h_Àn
, 
uöt8_t
 
ty≥
)

292 
p
->
ty≥
 =Åype;

293 
p
->
±ag
 = ++(
l
->
±ag_°©e
);

294 
p
->
h_Àn
 = h_len;

295 
l
->
pblock_íd
 = 
p
;

297  (
p
->
±ag
);

298 
	}
}

300 
	$pblock_is_ù
(
lib√t_pblock_t
* 
p
)

302  
p
->
ty≥
 =
LIBNET_PBLOCK_IPV4_H
 ||Ö->ty≥ =
LIBNET_PBLOCK_IPV6_H
;

303 
	}
}

309 
	$ˇlcuœã_ù_off£t
(
lib√t_t
* 
l
, 
lib√t_pblock_t
* 
q
)

311 
ù_off£t
 = 0;

312 
lib√t_pblock_t
* 
p
 = 
l
->
¥Ÿocﬁ_blocks
;

313 ; 
p
 &&Ö !
q
;Ö =Ö->
√xt
) {

314 
ù_off£t
 +
p
->
b_Àn
;

316 
	`as£π
(
p
 =
q
);

318 ; 
p
;Ö =Ö->
√xt
) {

319 
ù_off£t
 +
p
->
b_Àn
;

320 if(
	`pblock_is_ù
(
p
))

324  
ù_off£t
;

325 
	}
}

328 
	$lib√t_pblock_cﬂÀs˚
(
lib√t_t
 *
l
, 
uöt8_t
 **
∑ckë
, 
uöt32_t
 *
size
)

336 i‡(
l
->
öje˘i⁄_ty≥
 =
LIBNET_LINK
 ||

337 
l
->
öje˘i⁄_ty≥
 =
LIBNET_LINK_ADV
)

340 
l
->
Æig√r
 = 8 - (l->
lök_off£t
 % 8);

344 
l
->
Æig√r
 = 0;

347 if(!
l
->
tŸÆ_size
 && !l->
Æig√r
) {

349 *
∑ckë
 = 
	`mÆloc
(1);

350 **
∑ckë
 =1;

352 *
∑ckë
 = 
	`mÆloc
(
l
->
Æig√r
 +Ü->
tŸÆ_size
);

354 i‡(*
∑ckë
 =
NULL
)

356 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s(): malloc(): %s",

357 
__func__
, 
	`°ªº‹
(
î∫o
));

361 
	`mem£t
(*
∑ckë
, 0, 
l
->
Æig√r
 +Ü->
tŸÆ_size
);

363 i‡(
l
->
öje˘i⁄_ty≥
 =
LIBNET_RAW4
 &&

364 
l
->
pblock_íd
->
ty≥
 =
LIBNET_PBLOCK_IPV4_H
)

366 
	`lib√t_pblock_£tÊags
(
l
->
pblock_íd
, 
LIBNET_PBLOCK_DO_CHECKSUM
);

370 i‡(!(
l
->
öje˘i⁄_ty≥
 & 
LIBNET_ADV_MASK
))

372 
l
->
öje˘i⁄_ty≥
)

374 
LIBNET_LINK
:

375 i‡((
l
->
pblock_íd
->
ty≥
 !
LIBNET_PBLOCK_TOKEN_RING_H
) &&

376 (
l
->
pblock_íd
->
ty≥
 !
LIBNET_PBLOCK_FDDI_H
) &&

377 (
l
->
pblock_íd
->
ty≥
 !
LIBNET_PBLOCK_ETH_H
) &&

378 (
l
->
pblock_íd
->
ty≥
 !
LIBNET_PBLOCK_802_1Q_H
) &&

379 (
l
->
pblock_íd
->
ty≥
 !
LIBNET_PBLOCK_ISL_H
) &&

380 (
l
->
pblock_íd
->
ty≥
 !
LIBNET_PBLOCK_802_3_H
))

382 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

384 
__func__
);

385 
îr
;

388 
LIBNET_RAW4
:

389 i‡((
l
->
pblock_íd
->
ty≥
 !
LIBNET_PBLOCK_IPV4_H
))

391 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

393 
__func__
);

394 
îr
;

397 
LIBNET_RAW6
:

398 i‡((
l
->
pblock_íd
->
ty≥
 !
LIBNET_PBLOCK_IPV6_H
))

400 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

402 
__func__
);

403 
îr
;

408 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

410 
__func__
);

411 
îr
;

438 
lib√t_pblock_t
 *
q
 = 
NULL
;

439 
lib√t_pblock_t
 *
p
 = 
NULL
;

440 
uöt32_t
 
n
;

442 
n
 = 
l
->
Æig√r
 +Ü->
tŸÆ_size
, 
p
 =Ü->
¥Ÿocﬁ_blocks
;Ö || 
q
; )

444 i‡(
q
)

446 
p
 =Ö->
√xt
;

448 i‡(
p
)

450 
n
 -
p
->
b_Àn
;

452 
	`mem˝y
(*
∑ckë
 + 
n
, 
p
->
buf
,Ö->
b_Àn
);

455 
	`¥ötf
("--Ç %d/%d cksum? %d\n", 
n
, 
l
->
Æig√r
 +Ü->
tŸÆ_size
,

456 
q
 &&

457 (
p
 =
NULL
 || (p->
Êags
 & 
LIBNET_PBLOCK_DO_CHECKSUM
)) &&

458 (
q
->
Êags
 & 
LIBNET_PBLOCK_DO_CHECKSUM
));

459 if(
q
)

461 
	`¥ötf
(" iph %d/%d offset -%d\n",

462 (
l
->
tŸÆ_size
 +Ü->
Æig√r
Ë- 
q
->
ù_off£t
,

463 
l
->
tŸÆ_size
 +Ü->
Æig√r
,

464 
q
->
ù_off£t


467 i‡(
p
)

469 
	`¥ötf
("p %pÖtag %d b_len %d h_len %d cksum? %dÅype %s\n",

470 
p
,Ö->
±ag
,

471 
p
->
b_Àn
,Ö->
h_Àn
,

472 
p
->
Êags
 & 
LIBNET_PBLOCK_DO_CHECKSUM
,

473 
	`lib√t_düg_dump_pblock_ty≥
(
p
->
ty≥
)

476 i‡(
q
)

478 
	`¥ötf
("q %pÖtag %d b_len %d h_len %d cksum? %dÅype %s\n",

479 
q
, q->
±ag
,

480 
q
->
b_Àn
, q->
h_Àn
,

481 
q
->
Êags
 & 
LIBNET_PBLOCK_DO_CHECKSUM
,

482 
	`lib√t_düg_dump_pblock_ty≥
(
q
->
ty≥
)

486 i‡(
q
)

488 i‡(
p
 =
NULL
 || (p->
Êags
 & 
LIBNET_PBLOCK_DO_CHECKSUM
))

490 i‡(
q
->
Êags
 & 
LIBNET_PBLOCK_DO_CHECKSUM
)

492 
uöt8_t
* 
íd
 = *
∑ckë
 + 
l
->
Æig√r
 +Ü->
tŸÆ_size
;

493 
uöt8_t
* 
beg
 = *
∑ckë
 + 
n
;

494 
ù_off£t
 = 
	`ˇlcuœã_ù_off£t
(
l
, 
q
);

495 
uöt8_t
* 
ùh
 = 
íd
 - 
ù_off£t
;

497 
	`¥ötf
("p %d/%s q %d/%s offset calculated %d\n",

498 
p
 ?Ö->
±ag
 : -1,Ö ? 
	`lib√t_düg_dump_pblock_ty≥
’->
ty≥
) : "nil",

499 
q
->
±ag
, 
	`lib√t_düg_dump_pblock_ty≥
(q->
ty≥
),

500 
ù_off£t
);

502 i‡(
	`lib√t_öë_checksum
(
l
, 
ùh
,

503 
	`lib√t_pblock_p2p
(
q
->
ty≥
), q->
h_Àn
,

504 
beg
, 
íd
) == -1)

507 
îr
;

510 
q
 = 
p
;

515 
q
 = 
p
;

519 *
size
 = 
l
->
Æig√r
 +Ü->
tŸÆ_size
;

525 i‡((
l
->
öje˘i⁄_ty≥
 =
LIBNET_LINK
 ||

526 
l
->
öje˘i⁄_ty≥
 =
LIBNET_LINK_ADV
Ë&&Ü->
Æig√r
)

528 *
∑ckë
 +
l
->
Æig√r
;

529 *
size
 -
l
->
Æig√r
;

533 
îr
:

534 
	`‰ì
(*
∑ckë
);

535 *
∑ckë
 = 
NULL
;

537 
	}
}

540 
	$lib√t_pblock_dñëe
(
lib√t_t
 *
l
, 
lib√t_pblock_t
 *
p
)

542 i‡(
p
)

544 
l
->
tŸÆ_size
 -
p
->
b_Àn
;

545 
l
->
n_pblocks
--;

547 
	`lib√t_pblock_ªmove_‰om_li°
(
l
, 
p
);

549 i‡(
p
->
buf
)

551 
	`‰ì
(
p
->
buf
);

552 
p
->
buf
 = 
NULL
;

555 
	`‰ì
(
p
);

557 
	}
}

560 
	$lib√t_pblock_p2p
(
uöt8_t
 
ty≥
)

563 
ty≥
)

565 
LIBNET_PBLOCK_CDP_H
:

566  (
LIBNET_PROTO_CDP
);

567 
LIBNET_PBLOCK_ICMPV4_H
:

568 
LIBNET_PBLOCK_ICMPV4_ECHO_H
:

569 
LIBNET_PBLOCK_ICMPV4_MASK_H
:

570 
LIBNET_PBLOCK_ICMPV4_UNREACH_H
:

571 
LIBNET_PBLOCK_ICMPV4_TIMXCEED_H
:

572 
LIBNET_PBLOCK_ICMPV4_REDIRECT_H
:

573 
LIBNET_PBLOCK_ICMPV4_TS_H
:

574  (
IPPROTO_ICMP
);

575 
LIBNET_PBLOCK_ICMPV6_H
:

576 
LIBNET_PBLOCK_ICMPV6_ECHO_H
:

577 
LIBNET_PBLOCK_ICMPV6_UNREACH_H
:

578 
LIBNET_PBLOCK_ICMPV6_NDP_NSOL_H
:

579 
LIBNET_PBLOCK_ICMPV6_NDP_NADV_H
:

580  (
IPPROTO_ICMPV6
);

581 
LIBNET_PBLOCK_IGMP_H
:

582  (
IPPROTO_IGMP
);

583 
LIBNET_PBLOCK_IPV4_H
:

584  (
IPPROTO_IP
);

585 
LIBNET_PBLOCK_IPV6_H
:

586  (
IPPROTO_IPV6
);

587 
LIBNET_ISL_H
:

588  (
LIBNET_PROTO_ISL
);

589 
LIBNET_PBLOCK_OSPF_H
:

590  (
IPPROTO_OSPF
);

591 
LIBNET_PBLOCK_LS_RTR_H
:

592  (
IPPROTO_OSPF_LSA
);

593 
LIBNET_PBLOCK_TCP_H
:

594  (
IPPROTO_TCP
);

595 
LIBNET_PBLOCK_UDP_H
:

596  (
IPPROTO_UDP
);

597 
LIBNET_PBLOCK_VRRP_H
:

598  (
IPPROTO_VRRP
);

599 
LIBNET_PBLOCK_GRE_H
:

600  (
IPPROTO_GRE
);

604 
	}
}

607 
	$lib√t_pblock_ªc‹d_ù_off£t
(
lib√t_t
 *
l
, 
lib√t_pblock_t
 *
p
)

609 (Ë
l
;

610 (Ë
p
;

614 
	}
}

	@/workspaces/libnet/src/libnet_port_list.c

33 
	~"comm⁄.h
"

35 
uöt16_t
 *
	gÆl_li°s
;

38 
	$lib√t_∂i°_chaö_√w
(
lib√t_t
 *
l
, 
lib√t_∂i°_t
 **
∂i°
, *
tokí_li°
)

40 
lib√t_∂i°_ÀgÆ_tokís
[] = "0123456789,- ";

41 
lib√t_∂i°_t
 *
tmp
;

42 *
tok
;

43 
i
, 
vÆid_tokí
, 
cur_node
;

44 
size_t
 
j
;

45 
uöt16_t
 *
Æl_li°s_tmp
;

46 
uöt8_t
 
cur_id
;

48 i‡(
l
 =
NULL
)

53 i‡(
tokí_li°
 =
NULL
)

61 
i
 = 0; 
tokí_li°
[i]; i++)

63 
j
 = 0, 
vÆid_tokí
 = 0; 
lib√t_∂i°_ÀgÆ_tokís
[j]; j++)

65 i‡(
lib√t_∂i°_ÀgÆ_tokís
[
j
] =
tokí_li°
[
i
])

67 
vÆid_tokí
 = 1;

71 i‡(!
vÆid_tokí
)

73 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

75 
i
 + 1,

76 
tokí_li°
[
i
]);

77 *
∂i°
 = 
NULL
;

83 *
∂i°
 = 
	`mÆloc
( (
lib√t_∂i°_t
));

85 i‡(!(*
∂i°
))

87 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

88 "lib√t_buûd_∂i°_chaö: mÆlo¯%s", 
	`°ªº‹
(
î∫o
));

89 *
∂i°
 = 
NULL
;

93 
tmp
 = *
∂i°
;

94 
tmp
->
node
 = 
cur_node
 = 0;

95 
tmp
->
√xt
 = 
NULL
;

96 
tmp
->
id
 = 
cur_id
;

97 
Æl_li°s_tmp
 = 
Æl_li°s
;

98 
Æl_li°s
 = 
	`ªÆloc
(
Æl_li°s_tmp
, ((
uöt16_t
Ë* (
cur_id
 + 1)));

99 i‡(!
Æl_li°s
)

101 
Æl_li°s
 = 
Æl_li°s_tmp
;

102 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

103 "lib√t_buûd_∂i°_chaö:ÑóŒo¯%s", 
	`°ªº‹
(
î∫o
));

104 
	`‰ì
(
tmp
);

105 *
∂i°
 = 
NULL
;

109 
Æl_li°s
[
cur_id
++] = 0;

116 
i
 = 0; (
tok
 = 
	`°πok
(!ò? 
tokí_li°
 : 
NULL
, ",")); i = 1, 
cur_node
++)

122 i‡(
i
)

124 
tmp
->
√xt
 = 
	`mÆloc
( (
lib√t_∂i°_t
));

125 i‡(!
tmp
->
√xt
)

127 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

128 "lib√t_buûd_∂i°_chaö: mÆlo¯%s", 
	`°ªº‹
(
î∫o
));

133 *
∂i°
 = 
NULL
;

136 
tmp
 =Åmp->
√xt
;

137 
tmp
->
node
 = 
cur_node
;

138 
tmp
->
√xt
 = 
NULL
;

140 
tmp
->
bp‹t
 = 
	`©oi
(
tok
);

145 
j
 = 0;

146 
	`isdigô
(()
tok
[
j
]))

148 
j
++;

158 i‡(
tok
[
j
] == '-')

160 
tmp
->
ï‹t
 = (++
j
 !
	`°æí
(
tok
)Ë? 
	`©oi
(&tok[j]) : 65535;

164 
tmp
->
ï‹t
 =Åmp->
bp‹t
;

170 i‡(
tmp
->
bp‹t
 >Åmp->
ï‹t
)

172 
tmp
->
bp‹t
 ^tmp->
ï‹t
;

173 
tmp
->
ï‹t
 ^tmp->
bp‹t
;

174 
tmp
->
bp‹t
 ^tmp->
ï‹t
;

181 (*
∂i°
)->
node
 = 
cur_node
;

183 
	}
}

186 
	$lib√t_∂i°_chaö_√xt_∑ú
(
lib√t_∂i°_t
 *
∂i°
, 
uöt16_t
 *
bp‹t
,

187 
uöt16_t
 *
ï‹t
)

189 
uöt16_t
 *
node_˙t
;

190 
uöt16_t
 
tmp_˙t
;

192 i‡(
∂i°
 =
NULL
)

196 
node_˙t
 = &(
Æl_li°s
[
∂i°
->
id
]);

201 i‡(*
node_˙t
 =
∂i°
->
node
)

203 *
node_˙t
 = 0;

204 *
bp‹t
 = 0;

205 *
ï‹t
 = 0;

209 
tmp_˙t
 = *
node_˙t
;Åmp_˙t;Åmp_˙t--, 
∂i°
 =Öli°->
√xt
) ;

210 *
bp‹t
 = 
∂i°
->bport;

211 *
ï‹t
 = 
∂i°
->eport;

212 *
node_˙t
 += 1;

214 
	}
}

217 
	$lib√t_∂i°_chaö_dump
(
lib√t_∂i°_t
 *
∂i°
)

219 i‡(
∂i°
 =
NULL
)

224 ; 
∂i°
;Öli° =Öli°->
√xt
)

226 i‡(
∂i°
->
bp‹t
 =∂i°->
ï‹t
)

228 
	`Ârötf
(
°dout
, "%d ", 
∂i°
->
bp‹t
);

232 
	`Ârötf
(
°dout
, "%d-%d ", 
∂i°
->
bp‹t
,Öli°->
ï‹t
);

235 
	`Ârötf
(
°dout
, "\n");

237 
	}
}

240 
	$lib√t_∂i°_chaö_dump_°rög
(
lib√t_∂i°_t
 *
∂i°
)

242 
buf
[
BUFSIZ
] = {0};

243 
i
, 
j
;

245 i‡(
∂i°
 =
NULL
)

247  (
NULL
);

250 
i
 = 0, 
j
 = 0; 
∂i°
;Öli° =Öli°->
√xt
)

252 i‡(
∂i°
->
bp‹t
 =∂i°->
ï‹t
)

254 
i
 = 
	`¢¥ötf
(&
buf
[
j
], 
BUFSIZ
-j, "%d", 
∂i°
->
bp‹t
);

258 
i
 = 
	`¢¥ötf
(&
buf
[
j
], 
BUFSIZ
-j, "%d-%d", 
∂i°
->
bp‹t
,Öli°->
ï‹t
);

260 
j
 +
i
;

261 i‡(
∂i°
->
√xt
)

263 
	`¢¥ötf
(&
buf
[
j
], 
BUFSIZ
-j, ",");

264 
j
++;

267  (
	`°rdup
(
buf
));

268 
	}
}

271 
	$lib√t_∂i°_chaö_‰ì
(
lib√t_∂i°_t
 *
∂i°
)

273 
uöt16_t
 
i
;

274 
lib√t_∂i°_t
 *
tmp
;

276 i‡(
∂i°
 =
NULL
)

281 
i
 = 
∂i°
->
node
; i; i--)

283 
tmp
 = 
∂i°
;

284 
∂i°
 =Öli°->
√xt
;

285 
	`‰ì
(
tmp
);

287 
∂i°
 = 
NULL
;

289 
	}
}

	@/workspaces/libnet/src/libnet_prand.c

31 
	~"comm⁄.h
"

33 #ifde‡
_WIN32


34 
	~<wö¸y±.h
>

35 
	~<time.h
>

38 
	~<sys/time.h
>

43 
	$lib√t_£ed_¥™d
(
lib√t_t
 *
l
)

45 #i‚de‡
WIN32


46 
timevÆ
 
£ed
;

49 i‡(
l
 =
NULL
)

54 #ifde‡
WIN32


55 
	`§™d
(()
	`time
(
NULL
));

57 i‡(
	`gëtimeofday
(&
£ed
, 
NULL
) == -1)

59 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

60 "%s(): c™nŸ gëtimeofday", 
__func__
);

67 
	`§™dom
(()(
£ed
.
tv_£c
 ^ sìd.
tv_u£c
));

70 
	}
}

77 
uöt32_t


78 
	$lib√t_gë_¥™d
(
mod
)

80 
uöt32_t
 
n
;

81 #i‚de‡
WIN32


82 
n
 = 
	`øndom
();

84 
HCRYPTPROV
 
hProv
 = 0;

86 
	`Cry±AcquúeC⁄ãxt
(&
hProv
,

87 0, 0, 
PROV_RSA_FULL
, 
CRYPT_VERIFYCONTEXT
);

89 
	`Cry±GíR™dom
(
hProv
, (
n
), (
BYTE
*)&n);

90 
	`Cry±Rñó£C⁄ãxt
(
hProv
, 0);

92 
mod
)

94 
LIBNET_PR2
:

95  (
n
 & 0x1);

96 
LIBNET_PR8
:

97  (
n
 & 0xff);

98 
LIBNET_PR16
:

99  (
n
 & 0x7fff);

100 
LIBNET_PRu16
:

101  (
n
 & 0xffff);

102 
LIBNET_PR32
:

103  (
n
 & 0x7fffffff);

104 
LIBNET_PRu32
:

105  (
n
);

108 
	}
}

	@/workspaces/libnet/src/libnet_raw.c

33 
	~"comm⁄.h
"

35 #i‚de‡
HAVE_SOCKLEN_T


36 
	tsockÀn_t
;

42 #i‡
deföed
 (
__WIN32__
)

44 
	$lib√t_›í_øw4
(
lib√t_t
 *
l
)

46  (
	`lib√t_›í_lök
(
l
));

47 
	}
}

50 
	$lib√t_›í_øw6
(
lib√t_t
 *
l
)

52  (
	`lib√t_›í_lök
(
l
));

53 
	}
}

56 
	$lib√t_˛o£_øw4
(
lib√t_t
 *
l
)

58  (
	`lib√t_˛o£_lök_öãrÁ˚
(
l
));

59 
	}
}

62 
	$lib√t_˛o£_øw6
(
lib√t_t
 *
l
)

64  (
	`lib√t_˛o£_lök_öãrÁ˚
(
l
));

65 
	}
}

68 
	$lib√t_föish_£tup_sockë
(
lib√t_t
 *
l
)

70 #i‡!(
__WIN32__
)

71 
n
 = 1;

72 #i‡(
__svr4__
)

73 *
≈å
 = &
n
;

75 *
≈å
 = &
n
;

78 
BOOL
 
n
;

80 
Àn
;

82 #ifde‡
SO_SNDBUF


91 
Àn
 = (
n
);

92 i‡(
	`gësock›t
(
l
->
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
n
, &
Àn
) < 0)

94 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

96 
__func__
, 
	`°ªº‹
(
î∫o
));

97 
bad
;

100 
n
 += 128;Ç < 1048576;Ç += 128)

102 i‡(
	`£tsock›t
(
l
->
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
n
, 
Àn
) < 0)

104 i‡(
î∫o
 =
ENOBUFS
)

108 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

110 
__func__
, 
	`°ªº‹
(
î∫o
));

111 
bad
;

116 #ifde‡
SO_BROADCAST


125 i‡(
	`£tsock›t
(
l
->
fd
, 
SOL_SOCKET
, 
SO_BROADCAST
, 
≈å
, (
n
)) == -1)

127 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

129 
__func__
, 
	`°ªº‹
(
î∫o
));

130 
bad
;

134 #i‡(
__löux__
)

135 if(
l
->
devi˚
 !
NULL
)

136 if(
	`£tsock›t
(
l
->
fd
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
,Ü->
devi˚
, 
	`°æí
(l->device)) == -1) {

137 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

138 "%s(): së SO_BINDTODEVICE faûed: %s", 
__func__
, 
	`°ªº‹
(
î∫o
));

139 
bad
;

145 
bad
:

147 
	}
}

153 
	$lib√t_›í_øw4
(
lib√t_t
 *
l
)

155 #i‡!(
__WIN32__
)

156 
n
 = 1;

157 #i‡(
__svr4__
)

158 *
≈å
 = &
n
;

160 *
≈å
 = &
n
;

163 
BOOL
 
n
;

166 i‡(
l
 =
NULL
)

171 
l
->
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
IPPROTO_RAW
);

172 i‡(
l
->
fd
 == -1)

174 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

176 
__func__
, 
	`°ªº‹
(
î∫o
));

177 
bad
;

180 #ifde‡
IP_HDRINCL


189 #i‡!(
__WIN32__
)

190 i‡(
	`£tsock›t
(
l
->
fd
, 
IPPROTO_IP
, 
IP_HDRINCL
, 
≈å
, (
n
)) == -1)

192 
n
 = 
TRUE
;

193 i‡(
	`£tsock›t
(
l
->
fd
, 
IPPROTO_IP
, 
IP_HDRINCL
, &
n
, (n)) == -1)

197 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

199 
__func__
, 
	`°ªº‹
(
î∫o
));

200 
bad
;

205 i‡(
	`lib√t_föish_£tup_sockë
(
l
) == -1)

206 
bad
;

208  (
l
->
fd
);

210 
bad
:

212 
	}
}

216 
	$lib√t_˛o£_øw4
(
lib√t_t
 *
l
)

218 i‡(
l
 =
NULL
)

223  (
	`˛o£
(
l
->
fd
));

224 
	}
}

226 #i‡((
deföed
 
HAVE_SOLARIS
 && !deföed 
HAVE_SOLARIS_IPV6
Ë|| deföed (
__WIN32__
))

227 
	$lib√t_›í_øw6
(
lib√t_t
 *
l
)

230 
	}
}

234 
	$lib√t_›í_øw6
(
lib√t_t
 *
l
)

236 i‡(
l
 =
NULL
)

241 
l
->
fd
 = 
	`sockë
(
AF_INET6
, 
SOCK_RAW
, 
IPPROTO_RAW
);

242 i‡(
l
->
fd
 == -1)

244 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

245 "%s(): SOCK_RAWáŒoˇti⁄ faûed: %s", 
__func__
,

246 
	`°ªº‹
(
î∫o
));

247 
bad
;

251 i‡(
	`lib√t_föish_£tup_sockë
(
l
) == -1)

252 
bad
;

254  (
l
->
fd
);

256 
bad
:

258 
	}
}

262 
	$lib√t_˛o£_øw6
(
lib√t_t
 *
l
)

264 i‡(
l
 =
NULL
)

268  (
	`˛o£
(
l
->
fd
));

269 
	}
}

	@/workspaces/libnet/src/libnet_resolve.c

31 
	~"comm⁄.h
"

33 #i‚de‡
HAVE_GETHOSTBYNAME2


34 
ho°ít
 *

35 
	$gëho°by«me2
(c⁄° *
«me
, 
af
)

37  
	`gëho°by«me
(
«me
);

38 
	}
}

42 
	$lib√t_addr2«me4
(
uöt32_t
 
ö
, 
uöt8_t
 
u£_«me
)

44 
	#HOSTNAME_SIZE
 512

	)

45 
ho°«me
[
HOSTNAME_SIZE
+1], 
ho°«me2
[HOSTNAME_SIZE+1];

46 
uöt16_t
 
which
;

47 
uöt8_t
 *
p
;

49 
ho°ít
 *
ho°_ít
 = 
NULL
;

50 
ö_addr
 
addr
;

59 
which
++;

61 i‡(
u£_«me
 =
LIBNET_RESOLVE
)

63 
addr
.
s_addr
 = 
ö
;

64 
ho°_ít
 = 
	`gëho°byaddr
((
öt8_t
 *)&
addr
, (
ö_addr
), 
AF_INET
);

67 i‡(!
ho°_ít
)

70 
p
 = (
uöt8_t
 *)&
ö
;

71 
	`¢¥ötf
(((
which
 % 2Ë? 
ho°«me
 : 
ho°«me2
), 
HOSTNAME_SIZE
,

73 (
p
[0] & 255), (p[1] & 255), (p[2] & 255), (p[3] & 255));

75 i‡(
u£_«me
 =
LIBNET_RESOLVE
)

77 *
±r
 = ((
which
 % 2Ë? 
ho°«me
 : 
ho°«me2
);

78 
	`°∫˝y
(
±r
, 
ho°_ít
->
h_«me
, 
HOSTNAME_SIZE
);

79 
±r
[
HOSTNAME_SIZE
] = '\0';

82  (
which
 % 2Ë? (
ho°«me
Ë: (
ho°«me2
);

83 
	}
}

86 
	$lib√t_addr2«me4_r
(
uöt32_t
 
ö
, 
uöt8_t
 
u£_«me
, *
ho°«me
,

87 
ho°«me_Àn
)

89 
uöt8_t
 *
p
;

90 
ho°ít
 *
ho°_ít
 = 
NULL
;

91 
ö_addr
 
addr
;

93 i‡(
u£_«me
 =
LIBNET_RESOLVE
)

95 
addr
.
s_addr
 = 
ö
;

96 
ho°_ít
 = 
	`gëho°byaddr
((
öt8_t
 *)&
addr
, (
ö_addr
),

97 
AF_INET
);

99 i‡(!
ho°_ít
)

101 
p
 = (
uöt8_t
 *)&
ö
;

102 
	`¢¥ötf
(
ho°«me
, 
ho°«me_Àn
, "%d.%d.%d.%d",

103 (
p
[0] & 255), (p[1] & 255), (p[2] & 255), (p[3] & 255));

107 
	`°∫˝y
(
ho°«me
, 
ho°_ít
->
h_«me
, 
ho°«me_Àn
 - 1);

108 
ho°«me
[(hostname) - 1] = '\0';

110 
	}
}

112 
uöt32_t


113 
	$lib√t_«me2addr4
(
lib√t_t
 *
l
, c⁄° *
ho°_«me
, 
uöt8_t
 
u£_«me
)

115 
ö_addr
 
addr
;

116 
ho°ít
 *
ho°_ít
;

117 
uöt32_t
 
m
;

118 
uöt32_t
 
vÆ
;

119 
i
;

121 i‡(
u£_«me
 =
LIBNET_RESOLVE
)

123 i‡((
addr
.
s_addr
 = 
	`öë_addr
(
ho°_«me
)Ë=
INADDR_NONE
)

125 i‡(!(
ho°_ít
 = 
	`gëho°by«me
(
ho°_«me
)))

127 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

128 "%s(): %s", 
__func__
,

129 #i‡(
_WIN32
)

133 
	`h°ªº‹
(
h_î∫o
)

139 
	`mem˝y
(&
addr
.
s_addr
, 
ho°_ít
->
h_addr
, ho°_ít->
h_Àngth
);

142  (
addr
.
s_addr
);

149 i‡(!
	`isdigô
(
ho°_«me
[0]))

151 i‡(
l
)

153 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

154 "%s():Éx≥˘ög dŸ†™d decimÆs", 
__func__
);

160 
m
 = 0;

161 
i
 = 0; i < 4; i++)

163 
m
 <<= 8;

164 i‡(*
ho°_«me
)

166 
vÆ
 = 0;

167 *
ho°_«me
 && *host_name != '.')

169 
vÆ
 *= 10;

170 
vÆ
 +*
ho°_«me
 - '0';

171 i‡(
vÆ
 > 255)

173 i‡(
l
)

175 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

176 "%s(): vÆuêgª©îÅh™ 255", 
__func__
);

181 
ho°_«me
++;

183 
m
 |
vÆ
;

184 i‡(*
ho°_«me
)

186 
ho°_«me
++;

191  (
	`¡ohl
(
m
));

193 
	}
}

196 
	$lib√t_addr2«me6_r
(
lib√t_ö6_addr
 
addr
, 
uöt8_t
 
u£_«me
,

197 *
ho°_«me
, 
ho°_«me_Àn
)

199 
ho°ít
 *
ho°_ít
 = 
NULL
;

201 i‡(
u£_«me
 =
LIBNET_RESOLVE
)

203 #ifde‡
HAVE_SOLARIS


204 #ifde‡
HAVE_SOLARIS_IPV6


205 
ho°_ít
 = 
	`gëùnodebyaddr
((
öt8_t
 *)&
addr
, (
ö_addr
),

206 
AF_INET6
, 
NULL
);

209 
ho°_ít
 = 
NULL
;

212 
ho°_ít
 = 
	`gëho°byaddr
((
öt8_t
 *)&
addr
, (
ö_addr
),

213 
AF_INET6
);

216 i‡(!
ho°_ít
)

218 #i‡!
	`deföed
(
__WIN32__
)

219 
	`öë_¡›
(
AF_INET6
, &
addr
, 
ho°_«me
, 
ho°_«me_Àn
);

224 
	`°∫˝y
(
ho°_«me
, 
ho°_ít
->
h_«me
, 
ho°_«me_Àn
 -1);

225 
ho°_«me
[(host_name) - 1] = '\0';

227 
	}
}

229 c⁄° 
lib√t_ö6_addr
 
	gö6addr_îr‹
 = 
IN6ADDR_ERROR_INIT
;

232 
	$lib√t_ö6_is_îr‹
(
lib√t_ö6_addr
 
addr
)

234  0 =
	`memcmp
(&
addr
, &
ö6addr_îr‹
, (addr));

235 
	}
}

237 
lib√t_ö6_addr


238 
	$lib√t_«me2addr6
(
lib√t_t
 *
l
, c⁄° *
ho°_«me
, 
uöt8_t
 
u£_«me
)

240 #i‡!
	`deföed
 (
__WIN32__
)

241 
lib√t_ö6_addr
 
addr
;

242 
ho°ít
 *
ho°_ít
;

245 i‡(
u£_«me
 =
LIBNET_RESOLVE
)

247 #ifde‡
__WIN32__


249 i‡(
l
)

251 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

252 "%s(): c™'àªsﬁvêIPv6áddªs£s", 
__func__
);

254  (
ö6addr_îr‹
);

256 #ifde‡
HAVE_SOLARIS


257 #ifde‡
HAVE_SOLARIS_IPV6


258 i‡(!(
ho°_ít
 = 
	`gëùnodeby«me
((
öt8_t
 *)&
addr
,

259 (
ö_addr
), 
AF_INET6
, 
NULL
)))

261 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

262 "%s(): %s", 
__func__
, 
	`°ªº‹
(
î∫o
));

263  (
ö6addr_îr‹
);

266 i‡(!(
ho°_ít
 = 
	`gëho°by«me2
(
ho°_«me
, 
AF_INET6
)))

269 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

270 "%s(): %s", 
__func__
, 
	`°ªº‹
(
î∫o
));

271  (
ö6addr_îr‹
);

273 
	`mem˝y
(&
addr
, 
ho°_ít
->
h_addr
, ho°_ít->
h_Àngth
);

274  (
addr
);

279 #i‡
	`deföed
(
__WIN32__
)

280 i‡(
l
)

282 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

283 "%s(): c™'àªsﬁvêIPv6áddªs£s.", 
__func__
);

285  (
ö6addr_îr‹
);

287 if(!
	`öë_±⁄
(
AF_INET6
, 
ho°_«me
, &
addr
))

289 i‡(
l
)

291 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

292 "%s(): invÆid IPv6áddªss", 
__func__
);

294  (
ö6addr_îr‹
);

296  (
addr
);

299 
	}
}

301 #ifde‡
HAVE_GETIFADDRS


303 
	~<iÁddrs.h
>

305 
lib√t_ö6_addr


306 
	$lib√t_gë_ùaddr6
(
lib√t_t
 *
l
)

308 
iÁddrs
 *
iÁddr
, *
p
;

309 
lib√t_ö6_addr
 
addr
;

311 i‡(
l
 =
NULL
)

313  (
ö6addr_îr‹
);

316 i‡(
	`gëiÁddrs
(&
iÁddr
) != 0)

318 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

319 "%s(): gëiÁddrs(): %s", 
__func__
, 
	`°ªº‹
(
î∫o
));

320  (
ö6addr_îr‹
);

323 i‡(
l
->
devi˚
 =
NULL
)

325 i‡(
	`lib√t_£À˘_devi˚
(
l
) == -1)

328  (
ö6addr_îr‹
);

332 
p
 = 
iÁddr
;Ö !
NULL
;Ö =Ö->
iÁ_√xt
)

334 i‡((
	`°rcmp
(
p
->
iÁ_«me
, 
l
->
devi˚
Ë=0Ë&& (p->
iÁ_addr
 !
NULL
) &&

335 (
p
->
iÁ_addr
->
ß_Ámûy
 =
AF_INET6
))

337 
	`mem˝y
(&
addr
.
__u6_addr
,

338 ((
sockaddr_ö6
*)
p
->
iÁ_addr
)->
sö6_addr
.
s6_addr
, 16);

339 
	`‰ìiÁddrs
(
iÁddr
);

340  (
addr
);

344 
	`‰ìiÁddrs
(
iÁddr
);

345  (
ö6addr_îr‹
);

346 
	}
}

348 
lib√t_ö6_addr


349 
	$lib√t_gë_ùaddr6
(
lib√t_t
 *
l
)

351 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

352 "%s():ÇŸ yë Im∂emíãd", 
__func__
);

353  (
ö6addr_îr‹
);

354 
	}
}

357 #i‡!
deföed
(
__WIN32__
)

358 
uöt32_t


359 
	$lib√t_gë_ùaddr4
(
lib√t_t
 *
l
)

361 
i‰eq
 
i‰
;

362 
sockaddr_ö
 *
sö
;

363 
fd
;

365 i‡(
l
 =
NULL
)

371 
fd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

372 i‡(
fd
 == -1)

374 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

375 "%s(): sockë(): %s", 
__func__
, 
	`°ªº‹
(
î∫o
));

379 
sö
 = (
sockaddr_ö
 *)&
i‰
.
i‰_addr
;

381 i‡(
l
->
devi˚
 =
NULL
)

383 i‡(
	`lib√t_£À˘_devi˚
(
l
) == -1)

386 
	`˛o£
(
fd
);

390 
	`°∫˝y
(
i‰
.
i‰_«me
, 
l
->
devi˚
, (ifr.ifr_name) -1);

391 
i‰
.
i‰_«me
[(ifr.ifr_name) - 1] = '\0';

393 
i‰
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

395 i‡(
	`io˘l
(
fd
, 
SIOCGIFADDR
, (
öt8_t
*Ë&
i‰
) < 0)

397 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

398 "%s(): io˘l(): %s", 
__func__
, 
	`°ªº‹
(
î∫o
));

399 
	`˛o£
(
fd
);

402 
	`˛o£
(
fd
);

403  (
sö
->
sö_addr
.
s_addr
);

404 
	}
}

406 
	~<Packë32.h
>

407 
uöt32_t


408 
	$lib√t_gë_ùaddr4
(
lib√t_t
 *
l
)

410 
≈Êí
 = 1;

411 
sockaddr_ö
 
sö
;

412 
≈f_if_addr
 
ùbuff
;

414 
	`mem£t
(&
sö
,0,(sin));

415 
	`mem£t
(&
ùbuff
,0,(ipbuff));

417 i‡(
	`PackëGëNëInfoEx
(
l
->
devi˚
, &
ùbuff
, &
≈Êí
))

419 
sö
 = *(
sockaddr_ö
 *)&
ùbuff
.
IPAddªss
;

421  (
sö
.
sö_addr
.
s_addr
);

422 
	}
}

425 
uöt8_t
 *

426 
	$lib√t_hex_©⁄
(c⁄° *
s
, *
Àn
)

428 
uöt8_t
 *
buf
;

429 
i
;

430 
öt32_t
 
l
;

431 *
µ
;

433 
	`is•a˚
(*
s
))

435 
s
++;

437 
i
 = 0, *
Àn
 = 0; 
s
[i]; i++)

439 i‡(
s
[
i
] == ':')

441 (*
Àn
)++;

444 
buf
 = 
	`mÆloc
(*
Àn
 + 1);

445 i‡(
buf
 =
NULL
)

447  (
NULL
);

450 
i
 = 0; i < *
Àn
 + 1; i++)

452 
l
 = 
	`°πﬁ
(
s
, &
µ
, 16);

453 i‡(
µ
 =
s
 || 
l
 > 0xff ||Ü < 0)

455 *
Àn
 = 0;

456 
	`‰ì
(
buf
);

457  (
NULL
);

459 i‡(!(*
µ
 =':' || (
i
 =*
Àn
 && (
	`is•a˚
(*pp) || *pp == '\0'))))

461 *
Àn
 = 0;

462 
	`‰ì
(
buf
);

463  (
NULL
);

465 
buf
[
i
] = (
uöt8_t
)
l
;

466 
s
 = 
µ
 + 1;

469 (*
Àn
)++;

470  (
buf
);

471 
	}
}

	@/workspaces/libnet/src/libnet_version.c

33 
	~"comm⁄.h
"

35 c⁄° 
	gb™√r
[] = "lib√àvîsi⁄ " 
LIBNET_VERSION
 "";

38 
	$lib√t_vîsi⁄
()

40  (
b™√r
);

41 
	}
}

	@/workspaces/libnet/src/libnet_write.c

33 
	~"comm⁄.h
"

36 
	$lib√t_wrôe
(
lib√t_t
 *
l
)

38 
uöt32_t
 
c
;

39 
uöt32_t
 
Àn
;

40 
uöt8_t
 *
∑ckë
 = 
NULL
;

42 i‡(
l
 =
NULL
)

47 
c
 = 
	`lib√t_pblock_cﬂÀs˚
(
l
, &
∑ckë
, &
Àn
);

48 i‡(
c
 =
UINT32_MAX
)

55 
c
 = -1;

56 
l
->
öje˘i⁄_ty≥
)

58 
LIBNET_RAW4
:

59 
LIBNET_RAW4_ADV
:

60 i‡(
Àn
 > 
LIBNET_MAX_PACKET
)

62 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

64 
__func__
, 
Àn
);

65 
d⁄e
;

67 
c
 = 
	`lib√t_wrôe_øw_ùv4
(
l
, 
∑ckë
, 
Àn
);

69 
LIBNET_RAW6
:

70 
LIBNET_RAW6_ADV
:

71 
c
 = 
	`lib√t_wrôe_øw_ùv6
(
l
, 
∑ckë
, 
Àn
);

73 
LIBNET_LINK
:

74 
LIBNET_LINK_ADV
:

75 
c
 = 
	`lib√t_wrôe_lök
(
l
, 
∑ckë
, 
Àn
);

78 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

79 "%s(): unsuµ‹ãd inje˘i⁄Åy≥", 
__func__
);

80 
d⁄e
;

84 i‡(
c
 =
Àn
)

86 
l
->
°©s
.
∑ckës_£¡
++;

87 
l
->
°©s
.
byãs_wrôãn
 +
c
;

91 
l
->
°©s
.
∑ckë_îr‹s
++;

96 i‡(
c
 > 0)

98 
l
->
°©s
.
byãs_wrôãn
 +
c
;

101 
d⁄e
:

106 i‡(
l
->
Æig√r
 > 0)

108 
∑ckë
 =Öackë - 
l
->
Æig√r
;

110 
	`‰ì
(
∑ckë
);

111  (
c
);

112 
	}
}

114 #i‡
deföed
 (
__WIN32__
)

115 
lib√t_±ag_t


116 
	$lib√t_wö32_buûd_Áke_ëhî√t
 (
uöt8_t
 *
d°
, uöt8_à*
§c
, 
uöt16_t
 
ty≥
,

117 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

118 
uöt8_t
 *
∑ckë
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

120 
lib√t_ëhî√t_hdr
 
ëh_hdr
;

122 i‡(!
∑ckë
)

127 
	`mem£t
(&
ëh_hdr
, 0, (eth_hdr));

128 
ëh_hdr
.
ëhî_ty≥
 = 
	`ht⁄s
(
ty≥
);

129 
	`mem˝y
(
ëh_hdr
.
ëhî_dho°
, 
d°
, 
ETHER_ADDR_LEN
);

130 
	`mem˝y
(
ëh_hdr
.
ëhî_sho°
, 
§c
, 
ETHER_ADDR_LEN
);

132 i‡(
∑ylﬂd
 && 
∑ylﬂd_s
)

138 
	`mem˝y
(
∑ckë
 + 
LIBNET_ETH_H
, 
∑ylﬂd
, 
∑ylﬂd_s
);

140 
	`mem˝y
(
∑ckë
, &
ëh_hdr
, (eth_hdr));

142 
	}
}

144 
lib√t_±ag_t


145 
	$lib√t_wö32_buûd_Áke_tokí
 (
uöt8_t
 *
d°
, uöt8_à*
§c
, 
uöt16_t
 
ty≥
,

146 c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
,

147 
uöt8_t
 *
∑ckë
, 
lib√t_t
 *
l
, 
lib√t_±ag_t
 
±ag
)

149 
lib√t_tokí_rög_hdr
 
tokí_rög_hdr
;

151 i‡(!
∑ckë
)

156 
	`mem£t
(&
tokí_rög_hdr
, 0, (token_ring_hdr));

157 
tokí_rög_hdr
.
tokí_rög_ac˚ss_c⁄åﬁ
 = 0x10;

158 
tokí_rög_hdr
.
tokí_rög_‰ame_c⁄åﬁ
 = 0x40;

159 
tokí_rög_hdr
.
tokí_rög_Œc_dßp
 = 0xaa;

160 
tokí_rög_hdr
.
tokí_rög_Œc_sßp
 = 0xaa;

161 
tokí_rög_hdr
.
tokí_rög_Œc_c⁄åﬁ_fõld
 = 0x03;

162 
tokí_rög_hdr
.
tokí_rög_ty≥
 = 
	`ht⁄s
(
ty≥
);

163 
	`mem˝y
(
tokí_rög_hdr
.
tokí_rög_dho°
, 
d°
, 
ETHER_ADDR_LEN
);

164 
	`mem˝y
(
tokí_rög_hdr
.
tokí_rög_sho°
, 
	`lib√t_gë_hwaddr
(
l
),

165 
ETHER_ADDR_LEN
);

167 i‡(
∑ylﬂd
 && 
∑ylﬂd_s
)

173 
	`mem˝y
(
∑ckë
 + 
LIBNET_TOKEN_RING_H
, 
∑ylﬂd
, 
∑ylﬂd_s
);

175 
	`mem˝y
(
∑ckë
, &
tokí_rög_hdr
, (token_ring_hdr));

177 
	}
}

180 
	$lib√t_wö32_wrôe_øw_ùv4
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ylﬂd
, 
uöt32_t
 
∑ylﬂd_s
)

182 
BYTE
 
d°
[
ETHER_ADDR_LEN
];

183 
BYTE
 
§c
[
ETHER_ADDR_LEN
];

185 
uöt8_t
 *
∑ckë
;

186 
uöt32_t
 
∑ckë_s
;

188 
DWORD
 
ªmŸeù
 = 0;

189 
NëTy≥
 
ty≥
;

190 
lib√t_ùv4_hdr
 *
ù_hdr
 = 
NULL
;

192 
	`mem£t
(
d°
, 0, (dst));

193 
	`mem£t
(
§c
, 0, (src));

195 
∑ckë_s
 = 
∑ylﬂd_s
 + 
l
->
lök_off£t
;

196 
∑ckë
 = (
uöt8_t
*Ë
	`Æloˇ
(
∑ckë_s
);

202 i‡(
	`lib√t_öë_checksum
(
l
, (
uöt8_t
*)
∑ylﬂd
, 
IPPROTO_IP
, 
LIBNET_IPV4_H
,Öaylﬂd,Öaylﬂd+
∑ylﬂd_s
) == -1)

209 
ù_hdr
 = (
lib√t_ùv4_hdr
 *)
∑ylﬂd
;

210 
	`mem˝y
(
§c
, 
	`lib√t_gë_hwaddr
(
l
), (src));

211 
ªmŸeù
 = 
ù_hdr
->
ù_d°
.
S_un
.
S_addr
;

214 i‡(
ªmŸeù
 =
	`lib√t_gë_ùaddr4
(
l
))

216 
	`mem˝y
(
d°
, 
§c
, (dst));

220 
	`mem˝y
(
d°
, 
	`lib√t_wö32_gë_ªmŸe_mac
(
l
, 
ªmŸeù
), (dst));

223 
	`PackëGëNëTy≥
(
l
->
ÕAd≠ãr
, &
ty≥
);

225 
ty≥
.
LökTy≥
)

227 
NdisMedium802_3
:

228 
	`lib√t_wö32_buûd_Áke_ëhî√t
(
d°
, 
§c
, 
ETHERTYPE_IP
, 
∑ylﬂd
,

229 
∑ylﬂd_s
, 
∑ckë
, 
l
 , 0);

231 
NdisMedium802_5
:

232 
	`lib√t_wö32_buûd_Áke_tokí
(
d°
, 
§c
, 
ETHERTYPE_IP
, 
∑ylﬂd
,

233 
∑ylﬂd_s
, 
∑ckë
, 
l
, 0);

235 
NdisMediumFddi
:

237 
NdisMediumW™
:

238 
NdisMediumAtm
:

239 
NdisMediumAr˙ë878_2
:

241 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

242 "%s():Çëw‹kÅy≥ (%dËi†nŸ suµ‹ãd", 
__func__
,

243 
ty≥
.
LökTy≥
);

246  
	`lib√t_wrôe_lök
 (
l
, 
∑ckë
, 
∑ckë_s
);

247 
	}
}

250 
	$lib√t_wrôe_øw_ùv4
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
size
)

252  (
	`lib√t_wö32_wrôe_øw_ùv4
(
l
, 
∑ckë
, 
size
));

253 
	}
}

256 
	$lib√t_wrôe_øw_ùv6
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
size
)

259  (
	`lib√t_wrôe_øw_ùv4
(
l
, 
∑ckë
, 
size
));

260 
	}
}

265 
	$lib√t_wrôe_øw_ùv4
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
size
)

267 
ssize_t
 
c
;

268 
sockaddr_ö
 
sö
;

269 
lib√t_ùv4_hdr
 *
ù_hdr
;

271 i‡(
l
 =
NULL
)

276 
ù_hdr
 = (
lib√t_ùv4_hdr
 *)
∑ckë
;

278 #i‡(
LIBNET_BSD_BYTE_SWAP
)

285 
ù_hdr
->
ù_Àn
 = 
	`FIX
(ip_hdr->ip_len);

286 
ù_hdr
->
ù_off
 = 
	`FIX
(ip_hdr->ip_off);

289 
	`mem£t
(&
sö
, 0, (sin));

290 
sö
.
sö_Ámûy
 = 
AF_INET
;

291 
sö
.
sö_addr
.
s_addr
 = 
ù_hdr
->
ù_d°
.s_addr;

293 
c
 = 
	`£ndto
(
l
->
fd
, 
∑ckë
, 
size
, 0, (
sockaddr
 *)&
sö
,

294 (
sö
));

296 #i‡(
LIBNET_BSD_BYTE_SWAP
)

297 
ù_hdr
->
ù_Àn
 = 
	`UNFIX
(ip_hdr->ip_len);

298 
ù_hdr
->
ù_off
 = 
	`UNFIX
(ip_hdr->ip_off);

301 i‡(
c
 !(
ssize_t
)
size
)

303 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

304 "%s(): %zd byã†wrôã¿(%s)", 
__func__
, 
c
,

305 
	`°ªº‹
(
î∫o
));

307  (
c
);

308 
	}
}

311 
	$lib√t_wrôe_øw_ùv6
(
lib√t_t
 *
l
, c⁄° 
uöt8_t
 *
∑ckë
, 
uöt32_t
 
size
)

313 
ssize_t
 
c
 = -1;

315 #i‡
deföed
 
HAVE_SOLARIS
 && !deföed 
HAVE_SOLARIS_IPV6


316 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
, "%s():Ço IPv6 support",

317 
__func__
, 
	`°ªº‹
(
î∫o
));

319 
sockaddr_ö6
 
sö
;

320 
lib√t_ùv6_hdr
 *
ù_hdr
;

322 i‡(
l
 =
NULL
)

327 
ù_hdr
 = (
lib√t_ùv6_hdr
 *)
∑ckë
;

329 
	`mem£t
(&
sö
, 0, (sin));

330 
sö
.
sö6_Ámûy
 = 
AF_INET6
;

331 
	`mem˝y
(
sö
.
sö6_addr
.
s6_addr
, 
ù_hdr
->
ù_d°
.
lib√t_s6_addr
,

332 (
ù_hdr
->
ù_d°
.
lib√t_s6_addr
));

334 
c
 = 
	`£ndto
(
l
->
fd
, 
∑ckë
, 
size
, 0, (
sockaddr
 *)&
sö
, (sin));

335 i‡(
c
 !(
ssize_t
)
size
)

337 
	`¢¥ötf
(
l
->
îr_buf
, 
LIBNET_ERRBUF_SIZE
,

338 "%s(): %zd byã†wrôã¿(%s)", 
__func__
, 
c
,

339 
	`°ªº‹
(
î∫o
));

342  (
c
);

343 
	}
}

	@/workspaces/libnet/tests/unit_tests.c

2 
	~<°ddef.h
>

3 
	~<°dio.h
>

4 
	~<°dboﬁ.h
>

5 
	~<°dlib.h
>

6 
	~<°döt.h
>

7 
	~<£tjmp.h
>

8 
	~<cmocka.h
>

10 
	~<lib√t.h
>

20 
	$¥öt_îr_buf
(c⁄° *
îr_buf
)

22 
	`Ârötf
(
°dout
, "[ERROR]: %s\n", 
îr_buf
);

23 
	`exô
(
EXIT_FAILURE
);

24 
	}
}

33 
	$ã°_lib√t_buûd_ëhî√t
(**
°©e
)

35 ()
°©e
;

37 
lib√t_±ag_t
 
ëh_±ag
 = (-1);

38 
lib√t_ëhî√t_hdr
 *
ëh_hdr
 = 
NULL
;

39 
îrbuf
[
LIBNET_ERRBUF_SIZE
];

40 
uöt8_t
 *
hódî
 = 
NULL
;

41 
uöt32_t
 
hódî_size
 = 0;

42 
uöt8_t
 
mac_d°
[
ETHER_ADDR_LEN
] = { 0x11, 0x11, 0x11, 0x22, 0x22, 0x22 };

43 
uöt8_t
 
mac_§c
[
ETHER_ADDR_LEN
] = { 0x44, 0x44, 0x44, 0x55, 0x55, 0x55 };

44 
rv
 = (-1);

46 
lib√t_t
 *
l
 = 
	`lib√t_öô
(
LIBNET_LINK_ADV
,

47 
NULL
,

48 
îrbuf
);

50 i‡(
NULL
 =
l
)

52 
	`¥öt_îr_buf
(
îrbuf
);

54 
	`as£π_n⁄_nuŒ
(
l
);

56 
ëh_±ag
 = 
	`lib√t_buûd_ëhî√t
(
mac_d°
,

57 
mac_§c
,

58 
ETHERTYPE_IP
,

59 
NULL
,

61 
l
,

63 i‡((-1Ë=
ëh_±ag
)

65 
	`¥öt_îr_buf
(
îrbuf
);

67 
	`as£π_öt_nŸ_equÆ
(
ëh_±ag
, (-1));

69 
rv
 = 
	`lib√t_adv_cuŒ_hódî
(
l
,

70 
ëh_±ag
,

71 &
hódî
,

72 &
hódî_size
);

73 i‡((-1Ë=
rv
)

75 
	`¥öt_îr_buf
(
îrbuf
);

77 
	`as£π_öt_nŸ_equÆ
(
ëh_±ag
, (-1));

78 
	`as£π_öt_nŸ_equÆ
(
hódî_size
, 0);

80 
ëh_hdr
 = (
lib√t_ëhî√t_hdr
 *)
hódî
;

81 
	`as£π_öt_equÆ
(
ëh_hdr
->
ëhî_ty≥
, 
	`ht⁄s
(
ETHERTYPE_IP
));

84 
uöt8_t
 
i
 = 0; i < 
ETHER_ADDR_LEN
; i++)

86 
	`as£π_öt_equÆ
(
ëh_hdr
->
ëhî_sho°
[
i
], 
mac_§c
[i]);

90 
uöt8_t
 
i
 = 0; i < 
ETHER_ADDR_LEN
; i++)

92 
	`as£π_öt_equÆ
(
ëh_hdr
->
ëhî_dho°
[
i
], 
mac_d°
[i]);

95 
	`lib√t_de°roy
(
l
);

96 
	}
}

99 
	$maö
()

101 c⁄° 
CMUnôTe°
 
ã°s
[] = {

102 
	`cmocka_unô_ã°
(
ã°_lib√t_buûd_ëhî√t
),

105  
	`cmocka_run_group_ã°s
(
ã°s
, 
NULL
, NULL);

106 
	}
}

	@/workspaces/libnet/win32/config.h

5 #unde‡
LIBNET_BSD_BYTE_SWAP


6 #unde‡
DLPI_DEV_PREFIX


7 #unde‡
HAVE_DEV_DLPI


8 #unde‡
HAVE_SOLARIS


9 #unde‡
HAVE_SOLARIS_IPV6


10 #unde‡
HAVE_HPUX11


11 #unde‡
HAVE_SOCKADDR_SA_LEN


12 #unde‡
HAVE_DLPI


13 #unde‡
HAVE_PACKET_SOCKET


14 #unde‡
HAVE_STRUCT_IP_CSUM


15 #unde‡
HAVE_LIB_PCAP


16 #unde‡
STUPID_SOLARIS_CHECKSUM_BUG


17 #unde‡
_BSD_SOURCE


18 #unde‡
__BSD_SOURCE


19 #unde‡
_DEFAULT_SOURCE


20 #unde‡
__FAVOR_BSD


21 #unde‡
LIBNET_BIG_ENDIAN


22 
	#LIBNET_LIL_ENDIAN
 1

	)

25 #unde‡
HAVE_INTTYPES_H


28 #unde‡
HAVE_LIBNSL


31 #unde‡
HAVE_LIBPACKET


34 #unde‡
HAVE_LIBSOCKET


37 #unde‡
HAVE_LIBWPCAP


40 #unde‡
HAVE_MEMORY_H


43 
	#HAVE_NET_ETHERNET_H
 1

	)

46 #unde‡
HAVE_STDINT_H


49 #unde‡
HAVE_STDLIB_H


52 
	#HAVE_STRERROR
 1

	)

55 #unde‡
HAVE_STRINGS_H


58 #unde‡
HAVE_STRING_H


61 #unde‡
HAVE_SYS_BUFMOD_H


64 #unde‡
HAVE_SYS_DLPI_EXT_H


67 #unde‡
HAVE_SYS_SOCKIO_H


70 #unde‡
HAVE_SYS_STAT_H


73 #unde‡
HAVE_SYS_TYPES_H


76 #unde‡
HAVE_UNISTD_H


79 #unde‡
PACKAGE


82 #unde‡
PACKAGE_BUGREPORT


85 #unde‡
PACKAGE_NAME


88 #unde‡
PACKAGE_STRING


91 #unde‡
PACKAGE_TARNAME


94 #unde‡
PACKAGE_VERSION


97 #unde‡
STDC_HEADERS


	@/workspaces/libnet/win32/getopt.h

33 #i‚de‡
_GETOPT_H_


34 
	#_GETOPT_H_


	)

36 
	~<sys/cdefs.h
>

42 
	#no_¨gumít
 0

	)

43 
	#ªquúed_¨gumít
 1

	)

44 
	#›ti⁄Æ_¨gumít
 2

	)

46 
	s›ti⁄
 {

48 c⁄° *
	m«me
;

53 
	mhas_¨g
;

55 *
	mÊag
;

57 
	mvÆ
;

60 
__BEGIN_DECLS


61 
gë›t_l⁄g
(, * const *, const *,

62 c⁄° 
›ti⁄
 *, *);

63 
gë›t_l⁄g_⁄ly
(, * const *, const *,

64 c⁄° 
›ti⁄
 *, *);

65 #i‚de‡
_GETOPT_DECLARED


66 
	#_GETOPT_DECLARED


	)

67 
gë›t
(, * const [], const *);

69 *
›èrg
;

70 
›töd
, 
›ãº
, 
›t›t
;

72 #i‚de‡
_OPTRESET_DECLARED


73 
	#_OPTRESET_DECLARED


	)

74 
›åe£t
;

76 
	g__END_DECLS


	@/workspaces/libnet/win32/libnet.h

32 #ifde‡
_WIN32


34 #i‚de‡
__LIBNET_H


35 
	#__LIBNET_H


	)

37 
	~<wösock2.h
>

38 
	~<wödows.h
>

39 
	~<time.h
>

40 
	~"pˇp.h
"

43 #ifde‡
__˝lu•lus


50 #i‚de‡
__WIN32__


51 
	#__WIN32__
 
_WIN32


	)

54 
	#LIBNET_LIL_ENDIAN
 1

	)

55 
	#HAVE_CONFIG_H
 1

	)

61 
	#¢¥ötf
 
_¢¥ötf


	)

62 
	#°rdup
 
_°rdup


	)

63 
	#wrôe
 
_wrôe


	)

64 
	#›í
 
_›í


	)

65 
	#øndom
 
ønd


	)

66 
	#˛o£
 
˛o£sockë


	)

67 
	#__func__
 
__FUNCTION__


	)

68 #i‚de‡
_CRT_SECURE_NO_WARNINGS


69 
	#_CRT_SECURE_NO_WARNINGS


	)

73 #i‡
_MSC_VER
 < 1300

74 
	#__FUNCTION__
 
__FILE__


	)

78 #ifde‡
_MSC_VER


79 #¥agm®
commít
 (
lib
,"ws2_32")

80 #¥agm®
commít
 (
lib
,"iphlpapi")

81 #¥agm®
commít
 (
lib
,"wpcap")

82 #¥agm®
commít
 (
lib
,"packet")

86 
	#LIBNET_VERSION
 "1.1.6"

	)

89 
	#WPCAP
 1

	)

90 #i‚de‡
_GNU_SOURCE


91 
	#_GNU_SOURCE


	)

93 
	~<°dio.h
>

94 
	~<°rög.h
>

95 
	~<f˙é.h
>

96 
	~<sig«l.h
>

97 
	~<°dlib.h
>

98 
	~<sys/°©.h
>

99 
	~<sys/ty≥s.h
>

100 
	~<˘y≥.h
>

101 
	~<î∫o.h
>

102 
	~<°d¨g.h
>

104 
	#LIBNET_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

106 
	~"lib√t/°döt.h
"

107 
	~"lib√t/lib√t-ma¸os.h
"

108 
	~"lib√t/lib√t-hódîs.h
"

109 
	~"lib√t/lib√t-°ru˘uªs.h
"

110 
	~"lib√t/lib√t-a¢1.h
"

111 
	~"lib√t/lib√t-fun˘i⁄s.h
"

113 #ifde‡
__˝lu•lus


	@/workspaces/libnet/win32/stdint.h

32 #i‚de‡
_MSC_VER


36 #i‚de‡
_MSC_STDINT_H_


37 
	#_MSC_STDINT_H_


	)

39 #i‡
_MSC_VER
 > 1000

40 #¥agm®
⁄˚


43 
	~<limôs.h
>

49 #ifde‡
__˝lu•lus


52 
	~<wch¨.h
>

53 #ifde‡
__˝lu•lus


58 #i‚de‡
_W64


59 #i‡!
deföed
(
__midl
Ë&& (deföed(
_X86_
Ë|| deföed(
_M_IX86
)Ë&& 
_MSC_VER
 >= 1300

60 
	#_W64
 
__w64


	)

62 
	#_W64


	)

74 #i‡(
_MSC_VER
 < 1300)

75 sig√d 
	töt8_t
;

76 sig√d 
	töt16_t
;

77 sig√d 
	töt32_t
;

78 
	tuöt8_t
;

79 
	tuöt16_t
;

80 
	tuöt32_t
;

82 sig√d 
	t__öt8
 
	töt8_t
;

83 sig√d 
	t__öt16
 
	töt16_t
;

84 sig√d 
	t__öt32
 
	töt32_t
;

85 
	t__öt8
 
	tuöt8_t
;

86 
	t__öt16
 
	tuöt16_t
;

87 
	t__öt32
 
	tuöt32_t
;

89 sig√d 
	t__öt64
 
	töt64_t
;

90 
	t__öt64
 
	tuöt64_t
;

94 
öt8_t
 
	töt_Àa°8_t
;

95 
öt16_t
 
	töt_Àa°16_t
;

96 
öt32_t
 
	töt_Àa°32_t
;

97 
öt64_t
 
	töt_Àa°64_t
;

98 
uöt8_t
 
	tuöt_Àa°8_t
;

99 
uöt16_t
 
	tuöt_Àa°16_t
;

100 
uöt32_t
 
	tuöt_Àa°32_t
;

101 
uöt64_t
 
	tuöt_Àa°64_t
;

104 
öt8_t
 
	töt_Á°8_t
;

105 
öt16_t
 
	töt_Á°16_t
;

106 
öt32_t
 
	töt_Á°32_t
;

107 
öt64_t
 
	töt_Á°64_t
;

108 
uöt8_t
 
	tuöt_Á°8_t
;

109 
uöt16_t
 
	tuöt_Á°16_t
;

110 
uöt32_t
 
	tuöt_Á°32_t
;

111 
uöt64_t
 
	tuöt_Á°64_t
;

114 #ifde‡
_WIN64


115 sig√d 
	t__öt64
 
	töçå_t
;

116 
	t__öt64
 
	tuöçå_t
;

118 
_W64
 sig√d 
	töçå_t
;

119 
_W64
 
	tuöçå_t
;

123 
öt64_t
 
	tötmax_t
;

124 
uöt64_t
 
	tuötmax_t
;

129 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_LIMIT_MACROS
)

132 
	#INT8_MIN
 ((
öt8_t
)
_I8_MIN
)

	)

133 
	#INT8_MAX
 
_I8_MAX


	)

134 
	#INT16_MIN
 ((
öt16_t
)
_I16_MIN
)

	)

135 
	#INT16_MAX
 
_I16_MAX


	)

136 
	#INT32_MIN
 ((
öt32_t
)
_I32_MIN
)

	)

137 
	#INT32_MAX
 
_I32_MAX


	)

138 
	#INT64_MIN
 ((
öt64_t
)
_I64_MIN
)

	)

139 
	#INT64_MAX
 
_I64_MAX


	)

140 
	#UINT8_MAX
 
_UI8_MAX


	)

141 
	#UINT16_MAX
 
_UI16_MAX


	)

142 
	#UINT32_MAX
 
_UI32_MAX


	)

143 
	#UINT64_MAX
 
_UI64_MAX


	)

146 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

147 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

148 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

149 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

150 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

151 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

152 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

153 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

154 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

155 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

156 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

157 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

160 
	#INT_FAST8_MIN
 
INT8_MIN


	)

161 
	#INT_FAST8_MAX
 
INT8_MAX


	)

162 
	#INT_FAST16_MIN
 
INT16_MIN


	)

163 
	#INT_FAST16_MAX
 
INT16_MAX


	)

164 
	#INT_FAST32_MIN
 
INT32_MIN


	)

165 
	#INT_FAST32_MAX
 
INT32_MAX


	)

166 
	#INT_FAST64_MIN
 
INT64_MIN


	)

167 
	#INT_FAST64_MAX
 
INT64_MAX


	)

168 
	#UINT_FAST8_MAX
 
UINT8_MAX


	)

169 
	#UINT_FAST16_MAX
 
UINT16_MAX


	)

170 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

171 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

174 #ifde‡
_WIN64


175 
	#INTPTR_MIN
 
INT64_MIN


	)

176 
	#INTPTR_MAX
 
INT64_MAX


	)

177 
	#UINTPTR_MAX
 
UINT64_MAX


	)

179 
	#INTPTR_MIN
 
INT32_MIN


	)

180 
	#INTPTR_MAX
 
INT32_MAX


	)

181 
	#UINTPTR_MAX
 
UINT32_MAX


	)

185 
	#INTMAX_MIN
 
INT64_MIN


	)

186 
	#INTMAX_MAX
 
INT64_MAX


	)

187 
	#UINTMAX_MAX
 
UINT64_MAX


	)

191 #ifde‡
_WIN64


192 
	#PTRDIFF_MIN
 
_I64_MIN


	)

193 
	#PTRDIFF_MAX
 
_I64_MAX


	)

195 
	#PTRDIFF_MIN
 
_I32_MIN


	)

196 
	#PTRDIFF_MAX
 
_I32_MAX


	)

199 
	#SIG_ATOMIC_MIN
 
INT_MIN


	)

200 
	#SIG_ATOMIC_MAX
 
INT_MAX


	)

202 #i‚de‡
SIZE_MAX


203 #ifde‡
_WIN64


204 
	#SIZE_MAX
 
_UI64_MAX


	)

206 
	#SIZE_MAX
 
_UI32_MAX


	)

211 #i‚de‡
WCHAR_MIN


212 
	#WCHAR_MIN
 0

	)

214 #i‚de‡
WCHAR_MAX


215 
	#WCHAR_MAX
 
_UI16_MAX


	)

218 
	#WINT_MIN
 0

	)

219 
	#WINT_MAX
 
_UI16_MAX


	)

226 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_CONSTANT_MACROS
)

230 
	#INT8_C
(
vÆ
ËvÆ##
i8


	)

231 
	#INT16_C
(
vÆ
ËvÆ##
i16


	)

232 
	#INT32_C
(
vÆ
ËvÆ##
i32


	)

233 
	#INT64_C
(
vÆ
ËvÆ##
i64


	)

235 
	#UINT8_C
(
vÆ
ËvÆ##
ui8


	)

236 
	#UINT16_C
(
vÆ
ËvÆ##
ui16


	)

237 
	#UINT32_C
(
vÆ
ËvÆ##
ui32


	)

238 
	#UINT64_C
(
vÆ
ËvÆ##
ui64


	)

241 
	#INTMAX_C
 
INT64_C


	)

242 
	#UINTMAX_C
 
UINT64_C


	)

	@
1
.
0
125
4977
/workspaces/libnet/include/gnuc.h
/workspaces/libnet/include/ifaddrlist.h
/workspaces/libnet/include/libnet/libnet-asn1.h
/workspaces/libnet/include/libnet/libnet-functions.h
/workspaces/libnet/include/libnet/libnet-headers.h
/workspaces/libnet/include/libnet/libnet-macros.h
/workspaces/libnet/include/libnet/libnet-structures.h
/workspaces/libnet/include/libnet/libnet-types.h
/workspaces/libnet/sample/arp-new.c
/workspaces/libnet/sample/arp.c
/workspaces/libnet/sample/bgp4_hdr.c
/workspaces/libnet/sample/bgp4_notification.c
/workspaces/libnet/sample/bgp4_open.c
/workspaces/libnet/sample/bgp4_update.c
/workspaces/libnet/sample/cdp.c
/workspaces/libnet/sample/dhcp_discover.c
/workspaces/libnet/sample/dns.c
/workspaces/libnet/sample/dot1x.c
/workspaces/libnet/sample/fddi_tcp1.c
/workspaces/libnet/sample/fddi_tcp2.c
/workspaces/libnet/sample/get_addr.c
/workspaces/libnet/sample/gre.c
/workspaces/libnet/sample/hsrp.c
/workspaces/libnet/sample/icmp6_echoreq.c
/workspaces/libnet/sample/icmp6_unreach.c
/workspaces/libnet/sample/icmp_echo_cq.c
/workspaces/libnet/sample/icmp_redirect.c
/workspaces/libnet/sample/icmp_timeexceed.c
/workspaces/libnet/sample/icmp_timestamp.c
/workspaces/libnet/sample/icmp_unreach.c
/workspaces/libnet/sample/ieee.c
/workspaces/libnet/sample/ip_link.c
/workspaces/libnet/sample/ip_raw.c
/workspaces/libnet/sample/isl.c
/workspaces/libnet/sample/libnet_test.h
/workspaces/libnet/sample/lldp.c
/workspaces/libnet/sample/mpls.c
/workspaces/libnet/sample/ntp.c
/workspaces/libnet/sample/ospf_hello.c
/workspaces/libnet/sample/ospf_lsa.c
/workspaces/libnet/sample/ping_of_death.c
/workspaces/libnet/sample/rpc_tcp.c
/workspaces/libnet/sample/rpc_udp.c
/workspaces/libnet/sample/sebek.c
/workspaces/libnet/sample/smurf.c
/workspaces/libnet/sample/stp.c
/workspaces/libnet/sample/synflood.c
/workspaces/libnet/sample/synflood6.c
/workspaces/libnet/sample/synflood6_frag.c
/workspaces/libnet/sample/tcp1.c
/workspaces/libnet/sample/tcp2.c
/workspaces/libnet/sample/test_ipv4.c
/workspaces/libnet/sample/test_ipv4_options.c
/workspaces/libnet/sample/test_ipv6_icmpv4.c
/workspaces/libnet/sample/tftp.c
/workspaces/libnet/sample/tring_tcp1.c
/workspaces/libnet/sample/tring_tcp2.c
/workspaces/libnet/sample/udp1.c
/workspaces/libnet/sample/udp2.c
/workspaces/libnet/sample/win32/getopt.c
/workspaces/libnet/src/common.h
/workspaces/libnet/src/libnet_advanced.c
/workspaces/libnet/src/libnet_asn1.c
/workspaces/libnet/src/libnet_build_802.1q.c
/workspaces/libnet/src/libnet_build_802.1x.c
/workspaces/libnet/src/libnet_build_802.2.c
/workspaces/libnet/src/libnet_build_802.3.c
/workspaces/libnet/src/libnet_build_arp.c
/workspaces/libnet/src/libnet_build_bgp.c
/workspaces/libnet/src/libnet_build_cdp.c
/workspaces/libnet/src/libnet_build_data.c
/workspaces/libnet/src/libnet_build_dhcp.c
/workspaces/libnet/src/libnet_build_dns.c
/workspaces/libnet/src/libnet_build_ethernet.c
/workspaces/libnet/src/libnet_build_fddi.c
/workspaces/libnet/src/libnet_build_gre.c
/workspaces/libnet/src/libnet_build_hsrp.c
/workspaces/libnet/src/libnet_build_icmp.c
/workspaces/libnet/src/libnet_build_igmp.c
/workspaces/libnet/src/libnet_build_ip.c
/workspaces/libnet/src/libnet_build_ipsec.c
/workspaces/libnet/src/libnet_build_isl.c
/workspaces/libnet/src/libnet_build_link.c
/workspaces/libnet/src/libnet_build_lldp.c
/workspaces/libnet/src/libnet_build_mpls.c
/workspaces/libnet/src/libnet_build_ntp.c
/workspaces/libnet/src/libnet_build_ospf.c
/workspaces/libnet/src/libnet_build_rip.c
/workspaces/libnet/src/libnet_build_rpc.c
/workspaces/libnet/src/libnet_build_sebek.c
/workspaces/libnet/src/libnet_build_snmp.c
/workspaces/libnet/src/libnet_build_stp.c
/workspaces/libnet/src/libnet_build_tcp.c
/workspaces/libnet/src/libnet_build_token_ring.c
/workspaces/libnet/src/libnet_build_udp.c
/workspaces/libnet/src/libnet_build_vrrp.c
/workspaces/libnet/src/libnet_checksum.c
/workspaces/libnet/src/libnet_cq.c
/workspaces/libnet/src/libnet_crc.c
/workspaces/libnet/src/libnet_dll.c
/workspaces/libnet/src/libnet_error.c
/workspaces/libnet/src/libnet_if_addr.c
/workspaces/libnet/src/libnet_init.c
/workspaces/libnet/src/libnet_internal.c
/workspaces/libnet/src/libnet_link_bpf.c
/workspaces/libnet/src/libnet_link_dlpi.c
/workspaces/libnet/src/libnet_link_linux.c
/workspaces/libnet/src/libnet_link_nit.c
/workspaces/libnet/src/libnet_link_none.c
/workspaces/libnet/src/libnet_link_pf.c
/workspaces/libnet/src/libnet_link_snit.c
/workspaces/libnet/src/libnet_link_snoop.c
/workspaces/libnet/src/libnet_link_win32.c
/workspaces/libnet/src/libnet_pblock.c
/workspaces/libnet/src/libnet_port_list.c
/workspaces/libnet/src/libnet_prand.c
/workspaces/libnet/src/libnet_raw.c
/workspaces/libnet/src/libnet_resolve.c
/workspaces/libnet/src/libnet_version.c
/workspaces/libnet/src/libnet_write.c
/workspaces/libnet/tests/unit_tests.c
/workspaces/libnet/win32/config.h
/workspaces/libnet/win32/getopt.h
/workspaces/libnet/win32/libnet.h
/workspaces/libnet/win32/stdint.h
